[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"LIXOFT. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"LIXOFT (2024). lixoftConnectors: R connectors Lixoft Suite (@Lixoft). R package version 2023.1.","code":"@Manual{,   title = {lixoftConnectors: R connectors for Lixoft Suite (@Lixoft)},   author = {{LIXOFT}},   year = {2024},   note = {R package version 2023.1}, }"},{"path":"/reference/addAdditionalCovariate.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Add an additional covariate — addAdditionalCovariate","title":"[Monolix - PKanalix] Add an additional covariate — addAdditionalCovariate","text":"Create additional covariate stratification purpose. Notice covariates available  contant dataset. Available column transformations :","code":""},{"path":"/reference/addAdditionalCovariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Add an additional covariate — addAdditionalCovariate","text":"","code":"addAdditionalCovariate(transformation, base = \"\", name = \"\")"},{"path":"/reference/addAdditionalCovariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Add an additional covariate — addAdditionalCovariate","text":"transformation (string) applied transformation. base (string) [optional] base data transformation applied. name (string) [optional] name covariate.","code":""},{"path":[]},{"path":"/reference/addAdditionalCovariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Add an additional covariate — addAdditionalCovariate","text":"","code":"if (FALSE) { addAdditionalCovariate(\"firstDoseAmount\") addAdditionalCovariate(transformation = \"observationNumberPerIndividual\", headerName = \"CONC\") }"},{"path":"/reference/addCategoricalTransformedCovariate.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Add categorical transformed covariate — addCategoricalTransformedCovariate","title":"[Monolix] Add categorical transformed covariate — addCategoricalTransformedCovariate","text":"Create new categorical covariate transforming existing one. Transformed covariates use produce new covariates. Call getCovariateInformation know covariates can transformed.","code":""},{"path":"/reference/addCategoricalTransformedCovariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Add categorical transformed covariate — addCategoricalTransformedCovariate","text":"","code":"addCategoricalTransformedCovariate(...)"},{"path":"/reference/addCategoricalTransformedCovariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Add categorical transformed covariate — addCategoricalTransformedCovariate","text":"... list comma-separated pairs {transformedCovariateName = { = (array<(string)>)[\"basicCovariateNames\"], transformed = (array<array<string>>)\"transformation\"} }","code":""},{"path":[]},{"path":"/reference/addCategoricalTransformedCovariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Add categorical transformed covariate — addCategoricalTransformedCovariate","text":"","code":"if (FALSE) { addCategoricalTransformedCovariate( Country2 = list(reference = \"A1\",            from = \"Country\", transformed = list( A1 = c(\"A\",\"B\"), A2 = c(\"C\")))            )  }"},{"path":"/reference/addContinuousTransformedCovariate.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Add continuous transformed covariate — addContinuousTransformedCovariate","title":"[Monolix] Add continuous transformed covariate — addContinuousTransformedCovariate","text":"Create new continuous covariate transforming existing one. Transformed covariates use produce new covariates. Call getCovariateInformation know covariates can transformed.","code":""},{"path":"/reference/addContinuousTransformedCovariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Add continuous transformed covariate — addContinuousTransformedCovariate","text":"","code":"addContinuousTransformedCovariate(...)"},{"path":"/reference/addContinuousTransformedCovariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Add continuous transformed covariate — addContinuousTransformedCovariate","text":"... list comma-separated pairs {transformedCovariateName = (string)\"transformation\"}","code":""},{"path":[]},{"path":"/reference/addContinuousTransformedCovariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Add continuous transformed covariate — addContinuousTransformedCovariate","text":"","code":"if (FALSE) { addContinuousTransformedCovariate( tWt2 = \"3*exp(Wt)\"  ) }"},{"path":"/reference/addGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Add simulation group — addGroup","title":"[Simulx] Add simulation group — addGroup","text":"Add new simulation group.","code":""},{"path":"/reference/addGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Add simulation group — addGroup","text":"","code":"addGroup(group)"},{"path":"/reference/addGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Add simulation group — addGroup","text":"group (string) Name group add.","code":""},{"path":"/reference/addGroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Add simulation group — addGroup","text":"Simulation groups can added simulation Simulx GUI. default, elements newly added group first simulation group. check elements set group, please use getGroups. change group element, use setGroupElement. Note: Simulx project created, first group created default name \"simulationGroup1\".","code":""},{"path":[]},{"path":"/reference/addGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Add simulation group — addGroup","text":"","code":"# create two groups with different treatments   initializeLixoftConnectors(\"simulx\") #> [INFO] The directory specified in the initialization file of the Lixoft Suite (located at \"C:\\Users\\FranoMihaljevic\\lixoft\\lixoft.ini\") will be used by default: \"C:/Program Files/Lixoft/MonolixSuite2024R1\" #> [INFO] The lixoftConnectors package has been successfully initialized: #> lixoftConnectors package version -> 2023.1 #> Lixoft softwares suite version   -> 2024R1   project_name <- file.path(getDemoPath(), \"4.exploration\", \"PKPD_exploration.smlx\")   loadProject(project_name)   addGroup(\"simulationGroup2\")   setGroupElement(\"simulationGroup2\", elements = \"Dose_4000\")"},{"path":"/reference/addMixture.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Add mixture to the covariate model — addMixture","title":"[Monolix] Add mixture to the covariate model — addMixture","text":"Add new latent covariate current model giving name modality number.","code":""},{"path":"/reference/addMixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Add mixture to the covariate model — addMixture","text":"","code":"addMixture(...)"},{"path":"/reference/addMixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Add mixture to the covariate model — addMixture","text":"... list comma-separated pairs {latentCovariateName = (int)modalityNumber}","code":""},{"path":[]},{"path":"/reference/addMixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Add mixture to the covariate model — addMixture","text":"","code":"if (FALSE) { addMixture(lcat = 2) }"},{"path":"/reference/applyFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Apply filter — applyFilter","title":"[Monolix - PKanalix] Apply filter — applyFilter","text":"Apply filter current data.","code":""},{"path":"/reference/applyFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Apply filter — applyFilter","text":"","code":"applyFilter(filter, name = \"\")"},{"path":"/reference/applyFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Apply filter — applyFilter","text":"filter (list< list< action = \"headerName-comparator-value\" > > \"complement\") filter definition. Existing actions \"selectLines\", \"selectIds\", \"removeLines\" \"removeIds\". First vector level set unions, second one set intersection. possible give list actions high-level union. name (string) [optional] created data set name. defined, default name \"currentDataSet_filtered\".","code":""},{"path":"/reference/applyFilter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix] Apply filter — applyFilter","text":"possible actions line selection (selectLines), line removal (removeLines), Ids selection (selectIds) removal (removeIds).  selection string containing header name, comparison operator value     selection = <string> \"headerName*-comparator**-value\" (ex: \"id=='100'\", \"WEIGHT<70\", \"SEX!='M'\") Notice : - headerName corresponds data set header one header aliases defined MONOLIX software preferences - comparator possibilities  \"==\", \"!=\"  types value   \"<=\", \"<\", \">=\", \">\"  numerical types Syntax: * apply simple filter:  applyFilter( filter = list(act = sel)), e.g. applyFilter( filter = list(removeIds = \"WEIGHT<50\")) => apply filter action act selection sel. example, apply filter removes subjects weight less 50. * apply filter several concurrent conditions, .e condition:  applyFilter( list(act1 = sel1, act2 = sel2)), e.g. applyFilter( filter = list(removeIds = \"WEIGHT<50\", removeIds  = \" AGE<20\")) => apply filter action act1 sel1 action act2 sel2. example, apply filter removes subjects weight less 50 age less 20. corresponds intersecton subjects weight less 50 subjects age less 20. * apply filter several non-concurrent conditions, .e condition:  applyFilter(filter = list(list(act1 = sel1), list(act2 = sel2)) ), e.g. applyFilter( filter = list(list(removeIds = \"WEIGHT<50\"),list(removeIds  = \" AGE<20\"))) => apply filter action act1 sel1 action act2 sel2. example, apply filter removes subjects weight less 50 age less 20. corresponds union subjects weight less 50 subjects age less 20. * possible combination:  applyFilter(filter = list(list(act1 = sel1), list(act2 = sel2, act3 = sel3)) ) <=> act1,sel1 ( act2,sel2 act3,sel3 )  * possible apply complement existing filter:  applyFilter(filter = \"complement\")","code":""},{"path":[]},{"path":[]},{"path":"/reference/computeBins.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute bins — computeBins","title":"Compute bins — computeBins","text":"Compute bins values, middles, data repartition bins. Available options :","code":""},{"path":"/reference/computeBins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute bins — computeBins","text":"","code":"computeBins(data, options = list())"},{"path":"/reference/computeBins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute bins — computeBins","text":"data (vector<double>) Input data. options (list) [optional] Computation options.","code":""},{"path":"/reference/computeBins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute bins — computeBins","text":"list bins values (\"values\"), middles (\"middles\") actual number data per bin (\"repartition\").","code":""},{"path":"/reference/computeBins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute bins — computeBins","text":"","code":"if (FALSE) { computeBins(data = c(1, 1.25, 2.5, 5, 5.5, 5.75, 7.5, 15, 16.5), options = list(nbBinData = c(1,10))) }"},{"path":"/reference/computeChartsData.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Compute the charts data — computeChartsData","title":"[Monolix - PKanalix - Simulx] Compute the charts data — computeChartsData","text":"Compute (needed) export charts data given plot , specified, available project plots.","code":""},{"path":"/reference/computeChartsData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Compute the charts data — computeChartsData","text":"","code":"computeChartsData(plot = NULL, output = NULL, exportVPCSimulations = NULL)"},{"path":"/reference/computeChartsData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Compute the charts data — computeChartsData","text":"plot (character) [optional][Monolix] Plot type. specified, available project plots considered. Available plots: bivariatedataviewer, covariateviewer, outputplot, indfits, obspred, residualsscatter, residualsdistribution, vpc, npc, predictiondistribution, parameterdistribution, randomeffects, covariancemodeldiagnosis, covariatemodeldiagnosis, likelihoodcontribution, fisher, saemresults, condmeanresults, likelihoodresults. output (character) [optional][Monolix] Plotted output (depending software, can represent observation, simulation output, ...). default, available outputs considered. exportVPCSimulations (bool) [optional][Monolix] VPC simulations exported available. Equals FALSE default. NOTE: 'plot\" argument provided, 'output' \"task' arguments ignored.","code":""},{"path":"/reference/computeChartsData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix - Simulx] Compute the charts data — computeChartsData","text":"computeChartsData can used compute export charts data plots available graphical user interface Monolix, PKanalix Simulx, export > export charts data. exported charts data saved txt files result folder, ChartsData subfolder. Notice impact current scenario. get ggplot equivalent plot GUI, customizable R ggplot2 library, better use one plot... functions available connectors Monolix PKanalix (available Simulx). get charts data one plot functions dataframe, can use getChartsData.","code":""},{"path":[]},{"path":"/reference/computeChartsData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix - Simulx] Compute the charts data — computeChartsData","text":"","code":"if (FALSE) { computeChartsData() # Monolix - PKanalix - Simulx computeChartsData(plot = \"vpc\", output = \"y1\") # Monolix }"},{"path":"/reference/computePredictions.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Compute predictions from the structural model — computePredictions","title":"[Monolix] Compute predictions from the structural model — computePredictions","text":"[MlxCore][Prediction]   Call monolix prediction function compute observation models values observation times subject set individuals.","code":""},{"path":"/reference/computePredictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Compute predictions from the structural model — computePredictions","text":"","code":"computePredictions(individualParameters, individualIds = NULL)"},{"path":"/reference/computePredictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Compute predictions from the structural model — computePredictions","text":"individualParameters Individual parameter values associated one individual parameters present project, set subjects must  coherent list individuals ids passed \"individualIds\" field (ie, length subject set must sum subject number  individuals selected \"individualIds\" field). input field accepts dataframe indexed individual parameter names (columns) subject indexes (rows). individualIds [optional] vector<int> Ids individuals observation models computed. default, individuals present project considered.","code":""},{"path":"/reference/computePredictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Compute predictions from the structural model — computePredictions","text":"prediction names, vector giving computed prediction observation times subject.","code":""},{"path":[]},{"path":[]},{"path":"/reference/createFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Create filter — createFilter","title":"[Monolix - PKanalix] Create filter — createFilter","text":"Create new filtered data set applying filter existing one /complementing .","code":""},{"path":"/reference/createFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Create filter — createFilter","text":"","code":"createFilter(filter, name = \"\", origin = \"\")"},{"path":"/reference/createFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Create filter — createFilter","text":"filter (list< list< action = \"headerName-comparator-value\" > > \"complement\") [optional] filter definition. Existing actions \"selectLines\", \"selectIds\", \"removeLines\" \"removeIds\". First vector level set unions, second one set intersection. possible give list actions high-level union. name (string) [optional] created data set name. defined, default name \"currentDataSet_filtered\". origin (string) [optional] name data set filtered. current one used default.","code":""},{"path":"/reference/createFilter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix] Create filter — createFilter","text":"possible actions line selection (selectLines), line removal (removeLines), Ids selection (selectIds) removal (removeIds).  selection string containing header name, comparison operator value     selection = <string> \"headerName*-comparator**-value\" (ex: \"id=='100'\", \"WEIGHT<70\", \"SEX!='M'\") Notice : - headerName corresponds data set header one header aliases defined MONOLIX software preferences - comparator possibilities  \"==\", \"!=\"  types value   \"<=\", \"<\", \">=\", \">\"  numerical types Syntax: * create simple filter:  createFilter( filter = list(act = sel)), e.g. createFilter( filter = list(removeIds = \"WEIGHT<50\")) => create filter action act selection sel. example, create filter removes subjects weight less 50. * create filter several concurrent conditions, .e condition:  createFilter( list(act1 = sel1, act2 = sel2)), e.g. createFilter( filter = list(removeIds = \"WEIGHT<50\", removeIds  = \" AGE<20\")) => create filter action act1 sel1 action act2 sel2. example, create filter removes subjects weight less 50 age less 20. corresponds intersecton subjects weight less 50 subjects age less 20. * create filter several non-concurrent conditions, .e condition:  createFilter(filter = list(list(act1 = sel1), list(act2 = sel2)) ), e.g. createFilter( filter = list(list(removeIds = \"WEIGHT<50\"),list(removeIds  = \" AGE<20\"))) => create filter action act1 sel1 action act2 sel2. example, create filter removes subjects weight less 50 age less 20. corresponds union subjects weight less 50 subjects age less 20. * possible combinaison:  createFilter(filter = list(list(act1 = sel1), list(act2 = sel2, act3 = sel3)) ) <=> act1,sel1 ( act2,sel2 act3,sel3 )  * possible create complement existing filter:  createFilter(filter = \"complement\")","code":""},{"path":[]},{"path":[]},{"path":"/reference/defineCovariateElement.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Define covariate element — defineCovariateElement","title":"[Simulx] Define covariate element — defineCovariateElement","text":"Define edit covariate element.  Covariate elements defined used simulation Simulx GUI. elements, covariate elements can defined imported, saved Simulx project calling saveProject. covariate element defined, needs added simulation group setGroupElement used simulation.","code":""},{"path":"/reference/defineCovariateElement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Define covariate element — defineCovariateElement","text":"","code":"defineCovariateElement(name, element)"},{"path":"/reference/defineCovariateElement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Define covariate element — defineCovariateElement","text":"name (string) Element name. element (string dataFrame) Element definition external file path data frame covariates columns.","code":""},{"path":"/reference/defineCovariateElement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Define covariate element — defineCovariateElement","text":"Covariate elements can defined model used Simulx project contains block [COVARIATE]. covariate element can defined external file (csv txt) data frame. case, can contain columns occasions (optional), contain one column per covariate (mandatory). Covariate names categorical covariate values must correspond covariates categories defined model (block [COVARIATE]). occasion headers must correspond occasion names defined occasion element. data frame can used define covariate elements type 'common', .e individuals (potentially occasion-wise). want define subject-specific covariates, use external file \"id\" column.  Covariate definition distributions possible GUI (R, please sample desired distribution generate external file). external file can used cases (common subject-specific). can contain column id (optional) addition occasions (optional), contain one column per covariate (mandatory). id occasion columns present, must first columns.  id column present, covariate considered common. project subject-specific occasion structure (defined external file ID column (see defineOccasionElement)), occasion-wise common elements allowed. Covariate elements must either common subjects occasions, can defined subject-specific occasion-wise values external table, occasion structure.","code":""},{"path":[]},{"path":"/reference/defineCovariateElement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Define covariate element — defineCovariateElement","text":"","code":"# Create a manual and a subject-specific element   initializeLixoftConnectors(\"simulx\") #> [INFO] The library lixoftConnectors (\"C:\\Program Files\\Lixoft\\MonolixSuite2024R1\\lib\\lixoftConnectors.dll\") is already loaded and initialized for simulx software -> nothing to be done.   project_name <- file.path(getDemoPath(), \"1.overview\", \"importFromMonolix_clinicalTrial.smlx\")   loadProject(project_name)   defineCovariateElement(name = \"wt_typical\", element = data.frame(wt = 70, sex = 1, age = 35)) # manual   samples <- data.frame(id = 1:10, sex = sample(0:1, 10, replace = TRUE), age = rnorm(10, 30, 10))   samples$wt <- rnorm(10, mean = ifelse(samples$sex == 0, 62, 75), sd = 10) # mean weight dependent on sex   file_name <- tempfile(\"cov\", fileext = \".csv\")   write.csv(samples, file_name, row.names = FALSE)   defineCovariateElement(name = \"wt_distribution\", element = file_name) # subject-specific #> [ERROR] Cannot add the external element 'wt_distribution'. The file path is empty.    # Create an element with common occasions   initializeLixoftConnectors(\"simulx\") #> [INFO] The library lixoftConnectors (\"C:\\Program Files\\Lixoft\\MonolixSuite2024R1\\lib\\lixoftConnectors.dll\") is already loaded and initialized for simulx software -> nothing to be done.   project_name <- file.path(getDemoPath(), \"3.definition\", \"3.7.occasions\", \"occasions_common.smlx\")   loadProject(project_name)   defineCovariateElement(name = \"Fasted_Fed\", element = data.frame(occ = c(1, 2), FOOD = c(\"Fasted\", \"Fed\")))    # Create an element with subject-specific occasions   initializeLixoftConnectors(\"simulx\") #> [INFO] The library lixoftConnectors (\"C:\\Program Files\\Lixoft\\MonolixSuite2024R1\\lib\\lixoftConnectors.dll\") is already loaded and initialized for simulx software -> nothing to be done.   project_name <- file.path(getDemoPath(), \"3.definition\", \"3.7.occasions\", \"occasions_external.smlx\")   loadProject(project_name)   occasions <- getOccasionElements()   covariates <- data.frame(id = occasions$id, occ = unlist(occasions$occasions), FOOD = rep(c(\"Fasted\", \"Fed\", \"Fasted\"), 9))   file_name <- tempfile(\"cov\", fileext = \".csv\")   write.csv(covariates, file_name, row.names = FALSE)   defineCovariateElement(name = \"cov_external\", element = file_name) #> [ERROR] The file 'C:/ProgramData/Lixoft/MonolixSuite2023R1/connectors/docs/reference/cov_external' does not exist."},{"path":"/reference/defineEndpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Define endpoint element — defineEndpoint","title":"[Simulx] Define endpoint element — defineEndpoint","text":"Define edit endpoint. Endpoints summarize outcome values individuals, simulation group replicate. Endpoints defined Simulx GUI.","code":""},{"path":"/reference/defineEndpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Define endpoint element — defineEndpoint","text":"","code":"defineEndpoint(name, element)"},{"path":"/reference/defineEndpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Define endpoint element — defineEndpoint","text":"name (string) (required) Endpoint name. element (list) (required) List endpoint settings: outcome (string list) (required) - Outcome endpoint based . one outcome, use string containing name. Use list combine outcomes : outcomes (vector strings) - Vector outcome names outcomesGroupName (string) - Name want give outcome combination operator (string) - Way output combined. One \"\"/\"\" (case boolean outcomes) \"min\"/\"max\" (cases) metric (string) (optional) - Calculation method endpoint. One \"arithmeticMean\" (default), \"geometricMean\" \"median\" value-based outcome. case event-based outcomes, \"kaplanMeier\" (median survival) used case boolean outcomes, \"percentTrue\" used default. groupComparison (optional) (list) - Group comparison settings. List : type (string) (optional) - one \"directComparison\", \"statisticalTest\" (default). h1 (list) (optional) - list containing hypothesis information: operator (string) - one \"!=\" (default), \">\" \"<\", threshold (double) - real number indicating threshold difference/oddsRatio (0 default) pvalue (double) - real number indicating p-value (type \"statisticalTest\", 0.05 default)","code":""},{"path":"/reference/defineEndpoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Define endpoint element — defineEndpoint","text":"compute defined endpoints, use runEndpoints get results getEndpointsResults. specify endpoints compared across simulation groups, use setGroupComparisonSettings. group comparison relevant, way comparison done endpoint (eg statistical test p-value) defined endpoint element.","code":""},{"path":[]},{"path":"/reference/defineEndpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Define endpoint element — defineEndpoint","text":"","code":"# Endpoint with group comparison initializeLixoftConnectors(\"simulx\") #> [INFO] The library lixoftConnectors (\"C:\\Program Files\\Lixoft\\MonolixSuite2024R1\\lib\\lixoftConnectors.dll\") is already loaded and initialized for simulx software -> nothing to be done. project_name <- file.path(getDemoPath(), \"6.outcome_endpoints\", \"6.1.outcome_endpoints\", \"OutcomeEndpoint_PKPD_changeFromBaseline.smlx\") loadProject(project_name) defineEndpoint(name = \"comparison\", element = list(outcome = \"changeFromBaseline\", metric = \"geometricMean\", groupComparison = list(type = \"statisticalTest\", operator = \"!=\", threshold = \"0\", pvalue = 0.05)))  # Combine multiple outcomes initializeLixoftConnectors(\"simulx\") #> [INFO] The library lixoftConnectors (\"C:\\Program Files\\Lixoft\\MonolixSuite2024R1\\lib\\lixoftConnectors.dll\") is already loaded and initialized for simulx software -> nothing to be done. project_name <- file.path(getDemoPath(), \"6.outcome_endpoints\", \"6.1.outcome_endpoints\", \"OutcomeEndpoint_PDTTE_survival_NADIR_timeToNADIR.smlx\") loadProject(project_name) defineEndpoint(name = \"combined_endpoint\", element = list(outcome = list(names = c(\"Survival\", \"TimeToNADIR_AsEvent\"), groupName = \"combined\", operator = \"min\")))"},{"path":"/reference/defineIndividualElement.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Define individual parameters element — defineIndividualElement","title":"[Simulx] Define individual parameters element — defineIndividualElement","text":"Define edit element individual parameters. Individual parameter elements defined used simulation Simulx GUI. elements, individual parameters elements can defined imported, saved Simulx project calling saveProject. individual parameters element defined, needs added simulation group setGroupElement used simulation.","code":""},{"path":"/reference/defineIndividualElement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Define individual parameters element — defineIndividualElement","text":"","code":"defineIndividualElement(name, element)"},{"path":"/reference/defineIndividualElement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Define individual parameters element — defineIndividualElement","text":"name (string) Element name. element (string dataFrame) Element definition external file path data frame individual parameters columns.","code":""},{"path":"/reference/defineIndividualElement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Define individual parameters element — defineIndividualElement","text":"Individual parameters defined depend model simulx project. [LONGITUDINAL] block present model: parameters input list, except defined regressors. [LONGITUDINAL] [INDIVIDUAL] blocks present: parameters defined DEFINITION section [INDIVIDUAL] block. individual parameters element can defined external file (csv txt) data frame. case, can contain columns occasions (optional), contain one column per individual parameter (mandatory). parameter headers must correspond parameter names used model. occasion headers must correspond occasion names defined occasion element. data frame can used define individual parameter elements type 'common', .e individuals (potentially occasion-wise). want define subject-specific individual parameters, use external file \"id\" column. external file can used cases (common subject-specific). can contain column id (optional) addition occasions (optional), contain one column per parameter (mandatory). id occasion columns present, must first columns. id column present, parameter element considered common. project subject-specific occasion structure (defined external file ID column (see defineOccasionElement)), occasion-wise common elements allowed. case, individual parameters elements either common subjects occasions, can defined subject-specific occasion-wise values external table, occasion structure.","code":""},{"path":[]},{"path":"/reference/defineIndividualElement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Define individual parameters element — defineIndividualElement","text":"","code":"# Defining elements with one and multiple sets of indiv params   initializeLixoftConnectors(\"simulx\") #> [INFO] The directory specified in the initialization file of the Lixoft Suite (located at \"C:\\Users\\FranoMihaljevic\\lixoft\\lixoft.ini\") will be used by default: \"C:/Program Files/Lixoft/MonolixSuite2024R1\" #> [INFO] The lixoftConnectors package has been successfully initialized: #> lixoftConnectors package version -> 2023.1 #> Lixoft softwares suite version   -> 2024R1   project_name <- file.path(getDemoPath(), \"2.models\", \"longitudinal_individual.smlx\")   loadProject(project_name)   defineIndividualElement(name = \"custom_params\", element = data.frame(Tlag = 0.5, ka = 0.25, V = 70, Cl = 12, F = 0.7)) # one set   params <- data.frame(id = c(1, 2, 3), Tlag = 0.5, ka = 0.25, V = 70, Cl = 12, F = c(0.6, 0.7, 0.8))   file_name <- tempfile(\"cov\", fileext = \".csv\")   write.csv(params, file_name, row.names = FALSE)   defineIndividualElement(name = \"different_F\", element = file_name) # multiple sets #> [ERROR] The file 'C:/ProgramData/Lixoft/MonolixSuite2023R1/connectors/docs/reference/different_F' does not exist.    # Common occasions   initializeLixoftConnectors(\"simulx\") #> [INFO] The library lixoftConnectors (\"C:\\Program Files\\Lixoft\\MonolixSuite2024R1\\lib\\lixoftConnectors.dll\") is already loaded and initialized for simulx software -> nothing to be done.   project_name <- file.path(getDemoPath(), \"3.definition\", \"3.7.occasions\", \"occasions_common.smlx\")   loadProject(project_name)   defineIndividualElement(name = \"params_per_occ\", element = data.frame(occ = c(1, 2), ka = c(0.2, 0.4), V = 10, Cl = 5))    # Subject-specific occasions   initializeLixoftConnectors(\"simulx\") #> [INFO] The library lixoftConnectors (\"C:\\Program Files\\Lixoft\\MonolixSuite2024R1\\lib\\lixoftConnectors.dll\") is already loaded and initialized for simulx software -> nothing to be done.   project_name <- file.path(getDemoPath(), \"3.definition\", \"3.7.occasions\", \"occasions_external.smlx\")   loadProject(project_name)   occasions <- getOccasionElements()   params <- data.frame(ID = occasions$id, occ = unlist(occasions$occasions))   params$ka <- rlnorm(27, log(0.2), 0.1 + 0.1)   params$V <- rlnorm(27, log(5), 0.2)   params$Cl <- rlnorm(27, log(0.3), 0.15)   file_name <- tempfile(\"cov\", fileext = \".csv\")   write.csv(params, file_name, row.names = FALSE)   defineIndividualElement(name = \"params_external\", element = file_name) #> [ERROR] The file 'C:/ProgramData/Lixoft/MonolixSuite2023R1/connectors/docs/reference/params_external' does not exist."},{"path":"/reference/defineOccasionElement.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Define occasion element — defineOccasionElement","title":"[Simulx] Define occasion element — defineOccasionElement","text":"Define occasion structure project.","code":""},{"path":"/reference/defineOccasionElement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Define occasion element — defineOccasionElement","text":"","code":"defineOccasionElement(element)"},{"path":"/reference/defineOccasionElement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Define occasion element — defineOccasionElement","text":"element (string dataFrame) Element definition external file path data frame time occasion levels columns.","code":""},{"path":"/reference/defineOccasionElement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Define occasion element — defineOccasionElement","text":"occasion structure project defined used simulation Simulx GUI.  occasion element impacts definition elements simulation. elements, occasion element can defined imported, saved Simulx project calling saveProject. can defined external file (txt csv) data.frame. case, contain column time one column per occasion level. header names occasion levels free used Simulx. data frame can used define common structure occasions applied simulated subjects. external file can used cases (common subject-specific structure). can contain column id (optional) addition columns.  id column present, occasion structure considered common. defining subject-specific occasion structure, elements (parameters, covariates, treatments, outputs regressors) must either common subjects occasions, can defined subject-specific occasion-wise values external table, occasion structure.","code":""},{"path":[]},{"path":"/reference/defineOccasionElement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Define occasion element — defineOccasionElement","text":"","code":"# Example: define subject-specific occasions through external file   initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"5.simulation\", \"replicates.smlx\")   loadProject(project_name)   occasions <- data.frame(id = c(1, 1, 2, 2), time = c(0, 24, 0, 36), occ = c(1, 2, 1, 2))   file_name <- tempfile(\"cov\", fileext = \".csv\")   write.csv(occasions, file_name, row.names = FALSE)   defineOccasionElement(element = file_name)    # Example: define common occasions through data.frame   initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"5.simulation\", \"replicates.smlx\")   loadProject(project_name)   defineOccasionElement(element = data.frame(time = c(0, 0.5, 2), occ1 = c(1, 1, 2), occ2 = c(1, 2, 3)))"},{"path":"/reference/defineOutcome.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Define outcome element — defineOutcome","title":"[Simulx] Define outcome element — defineOutcome","text":"Define edit outcome. Outcomes represent post-processing simulation outputs done individual.  Outcomes defined Simulx GUI.  Outcomes can defined user (outcome imported), saved Simulx project calling saveProject.  Contrary GUI, defining outcome connectors automatically generate endpoint.  compute defined outcomes, use endpoints defineEndpoint, run runEndpoints get results getEndpointsResults.","code":""},{"path":"/reference/defineOutcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Define outcome element — defineOutcome","text":"","code":"defineOutcome(name, element)"},{"path":"/reference/defineOutcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Define outcome element — defineOutcome","text":"name (string) Outcome name. element (list) List outcome settings: , outcome based continuous categorical output: reference - one \"baseline\", \"min\", \"max\", \"minCurrentTime\", \"maxCurrentTime\" \"customValue\", type - \"ratio\" \"difference\", value - reference \"customValue\". operator (required) - one \"avg\", \"min\", \"max\", \"first\", \"last\", \"durationBelow\", \"durationAbove\", \"durationBetween\", \"timePoint\", \"none\" (output single time point require processing). type (optional) operator \"min\" \"max\", one \"value\" (default), \"timeContinuous\" \"timeEvent\", operator \"durationBelow\", \"durationAbove\" \"durationBetween\", one \"cumulativeTime\" (default), \"percentTime\", \"nbObs\", \"firstOccurenceContinuous\" \"firstOccurenceEvent\", value (optional) - vector boundaries operator \"durationBelow\", \"durationAbove\" \"durationBetween\", time point operator \"timePoint\" (0 default). operator - one \"==\", \"!=\", \">=\", \">\", \"<=\" \"<\", value - real number indicating threshold value. outcome based TTE output: type (required) - one \"timeOfEvents\" (case single repeated TTE), \"hasAnEvent\", \"hasNoEvent\" (case single TTE) \"numberOf\" (case repeated TTE), rank (optional) - rank event time outcome (type \"timeOfEvents\" repeated TTE).","code":""},{"path":[]},{"path":"/reference/defineOutcome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Define outcome element — defineOutcome","text":"","code":"# Define an outcome to calculate Cmax initializeLixoftConnectors(\"simulx\") project_name <- file.path(getDemoPath(), \"6.outcome_endpoints\", \"6.1.outcome_endpoints\", \"OutcomeEndpoint_PKPD_Cmax_targetInhibition.smlx\") loadProject(project_name) defineOutcome(name = \"Cmax_outcome\", element = list(output = \"Plasma_concentration\", processing = list(operator = \"max\", type = \"value\")))  # Define time above MIC as percentage initializeLixoftConnectors(\"simulx\") project_name <- file.path(getDemoPath(), \"6.outcome_endpoints\", \"6.1.outcome_endpoints\", \"OutcomesEndpoints_antibiotics_TaboveMIC.smlx\") loadProject(project_name) defineOutcome(name = \"TimeAboveMIC\", element = list(output = \"mlx_Cc\", processing = list(operator = \"durationAbove\", type = \"percentTime\", value = 0.5)))  # Relative outcome with threshold per individual and occasion initializeLixoftConnectors(\"simulx\") project_name <- file.path(getDemoPath(), \"6.outcome_endpoints\", \"6.1.outcome_endpoints\", \"OutcomeEndpoint_PKPD_LastPerOccasion.smlx\") loadProject(project_name) defineOutcome(name = \"custom_outcome\", element = list(output = \"prediction_Cc_per_id\", perOccasion = TRUE, relativeTo = list(reference = \"customValue\", type = \"difference\", \"value\" = 2), processing = list(operator = \"avg\"), applyThreshold = list(operator = \"<=\", threshold = 2)))  # Event based outcome initializeLixoftConnectors(\"simulx\") project_name <- file.path(getDemoPath(), \"6.outcome_endpoints\", \"6.1.outcome_endpoints\", \"OutcomeEndpoint_PDTTE_survival_NADIR_timeToNADIR.smlx\") loadProject(project_name) defineOutcome(name = \"survival_outcome\", element = list(output = \"Death\", event = list(type = \"timeOfEvents\")))"},{"path":"/reference/defineOutputElement.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Define output element — defineOutputElement","title":"[Simulx] Define output element — defineOutputElement","text":"Define edit output element.","code":""},{"path":"/reference/defineOutputElement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Define output element — defineOutputElement","text":"","code":"defineOutputElement(name, element)"},{"path":"/reference/defineOutputElement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Define output element — defineOutputElement","text":"name (string) Element name. element List : data (string dataFrame): data frame path external file (csv txt). output (string): name variable [LONGITUDINAL] block model (variable EQUATION, smooth prediction listed OUTPUT noisy observation listed DEFINITION).","code":""},{"path":"/reference/defineOutputElement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Define output element — defineOutputElement","text":"Output elements defined used simulation Simulx GUI. elements, output elements can defined imported, saved Simulx project calling saveProject. output element defined, needs added simulation group setGroupElement used simulation. define output element, addition element name, need provide time grid simulation output simulate. field data can specified data frame external file (csv txt). define regular output, common individuals, can use data frame, column headers start, interval final. time points \"start\" \"final\" steps \"interval\" used simulation. project common occasion structure, data frame can contain column occasion several lines define regular treatment occasion-wise. define output giving specific list times, data frames external files (txt csv) can used, column time. can contain columns occasions (optional). occasion headers must correspond occasion names defined occasion element. Data frames can used define output elements type 'common', .e individuals (potentially occasion-wise).  want define subject-specific output elements, use external file \"id\" column. external file can used cases (common subject-specific). can contain column id (optional) addition occasions (optional), contain one column time (mandatory). id occasion columns present, must first columns.  id column present, covariate considered common. project subject-specific occasion structure (defined external file ID column (see defineOccasionElement)), occasion-wise common elements allowed. Output elements must either common subjects occasions, can defined subject-specific occasion-wise values external table, occasion structure.","code":""},{"path":[]},{"path":"/reference/defineOutputElement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Define output element — defineOutputElement","text":"","code":"# Define subject-specific outputs using an external file (saved in tmp directory)   initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"5.simulation\", \"replicates.smlx\")   loadProject(project_name)   samplings <- data.frame(id = c(1, 1, 2, 2, 3, 3), time = c(0, 24, 0, 48, 0, 72))   file_name <- tempfile(\"cov\", fileext = \".csv\")   write.csv(samplings, file_name, row.names = FALSE)   defineOutputElement(name = \"external_output\", element = list(data = file_name, output = \"Cc\"))    # Define manual and regular output   initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"1.overview\", \"importFromMonolix_clinicalTrial.smlx\")   loadProject(project_name)   defineOutputElement(name = \"AUC_0_24\", element = list(data = data.frame(time = 24), output = \"AUC\"))   defineOutputElement(name = \"Cc_7days\", element = list(data = data.frame(start = 0, interval = 1, final = 168), output = \"Cc\"))    # Define manual and regular occasion-wise output   initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"3.definition\", \"3.7.occasions\", \"occasions_two_levels.smlx\")   loadProject(project_name)   defineOutputElement(name = \"manualOcc\", element = list(data = data.frame(time = c(0, 2, 24, 4, 36), occ1 = c(1, 1, 1, 2, 2), occ2 = c(1, 1, 2, 1, 2)),  output = \"Y\"))   defineOutputElement(name = \"regularOcc\", element = list(data = data.frame(start = c(0, 0, 24, 24), interval = c(1, 2, 1, 2), final = c(24, 48, 48, 72), occ1 = c(1, 2, 1, 2), occ2 = c(1, 1, 2, 2)), output = \"Cc\"))"},{"path":"/reference/definePopulationElement.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Define population element — definePopulationElement","title":"[Simulx] Define population element — definePopulationElement","text":"Define edit element population parameters. Population parameter elements defined used simulation Simulx GUI. elements, population parameters elements can defined imported, saved Simulx project calling saveProject. population parameters element defined, needs added simulation group setGroupElement used simulation.","code":""},{"path":"/reference/definePopulationElement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Define population element — definePopulationElement","text":"","code":"definePopulationElement(name, element)"},{"path":"/reference/definePopulationElement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Define population element — definePopulationElement","text":"name (string) Element name. element (string dataFrame) Element definition external file path data frame population parameters columns.","code":""},{"path":"/reference/definePopulationElement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Define population element — definePopulationElement","text":"Definition population parameters simulation elements allows simulate individual parameters probability distributions. possible model includes block [INDIVIDUAL] consider inter-individual variability. population parameters element can defined external file (csv txt) data frame. case, contain one column per population parameter (mandatory). check exactly column names use, can use getPopulationElements view population parameters element automatically created defining model (model [INDIVIDUAL] block). define population parameters element several lines, several sets used different replicate simulations, external file required. case, also set number replicates simulation setNbReplicates, otherwise first set population parameters taken account. replicate uses one set population parameters order appearance table. Note: possible define population elements distributions connectors GUI. , please sample values distributions R create element different rows last example .","code":""},{"path":[]},{"path":"/reference/definePopulationElement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Define population element — definePopulationElement","text":"","code":"if (FALSE) {   definePopulationElement(name = \"name\", element = \"file/path\")   definePopulationElement(name = \"name\", element = data.frame(Cl_pop = 1, V_pop = 2.5))   } # Define a pop param element with a data frame     loadProject(file.path(getDemoPath(),\"3.definition\",\"3.3.population_parameters\",\"pop_parameters_manual.smlx\"))   # get the existing pop param element as an example   ExamplePopParamData = getPopulationElements()$manual_parameters$data   ExamplePopParamData[] = rep(1,11) #set the desired values, for simplicity we use all param =1   definePopulationElement(name = \"PopParam\", element = ExamplePopParamData)  # Check impact of varying ka with replicates (external file required)    loadProject(file.path(getDemoPath(),\"3.definition\",\"3.3.population_parameters\",\"pop_parameters_manual.smlx\"))   # get the existing pop param element as an example:   ExamplePopParamData = getPopulationElements()$manual_parameters$data   # add lines to the data frame to have different values for ka:   PopParamReplicates = ExamplePopParamData[rep(1,10),]   PopParamReplicates$ka_pop = rnorm(10,mean = 0.8, sd = 0.1)   # write the table to an external file (required because it has several lines):   file_name = tempfile(\"PopParamReplicates.csv\")   write.csv(PopParamReplicates, file_name, row.names = FALSE)   # define the new element and use it in simulation:   definePopulationElement(name = \"PopParamReplicates\", element = file_name)   setGroupElement(group = \"simulationGroup1\", elements = \"PopParamReplicates\")   setNbReplicates(nb = 10) # to simulate the project 10x, each time with a different population parameter element   runSimulation()  if (FALSE) getSimulationResults()"},{"path":"/reference/defineRegressorElement.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Define regressor element — defineRegressorElement","title":"[Simulx] Define regressor element — defineRegressorElement","text":"Define edit regressor element.    Regressor elements defined used simulation Simulx GUI. regressor element defined, needs added simulation group setGroupElement used simulation. Regressor elements can defined regressors defined model loaded Simulx project.","code":""},{"path":"/reference/defineRegressorElement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Define regressor element — defineRegressorElement","text":"","code":"defineRegressorElement(name, element)"},{"path":"/reference/defineRegressorElement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Define regressor element — defineRegressorElement","text":"name (string) Element name. element (string dataFrame) Element definition external file path data frame time regressors columns.","code":""},{"path":"/reference/defineRegressorElement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Define regressor element — defineRegressorElement","text":"define regressor element, addition element name, need provide field data time points values regressor time point. simulate model points outside grid, last value carried forward interpolation used. field data can specified data frame external file (csv txt). contain column time column regressor variable. can contain columns occasions (optional). occasion headers must correspond occasion names defined occasion element. Data frames can used define regressor elements type 'common', .e individuals (potentially occasion-wise).  want define subject-specific regressor elements, use external file additional \"id\" column. external file can used cases (common subject-specific). can contain column id (optional) addition occasions (optional), time (mandatory) one column per regressor defined model (mandatory). id occasion columns present, must first columns.  id column present, covariate considered common. project subject-specific occasion structure (defined external file ID column (see defineOccasionElement)), occasion-wise common elements allowed. case, regressors must either common subjects occasions, defined subject-specific occasion-wise values external table, occasion structure.","code":""},{"path":[]},{"path":"/reference/defineRegressorElement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Define regressor element — defineRegressorElement","text":"","code":"# Define subject-specific regressors using an external file (saved in tmp directory)   initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"3.definition\", \"3.6.regressors\", \"regressor_manual_paramCovRelationship.smlx\")   loadProject(project_name)   samplings <- data.frame(id = c(1, 1, 2, 2, 3, 3), time = c(0, 24, 0, 48, 0, 72), PCA = c(9, 15, 5, 20, 3, 14))   file_name <- tempfile(\"cov\", fileext = \".csv\")   write.csv(samplings, file_name, row.names = FALSE)   defineRegressorElement(name = \"reg_external\", element = file_name)    # Define manual regressor element   initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"3.definition\", \"3.6.regressors\", \"regressor_manual_paramCovRelationship.smlx\")   loadProject(project_name)   defineRegressorElement(name = \"reg_manual\", element = data.frame(time = c(0, 0.5, 2), PCA = c(1, 2, 5.25)))    # Define manual occasion-wise regressors   initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"3.definition\", \"3.6.regressors\", \"regressor_manual_paramCovRelationship.smlx\")   loadProject(project_name)   defineOccasionElement(element = data.frame(time = c(0, 0, 0, 0), occ1 = c(1, 2, 1, 2), occ2 = c(1, 1, 2, 2)))   defineRegressorElement(name = \"name\", element = data.frame(time = c(0, 0.5, 2, 5, 6), PCA = c(1, 2, 5.25, 6, 7), occ1 = c(1, 1, 1, 2, 2), occ2 = c(1, 1, 2, 1, 2)))"},{"path":"/reference/defineTreatmentElement.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Define treatment element — defineTreatmentElement","title":"[Simulx] Define treatment element — defineTreatmentElement","text":"Define edit treatment element.","code":""},{"path":"/reference/defineTreatmentElement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Define treatment element — defineTreatmentElement","text":"","code":"defineTreatmentElement(name, element)"},{"path":"/reference/defineTreatmentElement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Define treatment element — defineTreatmentElement","text":"name (string) Element name. element (list) List treatment settings: [data frame] regular treatment common ids:occ (optional, common occasion structure, header occasion element), start, interval, nbDoses, amount [data frame] manual treatment common ids: occ (optional, common occasion structure, header occasion element), time, amount, washout (optional, add washout just dose, otherwise washout = FALSE default) [external file] manual treatment common specific id: id (optional), occ (optional), time, amount, washout (optional) [data frame external] case infusion: tInf (duration) rate (mutually exclusive). cycleDuration duration treatment repeated (can longer treatment duration) NumberOfRepetitions number times treatment repeated covariate (string) covariate use scaling (name [COVARIATE] block model) intercept (double, required continuous covariate): intercept use scaling formula: scaledAmount = amount*cov + intercept modalities (list, required categorical covariate): list lists , modality, name modality (eg \"male\"), factor, intercept use scaling formula: scaledAmount = [cov = modality]*factor*amt + intercept (scaling factor =1 intercept = 0) scaleDuration (optional, boolean) TRUE (default), infusion duration scaled, otherwise rate","code":""},{"path":"/reference/defineTreatmentElement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Define treatment element — defineTreatmentElement","text":"Treatment elements defined used simulation Simulx GUI. elements, treatment elements can defined created import, saved Simulx project calling saveProject. output element defined, needs added simulation group setGroupElement used simulation. Several treatment elements can added simulation group administered every individual group. define treatment element, addition element name, need provide list list one field \"data\" containing dose information. field data can specified data frame external file (csv txt). define regular treatment, common individuals, can use data frame, column headers start, interval, nbDoses amount. can include optional column tInf rate define infusion. project common occasion structure (.e. occasions individuals), data frame can contain column occasion define regular treatment occasion-wise. occasion headers must correspond occasion names defined occasion element. define treatment giving specific list times amounts, data frames external files (txt csv) can used, column time. can contain columns id occasions (optional). occasion headers must correspond occasion names defined occasion element. Data frames can used define output elements type 'common', .e individuals (potentially occasion-wise).  want define subject-specific treatment elements, use external file \"id\" column. external file can used cases (common subject-specific). can contain column id (optional) addition occasions (optional), contain one column time (mandatory) one column amount (mandatory). id occasion columns present, must first columns. id column present, covariate considered common.","code":""},{"path":"/reference/defineTreatmentElement.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"[Simulx] Define treatment element — defineTreatmentElement","text":"define regular schedule, advised use regular treatment without repeats, rather manual treatment repeats. Repeats useful create complex schedules addition manual regular definition, dosing regimen 3 weeks , 1 week . see impact treatment end dosing regimen, set output element spans duration treatment simulation group.","code":""},{"path":[]},{"path":"/reference/defineTreatmentElement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Define treatment element — defineTreatmentElement","text":"","code":"if (FALSE) {   defineTreatmentElement(name = \"name\", element = list(data = \"file/path\"))   defineTreatmentElement(name = \"name\", element = list(probaMissDose=0, admID=1, repeats=c(cycleDuration = 1, NumberOfRepetitions=12), data=data.frame(time=c(1,2), amount=c(1,2), tInf=c(0, 1), washout=c(TRUE, FALSE))))   defineTreatmentElement(name = \"name\", element = list(probaMissDose=0, admID=1, repeats=c(cycleDuration = 1, NumberOfRepetitions=12), data=data.frame(time=c(10,10,10,10), amount=c(10,20,30,40), occ1=c(1,1,2,2), occ2=c(1,2,1,2))))   defineTreatmentElement(name = \"name\", element = list(probaMissDose=0, admID=1, repeats=c(cycleDuration = 1, NumberOfRepetitions=12), data=data.frame(start=1, interval=2, nbDoses=10, amount=1)))   defineTreatmentElement(name = \"name\", element = list(admID=1, scale=list(covariate=\"age\", intercept=12), data=data.frame(start=1, interval=2, nbDoses=10, amount=1)))   defineTreatmentElement(name = \"name\", element = list(admID=1, scale=list(covariate=\"sex\", modalities=list(list(name=\"0\", factor=1, intercept=10), list(name=\"1\", factor=1.5, intercept=10))), data=data.frame(start=1, interval=2, nbDoses=10, amount=1))) }   ##### Working example with treatment combinations #####  # In this demo, the first group receives only the chemotherapy, while the second group receives both the chemotherapy and the anti-angiogenic therapy.  # Note that the chemotherapy treatment uses adm=1 to be applied to compartment 1 via the macro iv(adm=1, cmt=1) in the model representing the concentration of the chemo drug.  # The anti-angiogenic treatment is defined with adm=2 which is applied via the macro iv(adm=2, cmt=2) to compartment 2 representing the concentration of anti-angiogenic drug.  initializeLixoftConnectors(\"simulx\") loadProject(paste0(getDemoPath(), \"/3.definition/3.1.treatments/treatment_combinations.smlx\")) # to see how the structural model is defined: file.show(getStructuralModel())  defineTreatmentElement(name = \"Chemotherapy\", element = list(data=data.frame(start=10, interval=14, nbDoses=10, amount=1))) defineTreatmentElement(name = \"AntiAngionenic_treatment\", element = list(admID = 2, data=data.frame(start=10, interval=7, nbDoses=20, amount=1)))  setGroupElement(\"simulationGroup1\",\"Chemotherapy\") setGroupElement(\"simulationGroup2\",c(\"Chemotherapy\",\"AntiAngionenic_treatment\")) runSimulation() # use ggplot or export to Monolix/PKanalix to plot trajectories  exportProject(settings = list(targetSoftware = \"monolix\"),force = TRUE) if (FALSE) { plotObservedData( settings = list(dots = FALSE,  ylab = \"Target Occupancy\", legend = TRUE), stratify = list(colorGroup = list(name = \"group\")), preferences = list(obs = list(lineWidth = 0.5))) }   ##### Working example with a treatment scaled by weight and based on genotype #####  #  In this demo, a weight-based dose is defined by indicating the dose per unit weight in the amount box (14 nmol/kg) and using the \"Scale amount by a covariate\" option with \"Weight\" selected as covariate.  # The \"intercept\" could be used to define a offset common to all weights (e.g 14nmol/kg + 10nmol).  # When an infusion duration or rate has been defined, the user can choose if the infusion duration or the infusion rate is scaled by the covariate.  # For categorical covariates, such as the genotype, a scaling factor and an intercept can be defined for each category.  # In this demo, the scaling for Homozygous is 1 meaning that they receive the dose defined in the amount box.  # For heterozygous, the scaling is 0.8, meaning that they receive 0.8 times the amount in the amount box.   initializeLixoftConnectors(\"simulx\") loadProject(paste0(getDemoPath(), \"/3.definition/3.1.treatments/treatment_weight_and_genotype_based.smlx\"))  defineTreatmentElement(name = \"14nmolPerKg\", element = list(data=data.frame(start=0, interval=21, nbDoses=5, amount=14, tInf = 0.208), scale=list(covariate=\"Weight\", intercept = 0, scaleDuration = FALSE))) defineTreatmentElement(name = \"1000nmol\", element = list(data=data.frame(start=0, interval=21, nbDoses=5, amount=1000, tInf = 0.208))) defineTreatmentElement(name = \"1000nmolHomo_800nmolHetero\", element = list(data=data.frame(start=0, interval=21, nbDoses=5, amount=1000, tInf = 0.208), scale=list(covariate=\"Genotype\", modalities=list(list(name=\"Homozygous\", factor=1, intercept=0), list(name=\"Heterozygous\", factor=0.8, intercept=0)), scaleDuration = FALSE)))  setGroupElement(\"Weight_based\",\"14nmolPerKg\") setGroupSize(\"Weight_based\",20) setGroupElement(\"Flat_dose\",\"1000nmol\") setGroupSize(\"Flat_dose\",20) setGroupElement(\"Genotype_based\",\"1000nmolHomo_800nmolHetero\") setGroupSize(\"Genotype_based\",20) runSimulation() # use ggplot or export to Monolix/PKanalix to plot trajectories  exportProject(settings = list(targetSoftware = \"monolix\"),force = TRUE) plotObservedData(obsName = \"yTO\", settings = list(dots = FALSE,  ylab = \"Target Occupancy\"), stratify = list(splitGroup = list(name = \"group\")), preferences = list(obs = list(lineWidth = 0.5)))   ##### Working example with a probability to miss a dose #####  # In this demo, the second treatment is defined with a probability to miss a dose of 0.1, meaning that on average 10% of the doses will not be taken. The missed doses are random.  initializeLixoftConnectors(\"simulx\") loadProject(paste0(getDemoPath(), \"/3.definition/3.1.treatments/treatment_non_adherence.smlx\"))  defineTreatmentElement(name = \"OncePerDay_full_compliance\", element = list(data=data.frame(start=0, interval=1, nbDoses=112, amount=100))) defineTreatmentElement(name = \"OncePerDay_partial_compliance\", element = list(data=data.frame(start=0, interval=1, nbDoses=112, amount=100),probaMissDose = 0.1))  setGroupElement(\"simulationGroup1\",\"OncePerDay_full_compliance\") renameGroup(\"simulationGroup1\",\"FullCompliance\") setGroupElement(\"simulationGroup2\",\"OncePerDay_partial_compliance\") renameGroup(\"simulationGroup2\",\"NonAdherence\") setGroupSize(\"FullCompliance\",20) setGroupSize(\"NonAdherence\",20) runSimulation() # use ggplot or export to Monolix/PKanalix to plot trajectories  exportProject(settings = list(targetSoftware = \"monolix\"),force = TRUE) plotObservedData( settings = list(dots = FALSE,  ylab = \"Target Occupancy\"), stratify = list(splitGroup = list(name = \"group\")), preferences = list(obs = list(lineWidth = 0.5)))  ##### Working example with an external file #####  # Demo: use an external file to define a dose by age group: 1-2 years 12.5 mg, 3-6 years 18.75 mg and 7-15 years 25 mg.  # The age also appears as covariate in the model and the covariate element is defined via an external file.  # To make sure the covariates are sampled from the covariate external file and the doses sampled from the treatment external file are consistent (i.e correspond to the same id and thus the same age), the option \"shared id\" is selected between covariate and treatment elements.  initializeLixoftConnectors(\"simulx\") loadProject(paste0(getDemoPath(), \"/3.definition/3.1.treatments/treatment_external_byAgeGroup.smlx\")) tableAge = getCovariateElements()$External_AGE_values$data AmtByAgeGroups = (tableAge$AGE < 3)*12.5 + ((tableAge$AGE >=3) & (tableAge$AGE < 7))*18.75 + (tableAge$AGE >= 7)*25 Nid = length(AmtByAgeGroups) dataAmtByAgeGroups = data.frame(id = tableAge$ID, time = rep(0,Nid), amount = AmtByAgeGroups) file_name <- tempfile(\"trt\", fileext = \".csv\") write.csv(dataAmtByAgeGroups, file_name, row.names = FALSE)  defineTreatmentElement(name = \"doseByAgeGroup\", element = list(data = file_name))  setGroupElement(\"simulationGroup1\",c(\"doseByAgeGroup\",\"External_AGE_values\",\"regularCc\")) setSharedIds(c(\"covariate\", \"treatment\")) runSimulation() # use ggplot or export to Monolix/PKanalix to plot trajectories  exportProject(settings = list(targetSoftware = \"monolix\"),force = TRUE) plotObservedData(settings = list(dots = FALSE, ylab = \"Cc\",legend = TRUE, ylim = c(0,13)), stratify = list(splitGroup = list(name = \"AGE\", breaks = c(2,7)), colorGroup = list(name = \"ID\")), preferences = list(obs = list(lineWidth = 0.5)))   ##### Working example with washout #####  # In this demo, two different formulations are given.  # The reference formulation is given at time zero.  # The test formulation is given after a long washout period.  # In order not to simulate this washout period, the test dose is defined at time 48 and a washout is applied just before the test dose to reset the model to its initial state.   initializeLixoftConnectors(\"simulx\") loadProject(paste0(getDemoPath(), \"/3.definition/3.1.treatments/treatment_washout.smlx\")) defineTreatmentElement(name = \"ReferenceFormulation_atTime0\", element = list(data=data.frame(time=0, amount=600))) defineTreatmentElement(name = \"TestFormulation_atTime48\", element = list(admID = 2, data=data.frame(time=0, amount=600, washout = TRUE)))     setGroupElement(\"simulationGroup1\",c(\"ReferenceFormulation_atTime0\",\"ReferenceFormulation_atTime0\"))   ##### Working example with a regular treatment and repeats #####  # The \"repeat\" option allows to repeat a base pattern several times with a defined periodicity.  # In this demo, the first treatment is defined as one dose per day during 112 days.  # The second treatment is defined as one dose per day during 14 days and this is repeated every 28 days leading to a 2 weeks on / 2 weeks off pattern.  initializeLixoftConnectors(\"simulx\") loadProject(paste0(getDemoPath(), \"/3.definition/3.1.treatments/treatment_regular_cycles.smlx\"))  defineTreatmentElement(name = \"OncePerDay_4weeksOn\", element = list(data=data.frame(start=0, interval=1, nbDoses=112, amount=100))) defineTreatmentElement(name = \"OncePerDay_2weeksOn2weeksOff\", element = list(repeats=c(cycleDuration = 28, NumberOfRepetitions=4), data=data.frame(start=0, interval=1, nbDoses=14, amount=100)))  setGroupElement(\"simulationGroup1\",\"OncePerDay_4weeksOn\") renameGroup(\"simulationGroup1\",\"4weeksOn\") setGroupElement(\"simulationGroup2\",\"OncePerDay_2weeksOn2weeksOff\") renameGroup(\"simulationGroup2\",\"2weeksOn2weeksOff\") runSimulation() # use ggplot or export to Monolix/PKanalix to plot trajectories  exportProject(settings = list(targetSoftware = \"monolix\"),force = TRUE) plotObservedData(settings = list(dots = FALSE, ylab = \"Cc\",legend = TRUE), stratify = list(colorGroup = list(name = \"group\")), preferences = list(obs = list(lineWidth = 0.5)))"},{"path":"/reference/deleteAdditionalCovariate.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Delete additional covariate — deleteAdditionalCovariate","title":"[Monolix - PKanalix] Delete additional covariate — deleteAdditionalCovariate","text":"Delete created additinal covariate.","code":""},{"path":"/reference/deleteAdditionalCovariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Delete additional covariate — deleteAdditionalCovariate","text":"","code":"deleteAdditionalCovariate(name)"},{"path":"/reference/deleteAdditionalCovariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Delete additional covariate — deleteAdditionalCovariate","text":"name (string) name covariate.","code":""},{"path":[]},{"path":[]},{"path":"/reference/deleteElement.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Delete element — deleteElement","title":"[Simulx] Delete element — deleteElement","text":"Delete element type.","code":""},{"path":"/reference/deleteElement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Delete element — deleteElement","text":"","code":"deleteElement(name)"},{"path":"/reference/deleteElement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Delete element — deleteElement","text":"name (string) Element name.","code":""},{"path":"/reference/deleteElement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Delete element — deleteElement","text":"Elements defined created background saved Simulx project calling saveProject. check elements certain type defined far, please use one \"get..Elements\" connectors: getCovariateElements, getPopulationElements, getIndividualElements, getTreatmentElements, getOccasionElements, getRegressorElements. Elements deleted used simulation. remove element simulation, use removeGroupElement.","code":""},{"path":"/reference/deleteElement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Delete element — deleteElement","text":"","code":"initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"1.overview\", \"importFromMonolix_clinicalTrial.smlx\")   loadProject(project_name)   deleteElement(name = \"mlx_CovDist\")"},{"path":"/reference/deleteEndpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Delete an endpoint — deleteEndpoint","title":"[Simulx] Delete an endpoint — deleteEndpoint","text":"Delete endpoint.","code":""},{"path":"/reference/deleteEndpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Delete an endpoint — deleteEndpoint","text":"","code":"deleteEndpoint(name)"},{"path":"/reference/deleteEndpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Delete an endpoint — deleteEndpoint","text":"name (string) Endpoint name","code":""},{"path":"/reference/deleteEndpoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Delete an endpoint — deleteEndpoint","text":"Endopints defined created background saved Simulx project calling saveProject. check endpoints defined, please use getEndpoints.","code":""},{"path":[]},{"path":"/reference/deleteEndpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Delete an endpoint — deleteEndpoint","text":"","code":"initializeLixoftConnectors(\"simulx\") project_name <- file.path(getDemoPath(), \"6.outcome_endpoints\", \"6.1.outcome_endpoints\", \"OutcomeEndpoint_PDTTE_survival_NADIR_timeToNADIR.smlx\") loadProject(project_name) deleteEndpoint(\"mean_NADIR\")"},{"path":"/reference/deleteFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Delete filter — deleteFilter","title":"[Monolix - PKanalix] Delete filter — deleteFilter","text":"Delete data set. filtered data set active whose children active either can deleted.","code":""},{"path":"/reference/deleteFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Delete filter — deleteFilter","text":"","code":"deleteFilter(name)"},{"path":"/reference/deleteFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Delete filter — deleteFilter","text":"name (string) data set name.","code":""},{"path":[]},{"path":"/reference/deleteFilter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Delete filter — deleteFilter","text":"","code":"if (FALSE) { deleteFilter(name = \"filter2\") }"},{"path":"/reference/deleteOccasionElement.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Delete occasion element — deleteOccasionElement","title":"[Simulx] Delete occasion element — deleteOccasionElement","text":"Delete occasion element.","code":""},{"path":"/reference/deleteOccasionElement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Delete occasion element — deleteOccasionElement","text":"","code":"deleteOccasionElement()"},{"path":"/reference/deleteOccasionElement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Delete occasion element — deleteOccasionElement","text":"occasion element impacts definition elements simulation. elements, occasion element can defined imported, saved Simulx project calling saveProject. check occasion element defined, please use getOccasionElements. occasion element may impact definition elements. deleting occasion element, elements depend occasions also deleted.","code":""},{"path":"/reference/deleteOccasionElement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Delete occasion element — deleteOccasionElement","text":"","code":"initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"3.definition\", \"3.7.occasions\", \"occasions_common.smlx\")   loadProject(project_name)   deleteOccasionElement()"},{"path":"/reference/deleteOutcome.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Delete an outcome — deleteOutcome","title":"[Simulx] Delete an outcome — deleteOutcome","text":"Delete outcome.","code":""},{"path":"/reference/deleteOutcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Delete an outcome — deleteOutcome","text":"","code":"deleteOutcome(name)"},{"path":"/reference/deleteOutcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Delete an outcome — deleteOutcome","text":"name (string) Outcome name","code":""},{"path":"/reference/deleteOutcome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Delete an outcome — deleteOutcome","text":"Outcomes defined created background saved Simulx project calling saveProject. check outcomes defined, please use getOutcomes. outcome used endpoint deleted. related endpoint must deleted first deleteEndpoint.","code":""},{"path":[]},{"path":"/reference/deleteOutcome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Delete an outcome — deleteOutcome","text":"","code":"initializeLixoftConnectors(\"simulx\") project_name <- file.path(getDemoPath(), \"6.outcome_endpoints\", \"6.1.outcome_endpoints\", \"OutcomeEndpoint_PDTTE_survival_NADIR_timeToNADIR.smlx\") loadProject(project_name) deleteEndpoint(\"mean_NADIR\") deleteOutcome(\"NADIR\")"},{"path":"/reference/dot-computeBins.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Bins — .computeBins","title":"Generate Bins — .computeBins","text":"Generate Bins","code":""},{"path":"/reference/dot-computeBins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Bins — .computeBins","text":"","code":".computeBins(times, split = NULL, binsSettings = NULL)"},{"path":"/reference/dot-computeBins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Bins — .computeBins","text":"times (vector(double)) vector times. split (vector) split category associated data (split default). binsSettings (binSettingsClass) (optional) list settings bins computation: .fixedBins (bool) TRUE, specify manually bin vector (default FALSE). fixedBins (double) Define manually vector bins. use '.fixedBins' set TRUE. criteria (string) Bining criteria, one 'equalwidth', 'equalsize', 'leastsquare' methods. (default leastsquare). .fixedNbBins (bool) TRUE define fixed number bins, else define range automatic selection (default FALSE). nbBins (int) Define fixed number bins (default 10). binRange (vector(int, int)) Define range number bins (default c(5, 100)). nbBinData (vector(int, int)) Define range number data points per bin (default c(10, 200)).","code":""},{"path":"/reference/dot-computeBins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Bins — .computeBins","text":"bins dataframe","code":""},{"path":"/reference/dot-computeBins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Bins — .computeBins","text":"","code":"if (FALSE) {   .computeBins(seq_len(100), binsSettings = list(nbBins = 3)) }"},{"path":"/reference/dot-computeCdfOnGrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute CDF on grid — .computeCdfOnGrid","title":"Compute CDF on grid — .computeCdfOnGrid","text":"Compute CDF grid","code":""},{"path":"/reference/dot-computeCdfOnGrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute CDF on grid — .computeCdfOnGrid","text":"","code":".computeCdfOnGrid(data, grid, ...)"},{"path":"/reference/dot-computeCdfOnGrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute CDF on grid — .computeCdfOnGrid","text":"data (vector<double>) Input data. grid (vector<double>) Computation grid (must strictly sorted). ... [optional] normalize (bool) [optional] (default = FALSE) outliers (bool) [optional] (default = FALSE) outliers taken account .","code":""},{"path":"/reference/dot-computeCdfOnGrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute CDF on grid — .computeCdfOnGrid","text":"vector doubles.","code":""},{"path":"/reference/dot-computeDistributionFunctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute PDF and CDF — .computeDistributionFunctions","title":"Compute PDF and CDF — .computeDistributionFunctions","text":"Compute PDF CDF","code":""},{"path":"/reference/dot-computeDistributionFunctions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute PDF and CDF — .computeDistributionFunctions","text":"","code":".computeDistributionFunctions(data, bounds)"},{"path":"/reference/dot-computeDistributionFunctions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute PDF and CDF — .computeDistributionFunctions","text":"data (vector<double>) Input data. bounds (pair<double> 'normalLaw') CDF bounds.","code":""},{"path":"/reference/dot-computeDistributionFunctions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute PDF and CDF — .computeDistributionFunctions","text":"list(cdf = vector<double>, pdf = vector<double>)","code":""},{"path":"/reference/dot-computePercentiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute percentiles — .computePercentiles","title":"Compute percentiles — .computePercentiles","text":"Compute percentiles","code":""},{"path":"/reference/dot-computePercentiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute percentiles — .computePercentiles","text":"","code":".computePercentiles(data, quantiles)"},{"path":"/reference/dot-computePercentiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute percentiles — .computePercentiles","text":"data (vector<double>) Input data. quantiles (vector<double>) Quantiles.","code":""},{"path":"/reference/dot-computePercentiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute percentiles — .computePercentiles","text":"vector doubles.","code":""},{"path":"/reference/dot-computeSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute spline — .computeSpline","title":"Compute spline — .computeSpline","text":"Compute spline","code":""},{"path":"/reference/dot-computeSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute spline — .computeSpline","text":"","code":".computeSpline(x, y, ...)"},{"path":"/reference/dot-computeSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute spline — .computeSpline","text":"x (vector<double>) Input data abscissa. y (vector<double>) Input data ordinates. ... [optional] gridSize (int) Uniform grid size (default = 100)","code":""},{"path":"/reference/dot-computeSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute spline — .computeSpline","text":"vector doubles.","code":""},{"path":"/reference/dot-computeStatistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute statistics — .computeStatistics","title":"Compute statistics — .computeStatistics","text":"Compute statistics","code":""},{"path":"/reference/dot-computeStatistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute statistics — .computeStatistics","text":"","code":".computeStatistics(   data,   mode = \"arithmetic\",   errorMethod = \"standardDeviation\" )"},{"path":"/reference/dot-computeStatistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute statistics — .computeStatistics","text":"data (vector<double>) Input data. mode (string) Statistics computation mode: \"arithmetic\" (default) | \"geometric\". errorMethod (string) Error computation method: \"standardDeviation\" (default) | \"standardError\".","code":""},{"path":"/reference/dot-computeStatistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute statistics — .computeStatistics","text":"list doubles corresponding requested statistics.","code":""},{"path":"/reference/dot-computeSurvivalCurves.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute survival curve and average event number — .computeSurvivalCurves","title":"Compute survival curve and average event number — .computeSurvivalCurves","text":"Compute survival curve average event number","code":""},{"path":"/reference/dot-computeSurvivalCurves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute survival curve and average event number — .computeSurvivalCurves","text":"","code":".computeSurvivalCurves(data, grid, ...)"},{"path":"/reference/dot-computeSurvivalCurves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute survival curve and average event number — .computeSurvivalCurves","text":"data (vector< vector< pair<double> > >) Input data. grid (vector<double>) Computation grid (must strictly sorted). ... [optional] exact (bool) (default = TRUE)","code":""},{"path":"/reference/dot-computeSurvivalCurves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute survival curve and average event number — .computeSurvivalCurves","text":"list(survivalFunction = vector<double>, averageEventNumber = vector<double>, censoredData = vector< pair< vector<int>, pair<double> > >).","code":""},{"path":"/reference/dot-computeVisualGuides.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute visual guides — .computeVisualGuides","title":"Compute visual guides — .computeVisualGuides","text":"Compute linear regression, spline correlation coefficients abscissa.","code":""},{"path":"/reference/dot-computeVisualGuides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute visual guides — .computeVisualGuides","text":"","code":".computeVisualGuides(x, y)"},{"path":"/reference/dot-computeVisualGuides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute visual guides — .computeVisualGuides","text":"x (vector<double>) Input data abscissa. y (vector<double>) Input data ordinates.","code":""},{"path":"/reference/dot-computeVisualGuides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute visual guides — .computeVisualGuides","text":"list(abscissa = vector<double>, spline = vector<double>, regression = vector<double>, correlation = double).","code":""},{"path":"/reference/editFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Edit filter — editFilter","title":"[Monolix - PKanalix] Edit filter — editFilter","text":"Edit definition existing filtered data set. Refere createFilter details syntax, allowed parameters examples. Notice filtered data set depend edited one deleted.","code":""},{"path":"/reference/editFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Edit filter — editFilter","text":"","code":"editFilter(filter, name = \"\")"},{"path":"/reference/editFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Edit filter — editFilter","text":"filter (list< list< action = \"headerName-comparator-value\" > >) filter definition. name (string) [optional] data set name edit (current one default)","code":""},{"path":[]},{"path":"/reference/exportChartDataSet.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Export chart dataset — exportChartDataSet","title":"[Monolix] Export chart dataset — exportChartDataSet","text":"Export data chart Lixoft suite compatible data set format. can generated concerned chart built. file written results folder current project.","code":""},{"path":"/reference/exportChartDataSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Export chart dataset — exportChartDataSet","text":"","code":"exportChartDataSet(type, filePath = \"\")"},{"path":"/reference/exportChartDataSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Export chart dataset — exportChartDataSet","text":"type (string) Chart type whose data must exported. Available types : \"vpc\", \"indfits\". filePath [optional](string) Custom path exported file. default, written DataFile folder current project.","code":""},{"path":[]},{"path":"/reference/exportChartDataSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Export chart dataset — exportChartDataSet","text":"","code":"if (FALSE) {  exportChartDataSet(type = \"vpc\")  exportChartDataSet(type = \"indfits\", filePath = \"/path/to/exported/file.txt\") }"},{"path":"/reference/exportProject.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Export current project to Monolix, PKanalix or Simulx — exportProject","title":"[Monolix - PKanalix - Simulx] Export current project to Monolix, PKanalix or Simulx — exportProject","text":"Export current project another application MonolixSuite, load exported project. NOTE: action switches current session target software. Current unsaved modifications lost. extensions .mlxtran Monolix, .pkx PKanalix, .smlx Simulx .dxp Datxplore. WARNING: R sensitive '\\' '/', '/' can used.","code":""},{"path":"/reference/exportProject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Export current project to Monolix, PKanalix or Simulx — exportProject","text":"","code":"exportProject(settings, force = F)"},{"path":"/reference/exportProject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Export current project to Monolix, PKanalix or Simulx — exportProject","text":"settings (character) Export settings: targetSoftware (character) Target software (\"monolix\" | \"simulx\" | \"pkanalix\") filesNextToProject (boolean) [optional][Monolix - PKanalix] Save data /structural model file next exported project ([TRUE] | FALSE). Forced TRUE Simulx. dataFilePath (emphcharacter) [optional][Monolix - Simulx] Path (filesNextToProject == FALSE) name (filesNextToProject == TRUE) exported data file. Available generated datasets Monolix (vpc, individual fits) dataFileType (emphcharacter) [optional][Monolix] Dataset used exported project ([\"original\"] | \"vpc\" | \"individualFits\") modelFileName (emphcharacter) [optional][Simulx] Name exported model file. force (bool) [optional] software switch security overpassed . Equals FALSE default.","code":""},{"path":"/reference/exportProject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix - Simulx] Export current project to Monolix, PKanalix or Simulx — exportProject","text":"export, new project created temporary folder. default, file created project setting filesNextToProject = TRUE, means file dependencies data model files copied kept next new project (result folder Simulx). new project can saved desired location withsaveProject. Exporting Monolix PKanalix project Simulx automatically creates elements can used simulation, exactly GUI. see elements type created new project, can use get..Element functions: getOccasionElements, getPopulationElements, getPopulationElements, getIndividualElements, getCovariateElements, getTreatmentElements, getOutputElements, getRegressorElements.","code":""},{"path":[]},{"path":[]},{"path":"/reference/exportSimulatedData.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Export simulated data — exportSimulatedData","title":"[Simulx] Export simulated data — exportSimulatedData","text":"Export simulated dataset MonolixSuite compatible format. contains treatment information simulation results can generated simulation results available.","code":""},{"path":"/reference/exportSimulatedData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Export simulated data — exportSimulatedData","text":"","code":"exportSimulatedData(filePath = \"\")"},{"path":"/reference/exportSimulatedData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Export simulated data — exportSimulatedData","text":"filePath [optional](string) Custom path exported file. default, written results folder current project, next simulation results files. default file name simulatedData.csv.","code":""},{"path":"/reference/exportSimulatedData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Export simulated data — exportSimulatedData","text":"generated dataset can loaded Datxplore, PKanalix Monolix. Note: export simulated data load another application single line, can also use exportProject.","code":""},{"path":[]},{"path":"/reference/exportSimulatedData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Export simulated data — exportSimulatedData","text":"","code":"initializeLixoftConnectors(\"simulx\")  project_name <- file.path(getDemoPath(), \"1.overview\", \"newProject_TMDDmodel.smlx\")  loadProject(project_name)  runSimulation()  exportSimulatedData()"},{"path":"/reference/formatData.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Adapt and export a data file as a MonolixSuite formatted data set — formatData","title":"[Monolix - PKanalix] Adapt and export a data file as a MonolixSuite formatted data set — formatData","text":"Data formatting can performed Data Formatting Tab Monolix PKanalix interface. Look examples see data formatting demo project created connectors.","code":""},{"path":"/reference/formatData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Adapt and export a data file as a MonolixSuite formatted data set — formatData","text":"","code":"formatData(   dataFile,   formattedFile,   headerLines = 1,   headers,   linesToExclude = NULL,   observationSettings = NULL,   observations = NULL,   treatmentSettings = NULL,   treatments = NULL,   additionalColumns = NULL )"},{"path":"/reference/formatData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Adapt and export a data file as a MonolixSuite formatted data set — formatData","text":"dataFile (string) Path original data file. formattedFile (string) Path data file exported (must end .csv extension). headerLines (optional) (int vector<int>) Line numbers containing headers (multiple numbers given, formatted headers contain values header lines concatenated \"_\" character) - default: 1. headers (list) List headers containing information ID, time, volume (case urine data) sort columns. id (string) - Name column distinguishing data different individuals. time (string) - Name column containing observation times (case plasma data). sort (string vector<string>) - Name column(s) distinguishing different profiles. start (string) - Name column containing urine collection start times (case urine data). end (string) - Name column containing urine collection end times (case urine data). volume (string) - Name column containing collected volume urine samples (case urine data). linesToExclude (optional) (int vector<int>) Numbers lines removed data set. observationSettings (optional) (list) List containing settings applied different observation columns merged single column. distinguishWithObsId (bool) - TRUE, different observations distinguished observation ID column (default), otherwise distinguished occasions. duplicateInformation (bool) - TRUE, information undefined columns duplicated (default) newly created rows. observations (optional) (list) List lists containing information different observation types: header (string) - Name column containing observations. censoring (list) - List lists containing information different types censored data (necessary censored data): type (string) - Type censoring, one \"LLOQ\", \"ULOQ\", \"interval\". tags (string vector<string>) - Strings observation column indicating data censored (e.g., \"BLQ\", \"LLOQ\", ...). limits - Define limits censored data. censoring type \"LLOQ\" \"ULOQ\", lower upper limit defined one following arguments. censoring type \"interval\", lower upper limits censoring interval defined list two following arguments: string - column indicated header used define limits. double - value used lower/upper limit. list - Used give different values different categories. List needs two arguments: category (string) - Name column containing category. values (list) - List containing modalities keys limit values values (e.g., list(method1 = 0.06, method2 = 0.1)). treatmentSettings (optional) (list) List containing settings applied treatments. infusionType (\"rate\"|\"duration\", default = \"duration\") - Type values defining infusion. doseIntervalsAsOccasions (default = FALSE) (bool) - TRUE, occasions created dose interval. treatments (optional) (list) List can contain lists information different treatments strings paths files contain treatment information. Lists information different treatments need following elements: times (double vector<double>) - Times dose administered (R function seq can used define regular treatments). amount (string, double list) - Administered amount. Can defined way censoring limits (column name, fixed value values depending categories). infusion (string, double list) - Infusion rate duration (see treatmentSettings argument information). Can defined way censoring limits (column name, fixed value values depending categories). need provided drug administered infusion. admId (string, double list) - Administration ID. Can defined way censoring limits (column name, fixed value values depending categories). provided, default 1 used. repeatCycle (list) - List containing repetition information (need provided treatment repeated): duration (double) - Duration cycle. number (int) - Number repetitions. additionalColumns (optional) (string vector<string>) Path(s) file(s) containing additional columns (needs ID column).","code":""},{"path":"/reference/formatData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Adapt and export a data file as a MonolixSuite formatted data set — formatData","text":"","code":"# example: create a new project with a dataset to format: initializeLixoftConnectors(software = \"pkanalix\") FormattedDataPath = tempfile(\"formatted_data\", fileext = \".csv\") formatData(paste0(getDemoPath(),\"/0.data_formatting/data/units_BLQ_tags_data.csv\"),            formattedFile = FormattedDataPath,            headerLines = c(1,2),            headers = c(id=\"ID\", time=\"TIME_h\"),            observations = list(header=\"CONC_mg_L\",                                censoring = list(type=\"interval\", tags = c(\"BLQ\"),                                                  limits=list(0,\"LLOQ_mg_L\"))),            treatments = list(times=0, amount=100)) colnames(read.csv(FormattedDataPath)) # to check column names of the generated file and tag them as desired newProject(data = list(dataFile = FormattedDataPath, headerTypes = c(\"id\",\"time\",\"observation\",\"contcov\",\"contcov\",\"catcov\",\"ignore\",\"amount\",\"cens\",\"limit\"))) plotObservedData()   # demo merge_occ_ParentMetabolite.pkx formatData(paste0(getDemoPath(),\"/0.data_formatting/data/parent_metabolite_data.csv\"),            formattedFile = FormattedDataPath,            headers = c(id=\"ID\", time=\"TIME\"),            observations = list(list(header=\"PARENT\",                                     censoring = list(type=\"interval\", tags = c(\"BLQ\"), limits=list(0,0.01))),                                list(header=\"METABOLITE\")),            observationSettings = list(distinguishWithObsId = FALSE),            treatments = list(times=0, amount=\"DOSE\"))  # demo merge_obsID_ParentMetabolite.pkx formatData(paste0(getDemoPath(),\"/0.data_formatting/data/parent_metabolite_data.csv\"),            formattedFile = FormattedDataPath,            headers = c(id=\"ID\", time=\"TIME\"),            observations = list(list(header=\"PARENT\",                                     censoring = list(type=\"interval\", tags = c(\"BLQ\"), limits=list(0,0.01))),                                list(header=\"METABOLITE\")),            treatments = list(times=0, amount=\"DOSE\"))  # demo DoseAndLOQ_byCategory.pkx formatData(paste0(getDemoPath(),\"/0.data_formatting/data/units_BLQ_tags_data.csv\"),            formattedFile = FormattedDataPath,            headerLines = c(1,2),            headers = c(id=\"ID\", time=\"TIME_h\"),            observations = list(header=\"CONC_mg_L\",                                censoring = list(type=\"interval\", tags = c(\"BLQ\"),                                                  limits=list(0,list(category=\"STUDY\",                                                                    values=list(\"SD_400mg\"=0.01, \"SD_500mg\"=0.1, \"SD_600mg\"=0.1))))),            treatments = list(times=0, amount=list(category=\"STUDY\",                                                   values=list(\"SD_400mg\"=400, \"SD_500mg\"=500, \"SD_600mg\"=600))))  # demo DoseAndLOQ_fromData.pkx formatData(paste0(getDemoPath(),\"/0.data_formatting/data/units_BLQ_tags_data.csv\"),            formattedFile = FormattedDataPath,            headerLines = c(1,2),            headers = c(id=\"ID\", time=\"TIME_h\"),            observations = list(header=\"CONC_mg_L\",                                censoring = list(type=\"interval\", tags = c(\"BLQ\"),                                                  limits=list(0,\"LLOQ_mg_L\"))),            treatments = list(times=0, amount=\"STUDY\"))  # demo DoseAndLOQ_manual.pkx formatData(paste0(getDemoPath(),\"/0.data_formatting/data/units_multiple_BLQ_tags_data.csv\"),            formattedFile = FormattedDataPath,            headerLines = c(1,2),            headers = c(id=\"ID\", time=\"TIME_h\"),            observations = list(header=\"CONC_mg_L\",                                censoring = list(list(type=\"interval\", tags = c(\"BLQ1\"), limits=list(0,0.06)),                                                 list(type=\"interval\", tags = c(\"BLQ2\"), limits=list(0,0.1)))),            treatments = list(times=0, amount=600))  # demo Urine_LOQinObs.pkx formatData(paste0(getDemoPath(),\"/0.data_formatting/data/urine_LOQinObs_data.csv\"),            formattedFile = FormattedDataPath,            headers = c(id=\"ID\", start=\"START_TIME\", end=\"END_TIME\", volume=\"VOLUME\"),            observations = list(header=\"CONC\",                                 censoring=list(type=\"LLOQ\", tags=\"<LOQ=1>\", limits=\"CONC\")),            treatments = list(paste0(getDemoPath(),\"/0.data_formatting/data/urine_data_doses.csv\")))  # demo CreateOcc_AdmIdbyCategory.pkx formatData(paste0(getDemoPath(),\"/0.data_formatting/data/two_formulations_data.csv\"),            formattedFile = FormattedDataPath,            linesToExclude = 1, headerLines = c(2,3),            headers = c(id=\"ID\", time=\"TIME_h\", sort=\"FORM\"),            observations = list(header=\"CONC_mg_L\",                                 censoring=list(type=\"LLOQ\", tags=\"BLQ\", limits=0.06)),            treatments = list(times=0, amount=600, admId=list(category=\"FORM\", values=list(\"ref\"=1,\"test\"=2))))             # MONOLIX EXAMPLES  initializeLixoftConnectors(software = \"monolix\") FormattedDataPath = tempfile(\"formatted_data\")  # demo doseIntervals_as_Occ.mlxtran formatData(paste0(getDemoPath(),\"/0.data_formatting/data/data_multidose.csv\"),            formattedFile = FormattedDataPath,            headers = c(id=\"ID\", time=\"TIME\"),            observations = list(header=\"CONC\"),            treatments = list(times=seq(0,by=12,length=7), amount=40),            treatmentSettings = list(doseIntervalsAsOccasions = TRUE))  # demo warfarin_PKPDseq_project.mlxtran formatData(paste0(getDemoPath(),\"/0.data_formatting/data/warfarin_data.csv\"),            formattedFile = FormattedDataPath,            headers = c(id=\"id\", time=\"time\"),            additionalColumns = paste0(getDemoPath(),\"/0.data_formatting/data/warfarinPK_regressors.txt\"))"},{"path":"/reference/generateReport.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Generate report — generateReport","title":"[Monolix - PKanalix] Generate report — generateReport","text":"Generate Word project report default options custom .docx template.","code":""},{"path":"/reference/generateReport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Generate report — generateReport","text":"","code":"generateReport(   templateFile = NULL,   tablesStyle = NULL,   watermark = NULL,   reportFile = NULL )"},{"path":"/reference/generateReport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Generate report — generateReport","text":"templateFile [optional] (character) Path .docx template file used reporting base. provided, default report file generated (default option GUI). tablesStyle [optional] (character) watermark [optional] (list) text (character) fontFamily (character) [\"Arial\"] fontSize (int) [36] color (vector<int>) Rgb color [c(255, 0, 0)] layout (character) semiTransparent (bool) [true] reportFile [optional] (list) provided, report saved next project file name <projectname>_report.docx. nextToProject  (bool) Generate report file next project path (character) Path (nextToProject  == FALSE) name (nextToProject  == TRUE) generated report file","code":""},{"path":"/reference/generateReport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix] Generate report — generateReport","text":"Reports can generated GUI, either using default reporting using custom template. Placeholders tables can used template, replaced result tables. possible replace plots placeholders connector, requires interface open. plots placeholders present template, replaced nothing generated report.","code":""},{"path":"/reference/generateReport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Generate report — generateReport","text":"","code":"if (FALSE) { generateReport() generateReport(templateFile = \"/path/to/template.docx\") generateReport(templateFile = \"/path/to/template.docx\", tablesStyle = \"Plain Table 1\", watermark = list(text = \"watermark\", fontSize = 15)) } # Working example to generate a default report ### initializeLixoftConnectors(\"monolix\") loadProject(file.path(getDemoPath(),\"1.creating_and_using_models\",\"1.1.libraries_of_models\",\"warfarinPK_project.mlxtran\")) runScenario() reportPath = tempfile(\"report\", fileext = \".docx\") generateReport(reportFile = list(nextToProject = FALSE, path = reportPath)) file.show(reportPath)  # Working example to generate a report with a custom template### # Note that only tables get replaced. It is not possible to add plots to a report via connectors, but it can be done in the GUI. initializeLixoftConnectors(\"pkanalix\") loadProject(file.path(getDemoPath(),\"2.case_studies\",\"project_aPCSK9_SAD.pkx\")) runScenario() reportPath = tempfile(\"report\", fileext = \".docx\") generateReport(templateFile = file.path(getDemoPath(),\"2.case_studies\",\"report_templates\",\"PK_report_template_aPCSK9.docx\"), reportFile = list(nextToProject = FALSE, path = reportPath)) file.show(reportPath)"},{"path":"/reference/getAddLines.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get lines added to the model — getAddLines","title":"[Simulx] Get lines added to the model — getAddLines","text":"Get lines added model setAddLines (GUI).","code":""},{"path":"/reference/getAddLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get lines added to the model — getAddLines","text":"","code":"getAddLines()"},{"path":"/reference/getAddLines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get lines added to the model — getAddLines","text":"Additional equations can added model file Simulx GUI.  useful case import Monolix PKanalix, order add equations model, eg compute additional variable, without modifying model file used estimation without impacting elements already defined.","code":""},{"path":[]},{"path":"/reference/getAddLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Get lines added to the model — getAddLines","text":"","code":"initializeLixoftConnectors(\"simulx\")   file_name <- file.path(getDemoPath(), \"3.definition\", \"3.5.outputs\", \"output_addLines.smlx\")   loadProject(file_name)   getAddLines()"},{"path":"/reference/getAssessmentResults.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get the results of the assessment — getAssessmentResults","title":"[Monolix] Get the results of the assessment — getAssessmentResults","text":"Get results assessment.","code":""},{"path":"/reference/getAssessmentResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get the results of the assessment — getAssessmentResults","text":"","code":"getAssessmentResults()"},{"path":"/reference/getAssessmentResults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get the results of the assessment — getAssessmentResults","text":"vector lists containing, assessment run: populationParameters: results population parameter estimation using SAEM: nbexploratoryiterations (int) number iterations exploratory phase nbsmoothingiterations (int) number iterations smoothing phase convergence (data.frame) convergence history estimated population parameters convergence indicator (-2*log-likelihood) standardErrors: [optional] results standard errors estimation: method (string) fisher method used (stochasticApproximation linearization) values (vector) standard error associated population parameter loglikelihood: [optional] results log-likelihood estimation method (string) fisher method used (importanceSampling linearization) AIC (double) BIC (double) BICc (double) modified BIC LL (double) chosenDegree (int) [importanceSampling] standardError (double) [importanceSampling] convergence (data.frame) [importanceSampling]","code":""},{"path":[]},{"path":"/reference/getAssessmentResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Get the results of the assessment — getAssessmentResults","text":"","code":"if (FALSE) { getAssessmentResults() }"},{"path":"/reference/getAssessmentSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get assessment settings — getAssessmentSettings","title":"[Monolix] Get assessment settings — getAssessmentSettings","text":"Get settings used run assessment.","code":""},{"path":"/reference/getAssessmentSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get assessment settings — getAssessmentSettings","text":"","code":"getAssessmentSettings()"},{"path":"/reference/getAssessmentSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get assessment settings — getAssessmentSettings","text":"list settings nbRuns: (int) number runs extendedEstimation: (boolean) TRUE, standard errors log-likelihood estimated useLin: (boolean) TRUE, use linearization estimate standard errors log-likelihood instead stochastic approximation (sd) importance sampling (ll) initialParameters: (list) list giving, parameter, initial value fixed (fixed = [FALSE]|TRUE) , case, bounds within initial value drawn (min = double, max = double)","code":""},{"path":[]},{"path":[]},{"path":"/reference/getAvailableData.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Get data sets descriptions — getAvailableData","title":"[Monolix - PKanalix] Get data sets descriptions — getAvailableData","text":"Get information data sets filters defined project.","code":""},{"path":"/reference/getAvailableData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Get data sets descriptions — getAvailableData","text":"","code":"getAvailableData()"},{"path":"/reference/getAvailableData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix] Get data sets descriptions — getAvailableData","text":"list containing list containing elements describe data set: name: string, name data set file: string, path data set file current: boolean indicating data set applied (currently use) children: list containing lists information data sets created one using filters filter (dataset created using filters): list containing name parent details filter definition","code":""},{"path":"/reference/getAvailableData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Get data sets descriptions — getAvailableData","text":"","code":"if (FALSE) { getAvailableData() }"},{"path":"/reference/getBioequivalenceResults.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get Bioequivalence results — getBioequivalenceResults","title":"[PKanalix] Get Bioequivalence results — getBioequivalenceResults","text":"Get results different steps bioequivalence analysis.","code":""},{"path":"/reference/getBioequivalenceResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get Bioequivalence results — getBioequivalenceResults","text":"","code":"getBioequivalenceResults(...)"},{"path":"/reference/getBioequivalenceResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Get Bioequivalence results — getBioequivalenceResults","text":"... (string) Name step whose values must displayed : \"anova\", \"coefficientsOfVariation\", \"confidenceIntervals\"","code":""},{"path":"/reference/getBioequivalenceResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Get Bioequivalence results — getBioequivalenceResults","text":"","code":"if (FALSE) { bioeqResults = getBioequivalenceResults() # retrieve all the results values. bioeqResults = getBioequivalenceResults(\"anova\", \"confidenceIntervals\") # retrieve anova and confidence intervals results. }"},{"path":"/reference/getBioequivalenceSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get the settings associated to the bioequivalence estimation. — getBioequivalenceSettings","title":"[PKanalix] Get the settings associated to the bioequivalence estimation. — getBioequivalenceSettings","text":"Get settings associated bioequivalence estimation. Associated settings :","code":""},{"path":"/reference/getBioequivalenceSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get the settings associated to the bioequivalence estimation. — getBioequivalenceSettings","text":"","code":"getBioequivalenceSettings(...)"},{"path":"/reference/getBioequivalenceSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Get the settings associated to the bioequivalence estimation. — getBioequivalenceSettings","text":"... [optional] (string) Name settings whose value displayed. argument provided, settings returned.","code":""},{"path":"/reference/getBioequivalenceSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Get the settings associated to the bioequivalence estimation. — getBioequivalenceSettings","text":"array associates setting name current value.","code":""},{"path":[]},{"path":"/reference/getBioequivalenceSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Get the settings associated to the bioequivalence estimation. — getBioequivalenceSettings","text":"","code":"if (FALSE) { getBioequivalenceSettings() # retrieve a list of all the bioequivalence methodology settings getBioequivalenceSettings(\"level\",\"bioequivalenceLimits\") # retrieve a list containing only the value of the settings whose name has been passed in argument }"},{"path":"/reference/getCACost.html","id":null,"dir":"Reference","previous_headings":"","what":"[Pkanalix] Get the value of minimized cost in CA — getCACost","title":"[Pkanalix] Get the value of minimized cost in CA — getCACost","text":"Get value cost function minimized CA, additional criteria compare models. detailed formulae cost, -2LL, AIC BIC given https://pkanalix.lixoft.com/ca-settings/. Cost: weighted sum squared residuals. Weights specified setCAsettings. Additional weights applied balance number observations profile. -2LL: Twice negative log-likelihood based obtained cost. AIC: Akaike Information Criteria calculated based penalization -2LL number optimized parameters. BIC: Bayesian Information Criteria calculated based penalization -2LL number optimized parameters total number data points.","code":""},{"path":"/reference/getCACost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Pkanalix] Get the value of minimized cost in CA — getCACost","text":"","code":"getCACost()"},{"path":"/reference/getCACost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Pkanalix] Get the value of minimized cost in CA — getCACost","text":"data frame values total cost, -2LL, AIC BIC computed last run.","code":""},{"path":[]},{"path":"/reference/getCAData.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get data used for CA computation — getCAData","title":"[PKanalix] Get data used for CA computation — getCAData","text":"Get data used compute CA estimation","code":""},{"path":"/reference/getCAData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get data used for CA computation — getCAData","text":"","code":"getCAData()"},{"path":[]},{"path":"/reference/getCAIndividualParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get CA individual parameters — getCAIndividualParameters","title":"[PKanalix] Get CA individual parameters — getCAIndividualParameters","text":"Get estimated values subject individual CA parameters current project.","code":""},{"path":"/reference/getCAIndividualParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get CA individual parameters — getCAIndividualParameters","text":"","code":"getCAIndividualParameters(...)"},{"path":"/reference/getCAIndividualParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Get CA individual parameters — getCAIndividualParameters","text":"... (string) Name individual parameters whose values must displayed.","code":""},{"path":"/reference/getCAIndividualParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Get CA individual parameters — getCAIndividualParameters","text":"data frame giving estimated values individual parameters interest subject list information relative parameters (units)","code":""},{"path":[]},{"path":"/reference/getCAInitialValues.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get the initial values of individual parameters for the compartmental analysis — getCAInitialValues","title":"[PKanalix] Get the initial values of individual parameters for the compartmental analysis — getCAInitialValues","text":"Get list initial values parameters model used compartmental analysis. element parameter list list ","code":""},{"path":"/reference/getCAInitialValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get the initial values of individual parameters for the compartmental analysis — getCAInitialValues","text":"","code":"getCAInitialValues()"},{"path":"/reference/getCAParametersByAutoInit.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Automatically estimate initial parameters values. — getCAParametersByAutoInit","title":"[PKanalix] Automatically estimate initial parameters values. — getCAParametersByAutoInit","text":"Run automatic calculation optimized parameters CA initial parameters set project.","code":""},{"path":"/reference/getCAParametersByAutoInit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Automatically estimate initial parameters values. — getCAParametersByAutoInit","text":"","code":"getCAParametersByAutoInit()"},{"path":"/reference/getCAParametersByAutoInit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Automatically estimate initial parameters values. — getCAParametersByAutoInit","text":"","code":"if (FALSE) { autoinitvalues <- getCAParametersByAutoInit() setCAInitialValues(initialValues = autoinitvalues) }"},{"path":"/reference/getCAParameterStatistics.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get CA parameter statistics — getCAParameterStatistics","title":"[PKanalix] Get CA parameter statistics — getCAParameterStatistics","text":"Get statistics estimated values CA parameters current project. Statistics computed different sets individuals resulting stratification settings passed argument , given, ones previously set.","code":""},{"path":"/reference/getCAParameterStatistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get CA parameter statistics — getCAParameterStatistics","text":"","code":"getCAParameterStatistics(parameters = c(), stratification = NULL)"},{"path":"/reference/getCAParameterStatistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Get CA parameter statistics — getCAParameterStatistics","text":"parameters [optional](vector<string>) Name parameters whose values must displayed. stratification [optional] Stratification apply results. default, project one applied. Stratification list containing: state Stratification state groups Stratification groups list See setCAResultsStratification details argument structure.","code":""},{"path":"/reference/getCAParameterStatistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Get CA parameter statistics — getCAParameterStatistics","text":"data frame giving statistics parameters interest, list information relative parameters (units)","code":""},{"path":[]},{"path":[]},{"path":"/reference/getCAResultsStratification.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get CA results stratification — getCAResultsStratification","title":"[PKanalix] Get CA results stratification — getCAResultsStratification","text":"Get stratification used compute NCA parameters stratistics table. Stratification defined : stratification covariate groups shared NCA CA results stratification state specific task results","code":""},{"path":"/reference/getCAResultsStratification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get CA results stratification — getCAResultsStratification","text":"","code":"getCAResultsStratification()"},{"path":"/reference/getCAResultsStratification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Get CA results stratification — getCAResultsStratification","text":"list stratification groups ('groups') stratification state ('state').","code":""},{"path":"/reference/getCAResultsStratification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[PKanalix] Get CA results stratification — getCAResultsStratification","text":"covariate, stratification groups can defined list : stratification state represented list :","code":""},{"path":[]},{"path":[]},{"path":"/reference/getCASettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get the settings associated to the compartmental analysis — getCASettings","title":"[PKanalix] Get the settings associated to the compartmental analysis — getCASettings","text":"Get settings associated compartmental analysis. Associated settings :","code":""},{"path":"/reference/getCASettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get the settings associated to the compartmental analysis — getCASettings","text":"","code":"getCASettings(...)"},{"path":"/reference/getCASettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Get the settings associated to the compartmental analysis — getCASettings","text":"... [optional] (string) Name settings whose value displayed. argument provided, settings returned.","code":""},{"path":"/reference/getCASettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Get the settings associated to the compartmental analysis — getCASettings","text":"array associates setting name current value.","code":""},{"path":[]},{"path":"/reference/getCASettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Get the settings associated to the compartmental analysis — getCASettings","text":"","code":"if (FALSE) { getCASettings() # retrieve a list of all the CA methodology settings getCASettings(\"weightingca\",\"blqmethod\") # retrieve a list containing only the value of the settings whose name has been passed in argument }"},{"path":"/reference/getChartsData.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Compute Charts data with custom stratification options and custom computation settings — getChartsData","title":"[Monolix - PKanalix] Compute Charts data with custom stratification options and custom computation settings — getChartsData","text":"[Monolix - PKanalix] Compute Charts data custom stratification options custom computation settings","code":""},{"path":"/reference/getChartsData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Compute Charts data with custom stratification options and custom computation settings — getChartsData","text":"","code":"getChartsData(   plotName,   computeSettings = NULL,   ids = NULL,   splitGroup = NULL,   colorGroup = NULL,   filter = NULL )"},{"path":"/reference/getChartsData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Compute Charts data with custom stratification options and custom computation settings — getChartsData","text":"plotName (string) Name plot function. computeSettings (list) list computational settings (can include arguments settings argument plot, well obsName) ids list ids display (default ids displayed). splitGroup data group criteria. list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. (default split applied). colorGroup data group criteria. list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. (default color group defined). filter data filtering criteria. list, list list fields: name : name covariate filter, cat : case categorical covariate, name category filter, interval : case continuous covariate, list filtering intervals. (default filtering applied).","code":""},{"path":"/reference/getChartsData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix] Compute Charts data with custom stratification options and custom computation settings — getChartsData","text":"dataframe object list dataframe object pass \"data\" argument plot functions","code":""},{"path":"/reference/getChartsData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Compute Charts data with custom stratification options and custom computation settings — getChartsData","text":"","code":"if (FALSE) {   initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)   data <- getChartsData(plotName = \"plotObservedData\", ids = c(1, 2, 3, 4))   data <- getChartsData(plotName = \"plotNCAParametersCorrelation\")      initializeLixoftConnectors(software = \"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)   xBinsSettings <- list(is.fixedNbBins = TRUE, nbBins = 10)   data <- getChartsData(plotName = \"plotVpc\",                         computeSettings = list(xBinsSettings = xBinsSettings))   data <- getChartsData(plotName = \"plotVpc\", computeSettings = list(level = 75))      splitGroup <- list(name = \"WEIGHT\", breaks = c(75))   filter <- list(name = \"WEIGHT\", interval = c(75, 100))   data <- getChartsData(plotName = \"plotVpc\", splitGroup = splitGroup)   data <- getChartsData(plotName = \"plotVpc\", filter = filter) }"},{"path":"/reference/getConditionalDistributionSamplingSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get conditional distribution sampling settings — getConditionalDistributionSamplingSettings","title":"[Monolix] Get conditional distribution sampling settings — getConditionalDistributionSamplingSettings","text":"Get conditional distribution sampling settings. Associated settings :","code":""},{"path":"/reference/getConditionalDistributionSamplingSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get conditional distribution sampling settings — getConditionalDistributionSamplingSettings","text":"","code":"getConditionalDistributionSamplingSettings(...)"},{"path":"/reference/getConditionalDistributionSamplingSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get conditional distribution sampling settings — getConditionalDistributionSamplingSettings","text":"... [optional] (string) Name settings whose value displayed. argument provided, settings returned.","code":""},{"path":"/reference/getConditionalDistributionSamplingSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get conditional distribution sampling settings — getConditionalDistributionSamplingSettings","text":"array associates setting name current value.","code":""},{"path":[]},{"path":"/reference/getConditionalDistributionSamplingSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Get conditional distribution sampling settings — getConditionalDistributionSamplingSettings","text":"","code":"if (FALSE) { getConditionalDistributionSamplingSettings()  # retrieve all the conditional distribution sampling settings getConditionalDistributionSamplingSettings(\"ratio\",\"nbMinIterations\")  # retrieve only the ratio and nbMinIterations settings values }"},{"path":"/reference/getConditionalModeEstimationSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get conditional mode estimation settings — getConditionalModeEstimationSettings","title":"[Monolix] Get conditional mode estimation settings — getConditionalModeEstimationSettings","text":"Get conditional mode estimation settings. Associated settings :","code":""},{"path":"/reference/getConditionalModeEstimationSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get conditional mode estimation settings — getConditionalModeEstimationSettings","text":"","code":"getConditionalModeEstimationSettings(...)"},{"path":"/reference/getConditionalModeEstimationSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get conditional mode estimation settings — getConditionalModeEstimationSettings","text":"... [optional] (string) Name settings whose value displayed. argument provided, settings returned.","code":""},{"path":"/reference/getConditionalModeEstimationSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get conditional mode estimation settings — getConditionalModeEstimationSettings","text":"array associates setting name current value.","code":""},{"path":[]},{"path":"/reference/getConditionalModeEstimationSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Get conditional mode estimation settings — getConditionalModeEstimationSettings","text":"","code":"if (FALSE) { getConditionalModeEstimationSettings()  # retrieve a list of all the conditional mode estimation settings getConditionalModeEstimationSettings(\"nbOptimizationIterationsMode\")  # retrieve only the nbOptimizationIterationsMode setting value }"},{"path":"/reference/getConsoleMode.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - Pkanalix - Simulx] Get console mode — getConsoleMode","title":"[Monolix - Pkanalix - Simulx] Get console mode — getConsoleMode","text":"Get console mode, ie current verbosity level (volume output running estimation tasks):","code":""},{"path":"/reference/getConsoleMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - Pkanalix - Simulx] Get console mode — getConsoleMode","text":"","code":"getConsoleMode()"},{"path":"/reference/getConsoleMode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - Pkanalix - Simulx] Get console mode — getConsoleMode","text":"string corresponding current console mode","code":""},{"path":[]},{"path":"/reference/getContinuousObservationModel.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get continuous observation models information — getContinuousObservationModel","title":"[Monolix] Get continuous observation models information — getContinuousObservationModel","text":"Get summary information concerning continuous observation models project. following informations provided. prediction: (vector<string>) name associated prediction formula: (vector<string>) formula applied observation distribution: (vector<string>) distribution observation Gaussian space. distribution type can \"normal\", \"logNormal\", \"logitNormal\". limits: (vector< pair<double,double> >) lower upper limits imposed observation.  Used distribution logitNormal. logitNormal distribution, field empty. errormodel: (vector<string>) type associated error model autocorrelation: (vector<bool>) defines auto correlation Call getObservationInformation get list continuous observations present current project.","code":""},{"path":"/reference/getContinuousObservationModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get continuous observation models information — getContinuousObservationModel","text":"","code":"getContinuousObservationModel()"},{"path":"/reference/getContinuousObservationModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get continuous observation models information — getContinuousObservationModel","text":"list associating continuous observation model properties.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getCorrelationOfEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get the inverse of the Fisher Matrix — getCorrelationOfEstimates","title":"[Monolix] Get the inverse of the Fisher Matrix — getCorrelationOfEstimates","text":"Get inverse last estimated Fisher matrix computed either Fisher methods used last scenario run specific one passed argument. WARNING: Fisher matrix accessible Fisher algorithm launched . user can choose display Fisher matrix estimated specific method. Existing Fisher methods : WARNING: methods used last scenario run can provide results.","code":""},{"path":"/reference/getCorrelationOfEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get the inverse of the Fisher Matrix — getCorrelationOfEstimates","text":"","code":"getCorrelationOfEstimates(method = \"\")"},{"path":"/reference/getCorrelationOfEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get the inverse of the Fisher Matrix — getCorrelationOfEstimates","text":"method [optional](string) Fisher method whose results displayed. field specified, results provided methods used last scenario run displayed.","code":""},{"path":"/reference/getCorrelationOfEstimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get the inverse of the Fisher Matrix — getCorrelationOfEstimates","text":"list whose field contains Fisher matrix computed one available Fisher methods used ast scenario run. matrix defined structure containing following fields :","code":""},{"path":[]},{"path":"/reference/getCovariateElements.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get covariate elements — getCovariateElements","title":"[Simulx] Get covariate elements — getCovariateElements","text":"Get list available covariate elements loaded project. use one elements simulation, please add simulation group setGroupElement.","code":""},{"path":"/reference/getCovariateElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get covariate elements — getCovariateElements","text":"","code":"getCovariateElements()"},{"path":"/reference/getCovariateElements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get covariate elements — getCovariateElements","text":"Covariate elements can defined defineCovariateElement, created importing  Monolix project importProject. Elements defined created background saved Simulx project calling saveProject. can deleted deleteElement. element list Note : - project created model file, covariate element Covariates created values equal 1. - project created importing Monolix project, covariate element mlx_Cov created values corresponding covariates values dataset Monolix project. covariate element mlx_CovDist created values corresponding estimation distribution covariates dataset Monolix project. \"distribution\" type covariate elements can created GUI. \"manual\" type corresponds elements created manually GUI, data frame connectors. external type corresponds elements created external file GUI connectors.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getCovariateInformation.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Get covariates information — getCovariateInformation","title":"[Monolix - PKanalix] Get covariates information — getCovariateInformation","text":"Get name, type values covariates present project.","code":""},{"path":"/reference/getCovariateInformation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Get covariates information — getCovariateInformation","text":"","code":"getCovariateInformation()"},{"path":"/reference/getCovariateInformation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix] Get covariates information — getCovariateInformation","text":"list containing following fields : name (vector<string>): covariate names type (vector<string>): covariate types. Existing types \"continuous\", \"continuoustransformed\", \"categorical\", \"categoricaltransformed\"./  Monolix mode, \"latent\" covariates also allowed. [Monolix] modalityNumber (vector<int>): number modalities (latent covariates ) covariate: data frame giving values continuous categorical covariates subject. Latent covariate values exist estimated, ie covariate used population parameters estimated. Call getEstimatedIndividualParameters retrieve .","code":""},{"path":[]},{"path":"/reference/getData.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Get project data — getData","title":"[Monolix - PKanalix] Get project data — getData","text":"Get description data used current project. Available informations : dataFile (string): path data file header (array<character>): vector header names headerTypes (array<character>): vector header types observationNames (vector<string>): vector observation names observationTypes (vector<string>): vector observation types nbSSDoses (int): number doses (SS column)","code":""},{"path":"/reference/getData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Get project data — getData","text":"","code":"getData()"},{"path":"/reference/getData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix] Get project data — getData","text":"list describing project data.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getDataSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get the data settings associated to the non compartmental analysis — getDataSettings","title":"[PKanalix] Get the data settings associated to the non compartmental analysis — getDataSettings","text":"Get data settings associated non compartmental analysis. Associated settings :","code":""},{"path":"/reference/getDataSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get the data settings associated to the non compartmental analysis — getDataSettings","text":"","code":"getDataSettings(...)"},{"path":"/reference/getDataSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Get the data settings associated to the non compartmental analysis — getDataSettings","text":"... [optional] (string) Name settings whose value displayed. argument provided, settings returned.","code":""},{"path":"/reference/getDataSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Get the data settings associated to the non compartmental analysis — getDataSettings","text":"array associates setting name current value.","code":""},{"path":[]},{"path":"/reference/getDataSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Get the data settings associated to the non compartmental analysis — getDataSettings","text":"","code":"if (FALSE) { getDataSettings() # retrieve a list of all the NCA methodology settings getDataSettings(\"urinevolume\") # retrieve a list containing only the value of the settings whose name has been passed in argument }"},{"path":"/reference/getDemoPath.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Lixoft demos path — getDemoPath","title":"Get Lixoft demos path — getDemoPath","text":"Get Lixoft demos path","code":""},{"path":"/reference/getDemoPath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Lixoft demos path — getDemoPath","text":"","code":"getDemoPath()"},{"path":"/reference/getDemoPath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Lixoft demos path — getDemoPath","text":"string corresponding Lixoft demos path corresponding currently active software.","code":""},{"path":"/reference/getDemoPath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Lixoft demos path — getDemoPath","text":"","code":"if (FALSE) {   getDemoPath() }"},{"path":"/reference/getEndpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get endpoint elements — getEndpoints","title":"[Simulx] Get endpoint elements — getEndpoints","text":"Get list endpoints.","code":""},{"path":"/reference/getEndpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get endpoint elements — getEndpoints","text":"","code":"getEndpoints()"},{"path":"/reference/getEndpoints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get endpoint elements — getEndpoints","text":"Endpoints summarize outcome values individuals, simulation group replicate. Endpoints defined calculated Simulx GUI. compute defined endpoints, use runEndpoints get results getEndpointsResults. check endpoints compared across simulation groups, use getGroupComparisonSettings. group comparison relevant, way comparison done endpoint (eg statistical test p-value) defined endpoint element. element list outcome (string list) - Outcome endpoint based . one outcome, string containing name. combined outcomes used, list : names (vector strings) - Vector outcome names groupName (string) - Name outcome combination operator (string) - Way output combined. One \"\"/\"\" (case boolean outcomes) \"min\"/\"max\" (cases) metric (string) - Calculation method endpoint. One \"arithmeticMean\", \"geometricMean\" \"median\" value-based outcome. case event-based outcomes, \"kaplanMeier\" (median survival) case boolean outcomes, \"percentTrue\". groupComparison (list) - Group comparison settings containing: type (string) - One \"directComparison\", \"statisticalTest\" operator (string) - One \"!=\", \">\" \"<\", threshold (double) - real number indicating threshold difference/oddsRatio pvalue (double) - real number indicating p-value (type \"statisticalTest\")","code":""},{"path":[]},{"path":[]},{"path":"/reference/getEndpointsResults.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get endpoints results — getEndpointsResults","title":"[Simulx] Get endpoints results — getEndpointsResults","text":"Get results outcomes & endpoints task. Outcomes, endpoints group comparisons calculated Simulx GUI task runEndpoints.output list outcomes, endpoints comparison results computed.","code":""},{"path":"/reference/getEndpointsResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get endpoints results — getEndpointsResults","text":"","code":"getEndpointsResults()"},{"path":[]},{"path":[]},{"path":"/reference/getEstimatedIndividualParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get last estimated individual parameter values — getEstimatedIndividualParameters","title":"[Monolix] Get last estimated individual parameter values — getEstimatedIndividualParameters","text":"Get last estimated values subject individual parameters present within current project. WARNING: Estimated individual parameters values accessible individual estimation algorithm launched . NOTE: user can choose display individual parameter values estimated specific method. Existing individual estimation methods : WARNING: methods used last scenario run can provide estimation results.","code":""},{"path":"/reference/getEstimatedIndividualParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get last estimated individual parameter values — getEstimatedIndividualParameters","text":"","code":"getEstimatedIndividualParameters(..., method = \"\")"},{"path":"/reference/getEstimatedIndividualParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get last estimated individual parameter values — getEstimatedIndividualParameters","text":"... (string) Name individual parameters whose values must displayed. Call getIndividualParameterModel get list individual parameters present within current project. method [optional](string) Individual parameter estimation method whose results displayed. latent covariate used model, estimated modality displayed field specified, results provided methods used last scenario run displayed.","code":""},{"path":"/reference/getEstimatedIndividualParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get last estimated individual parameter values — getEstimatedIndividualParameters","text":"data frame giving, wanted method, last estimated values individual parameters interest subject corresponding standard deviation values.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getEstimatedLogLikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get Log-Likelihood values — getEstimatedLogLikelihood","title":"[Monolix] Get Log-Likelihood values — getEstimatedLogLikelihood","text":"Get values computed using log-likelihood algorithm last scenario run, without method-based filter. WARNING: log-likelihood values accessible log-likelihood algorithm launched . user can choose display log-likelihood values computed specific method. Existing log-likelihood methods : WARNING: methods used last scenario run can provide results.","code":""},{"path":"/reference/getEstimatedLogLikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get Log-Likelihood values — getEstimatedLogLikelihood","text":"","code":"getEstimatedLogLikelihood(method = \"\")"},{"path":"/reference/getEstimatedLogLikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get Log-Likelihood values — getEstimatedLogLikelihood","text":"method [optional](string) Log-likelihood method whose results displayed. field specified, results provided methods used last scenario run retrieved.","code":""},{"path":"/reference/getEstimatedLogLikelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get Log-Likelihood values — getEstimatedLogLikelihood","text":"list associating name method passed argument corresponding log-likelihood values computed last scenario run.","code":""},{"path":[]},{"path":"/reference/getEstimatedPopulationParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get last estimated population parameter value — getEstimatedPopulationParameters","title":"[Monolix] Get last estimated population parameter value — getEstimatedPopulationParameters","text":"Get last estimated value population parameters present within current project (fixed effects + individual variances + correlations + latent probabilities + error model parameters). WARNING: Estimated population parameters values accessible SAEM algorithm launched .","code":""},{"path":"/reference/getEstimatedPopulationParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get last estimated population parameter value — getEstimatedPopulationParameters","text":"","code":"getEstimatedPopulationParameters(..., coefficientsOfVariation = FALSE)"},{"path":"/reference/getEstimatedPopulationParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get last estimated population parameter value — getEstimatedPopulationParameters","text":"... [optional] (array<string>) Names population parameters whose value must displayed. Call getPopulationParameterInformation get list population parameters present within current project. field specified, function retrieve values available population parameters. coefficientsOfVariation [optional](boolean) option TRUE, standard deviations random effects also given coefficients variation (relative standard deviations percentages) _CV suffix.","code":""},{"path":"/reference/getEstimatedPopulationParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get last estimated population parameter value — getEstimatedPopulationParameters","text":"named vector containing last estimated value one population parameters passed argument.","code":""},{"path":[]},{"path":"/reference/getEstimatedRandomEffects.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get estimated the random effects — getEstimatedRandomEffects","title":"[Monolix] Get estimated the random effects — getEstimatedRandomEffects","text":"Get random effects subject individual parameters present within current project. WARNING: Estimated random effects accessible individual estimation algorithm launched . user can choose display random effects estimated specific method. NOTE: random effects defined gaussian referential, e.g. ka lognormally distributed around ka_pop, eta_i = log(ka_i)-log(ka_pop) Existing individual estimation methods : WARNING: methods used last scenario run can provide estimation results. Please call getLaunchedTasks get list methods whose results available.","code":""},{"path":"/reference/getEstimatedRandomEffects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get estimated the random effects — getEstimatedRandomEffects","text":"","code":"getEstimatedRandomEffects(..., method = \"\")"},{"path":"/reference/getEstimatedRandomEffects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get estimated the random effects — getEstimatedRandomEffects","text":"... (string) Name individual parameters whose random effects must displayed. Call getIndividualParameterModel get list individual parameters present within current project. method [optional](string) Individual parameter estimation method whose results displayed. field specified, results provided methods used last scenario run displayed.","code":""},{"path":"/reference/getEstimatedRandomEffects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get estimated the random effects — getEstimatedRandomEffects","text":"data frame giving, wanted method, last estimated eta values individual parameters interest subject corresponding standard deviation values.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getEstimatedStandardErrors.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get standard errors of population parameters — getEstimatedStandardErrors","title":"[Monolix] Get standard errors of population parameters — getEstimatedStandardErrors","text":"Get last estimated standard errors population parameters computed either Fisher methods used last scenario run specific one passed argument. WARNING: standard errors accessible Fisher algorithm launched . Existing Fisher methods : WARNING: methods used last scenario run can provide results.","code":""},{"path":"/reference/getEstimatedStandardErrors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get standard errors of population parameters — getEstimatedStandardErrors","text":"","code":"getEstimatedStandardErrors(method = \"\")"},{"path":"/reference/getEstimatedStandardErrors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get standard errors of population parameters — getEstimatedStandardErrors","text":"method [optional](string) Fisher method whose results displayed. field specified, results provided methods used last scenario run retrieved","code":""},{"path":"/reference/getEstimatedStandardErrors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get standard errors of population parameters — getEstimatedStandardErrors","text":"list associating retrieved Fisher algorithm method data frame containing standard errors relative standard errors (","code":""},{"path":[]},{"path":"/reference/getFixedEffectsByAutoInit.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Automatically estimate initial parameters value — getFixedEffectsByAutoInit","title":"[Monolix] Automatically estimate initial parameters value — getFixedEffectsByAutoInit","text":"Compute optimized values initial population parameters. values returned format getPopulationParameterInformation.","code":""},{"path":"/reference/getFixedEffectsByAutoInit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Automatically estimate initial parameters value — getFixedEffectsByAutoInit","text":"","code":"getFixedEffectsByAutoInit(parameters = NULL)"},{"path":"/reference/getFixedEffectsByAutoInit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Automatically estimate initial parameters value — getFixedEffectsByAutoInit","text":"","code":"if (FALSE) { getFixedEffectsByAutoInit() -> optimizedParameters setPopulationParameterInformation(optimizedParameters) }"},{"path":"/reference/getFormatting.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Get data formatting from a loaded project — getFormatting","title":"[Monolix - PKanalix] Get data formatting from a loaded project — getFormatting","text":"[Monolix - PKanalix] Get data formatting loaded project","code":""},{"path":"/reference/getFormatting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Get data formatting from a loaded project — getFormatting","text":"","code":"getFormatting()"},{"path":"/reference/getGeneralSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get project general settings — getGeneralSettings","title":"[Monolix] Get project general settings — getGeneralSettings","text":"Get summary common settings Monolix algorithms. Associated settings :","code":""},{"path":"/reference/getGeneralSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get project general settings — getGeneralSettings","text":"","code":"getGeneralSettings(...)"},{"path":"/reference/getGeneralSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get project general settings — getGeneralSettings","text":"... [optional] (string) Name settings whose value displayed. argument provided, settings returned.","code":""},{"path":"/reference/getGeneralSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get project general settings — getGeneralSettings","text":"array associates setting name current value.","code":""},{"path":[]},{"path":"/reference/getGeneralSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Get project general settings — getGeneralSettings","text":"","code":"if (FALSE) { getGeneralSettings() # retrieve a list of all the general settings  getGeneralSettings(\"nbChains\",\"autoChains\") # retrieve only the nbChains and autoChains settings values. }"},{"path":"/reference/getGroupComparisonSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get group comparison settings — getGroupComparisonSettings","title":"[Simulx] Get group comparison settings — getGroupComparisonSettings","text":"Set settings related comparison endpoints across groups.","code":""},{"path":"/reference/getGroupComparisonSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get group comparison settings — getGroupComparisonSettings","text":"","code":"getGroupComparisonSettings()"},{"path":"/reference/getGroupComparisonSettings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get group comparison settings — getGroupComparisonSettings","text":"Endpoints summarize outcome values individuals, simulation group replicate. Endpoints defined defineEndpoint can compared across groups Simulx GUI. getGroupComparisonSettings enables check endpoints compared across simulation groups group used reference. Group comparison performed Endpoints task.","code":""},{"path":[]},{"path":"/reference/getGroupComparisonSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Get group comparison settings — getGroupComparisonSettings","text":"","code":"initializeLixoftConnectors(\"simulx\") project_name <- file.path(getDemoPath(), \"6.outcome_endpoints\", \"6.2.group_comparison\", \"groupComp_PDTTE_medianSurvival.smlx\") loadProject(project_name) getGroupComparisonSettings()"},{"path":"/reference/getGroupRemaining.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get remaining parameters for a simulation group — getGroupRemaining","title":"[Simulx] Get remaining parameters for a simulation group — getGroupRemaining","text":"Get values remaining parameters (typically error model parameters) group.","code":""},{"path":"/reference/getGroupRemaining.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get remaining parameters for a simulation group — getGroupRemaining","text":"","code":"getGroupRemaining(group)"},{"path":"/reference/getGroupRemaining.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Get remaining parameters for a simulation group — getGroupRemaining","text":"group (character) Group name","code":""},{"path":"/reference/getGroupRemaining.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get remaining parameters for a simulation group — getGroupRemaining","text":"Remaining parameters parameters appear structural model (input line [LONGITUDINAL]) neither individual parameters regressors. typically error model parameters. individual parameters element selected simulation, model includes remaining parameters, possible set values setGroupRemaining. typically enables make simulation measurement noise, individual element.  error model parameters impact simulation noisy observation (DEFINITION section [LONGITUDINAL] block) set output element (instead smooth prediction OUTPUT variable EQUATION). population parameters element selected, possible set remaining parameters parameters already part population element.","code":""},{"path":[]},{"path":"/reference/getGroupRemaining.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Get remaining parameters for a simulation group — getGroupRemaining","text":"","code":"# get default values of error model parameters when importing a Monolix project   initializeLixoftConnectors(\"monolix\")   monolix_project <- file.path(getDemoPath(), \"1.creating_and_using_models\", \"1.1.libraries_of_models\", \"warfarinPK_project.mlxtran\")   initializeLixoftConnectors(\"simulx\")   importProject(monolix_project)   setGroupElement(group = \"simulationGroup1\", elements = \"mlx_EBEs\")   getGroupRemaining(group = \"simulationGroup1\")"},{"path":"/reference/getGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get simulation groups — getGroups","title":"[Simulx] Get simulation groups — getGroups","text":"Get list simulation groups elements group.","code":""},{"path":"/reference/getGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get simulation groups — getGroups","text":"","code":"getGroups()"},{"path":"/reference/getGroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get simulation groups — getGroups","text":"Simulation groups used simulation Simulx GUI.  creation Simulx project, first group created default name \"simulationGroup1\".  Use getGroups check groups already defined, elements set group.  add simulation group, use addGroup.  remove simulation group, use removeGroup. add change group element, use setGroupElement.  define new elements, use one define...Element functions.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getIndividualElements.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get individual parameters elements — getIndividualElements","title":"[Simulx] Get individual parameters elements — getIndividualElements","text":"Get list available individual parameters elements simulation. use one elements simulation, please add simulation group setGroupElement.","code":""},{"path":"/reference/getIndividualElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get individual parameters elements — getIndividualElements","text":"","code":"getIndividualElements()"},{"path":"/reference/getIndividualElements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get individual parameters elements — getIndividualElements","text":"Individual parameters elements can defined defineIndividualElement, created importing  Monolix PKanalix project. Elements defined created background saved Simulx project calling saveProject. can deleted deleteElement. element list Simulx project created model file, individual element IndivParameters created values equal 1. Simulx project created importing exporting Monolix project, following individual elements created: mlx_IndivInit created vector initial population parameters population parameters estimated. mlx_PopIndiv created vector estimated population parameters (without covariate(s) impact(s)) population parameters estimated. mlx_PopIndivCov created table estimated population parameters covariate impact population parameters estimated. mlx_EBEs created table estimated EBEs EBEs estimated. mlx_CondMean created table estimated conditional mean individual conditional distribution task run. mlx_CondDistSample created table including first sample conditional distribution individual conditional distribution task run.  Simulx project created importing exporting PKanalix project, following individual elements created: individual element pkx_IndivInit created vector initial parameters CA task run. individual element pkx_Indiv created table individual parameters estimated PKanalix CA task run method \"individual fit\". individual element pkx_IndivPooled created vector parameters estimated PKanalix CA task run method \"pooled fit\". individual element pkx_IndivGeoMean created  vector individual parameters corresponding geometric mean individual parameters estimated PKanalix CA task run method \"individual fit\".","code":""},{"path":[]},{"path":[]},{"path":"/reference/getIndividualParameterModel.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get individual parameter model — getIndividualParameterModel","title":"[Monolix] Get individual parameter model — getIndividualParameterModel","text":"Get summary information concerning individual parameter model. available informations : name: (string) name individual parameter distribution: (string) distribution parameter values. distribution type can \"normal\", \"logNormal\", \"logitNormal\". formula: (string) formula applied individual parameters distribution variability: list giving, variability level, individual parameters variability covariateModel: list giving, individual parameter, related covariates used . covariate used, field empty. correlationBlocks : list giving, variability level, blocks correlation matrix random effects.  block represented vector individual parameter names. block, field empty.","code":""},{"path":"/reference/getIndividualParameterModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get individual parameter model — getIndividualParameterModel","text":"","code":"getIndividualParameterModel()"},{"path":"/reference/getIndividualParameterModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get individual parameter model — getIndividualParameterModel","text":"list individual parameter model properties.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getInterpretedData.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Get interpreted project data — getInterpretedData","title":"[Monolix - PKanalix] Get interpreted project data — getInterpretedData","text":"Get data interpretation done software, displayed Data tab interface. Interpretation data includes, limited , data formatting, addition doses ADDL column steady state settings, addition additional covariates, interpolation regressors.","code":""},{"path":"/reference/getInterpretedData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Get interpreted project data — getInterpretedData","text":"","code":"getInterpretedData()"},{"path":"/reference/getLastRunStatus.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Get last run status — getLastRunStatus","title":"[Monolix - PKanalix] Get last run status — getLastRunStatus","text":"Return execution report last run summary error occurred.","code":""},{"path":"/reference/getLastRunStatus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Get last run status — getLastRunStatus","text":"","code":"getLastRunStatus()"},{"path":"/reference/getLastRunStatus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix] Get last run status — getLastRunStatus","text":"structure containing boolean equals TRUE last run successfully completed, summary errors occurred.","code":""},{"path":[]},{"path":"/reference/getLaunchedTasks.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get tasks with results — getLaunchedTasks","title":"[Monolix] Get tasks with results — getLaunchedTasks","text":"Get list tasks results provide. task association : algorithm (string) vector methods (string) relative algorithm standardErrorEstimation loglikelihoodEstimation, TRUE FALSE one.","code":""},{"path":"/reference/getLaunchedTasks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get tasks with results — getLaunchedTasks","text":"","code":"getLaunchedTasks()"},{"path":"/reference/getLaunchedTasks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get tasks with results — getLaunchedTasks","text":"list tasks results, indexed algorithm names.","code":""},{"path":[]},{"path":"/reference/getLibraryModelContent.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Get a library model's content — getLibraryModelContent","title":"[Monolix - PKanalix - Simulx] Get a library model's content — getLibraryModelContent","text":"[Monolix - PKanalix - Simulx] Get library model's content","code":""},{"path":"/reference/getLibraryModelContent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Get a library model's content — getLibraryModelContent","text":"","code":"getLibraryModelContent(filename, print = TRUE)"},{"path":"/reference/getLibraryModelContent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Get a library model's content — getLibraryModelContent","text":"filename (string) filename requested model. Can start \"lib:\", end \".txt\", neither mandatory. print (logical) TRUE (default), model's content printed human-readable line breaks (alongside regular output \"\\n\").","code":""},{"path":"/reference/getLibraryModelContent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix - Simulx] Get a library model's content — getLibraryModelContent","text":"model's content raw string.","code":""},{"path":"/reference/getLibraryModelContent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix - Simulx] Get a library model's content — getLibraryModelContent","text":"","code":"if (FALSE) { getLibraryModelContent(\"oral1_1cpt_kaVCl\") model <- getLibraryModelContent(filename = \"lib:oral1_1cpt_kaVCl.txt\", print = FALSE) }"},{"path":"/reference/getLibraryModelName.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Get the name of a library model given a list of library filters. — getLibraryModelName","title":"[Monolix - PKanalix - Simulx] Get the name of a library model given a list of library filters. — getLibraryModelName","text":"Models can loaded library based selection filters PKanalix, Monolix Simulx GUI. complete description model library, guidelines select models, please visit https://mlxtran.lixoft.com/model-libraries/.","code":""},{"path":"/reference/getLibraryModelName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Get the name of a library model given a list of library filters. — getLibraryModelName","text":"","code":"getLibraryModelName(library, filters = list())"},{"path":"/reference/getLibraryModelName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Get the name of a library model given a list of library filters. — getLibraryModelName","text":"library (string) One MonolixSuite library models. Possible values \"pk\", \"pd\", \"pkpd\", \"pkdoubleabs\", \"pm\", \"tmdd\", \"tte\", \"count\" \"tgi\". filters (list(name = string)) Named list filters (optional), format: list(filterKey = \"filterValue\", ...). Default empty list. Since available filters particular order, filterKey always stated.","code":""},{"path":"/reference/getLibraryModelName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix - Simulx] Get the name of a library model given a list of library filters. — getLibraryModelName","text":"Name filtered model, vector names available models filters selected. Names start \"lib:\".","code":""},{"path":"/reference/getLibraryModelName.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix - Simulx] Get the name of a library model given a list of library filters. — getLibraryModelName","text":"getLibraryModelName enables get name model loaded. can use setStructuralModel newProject load model existing new project. possible keys values libraries listed .","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/reference/getLibraryModelName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix - Simulx] Get the name of a library model given a list of library filters. — getLibraryModelName","text":"","code":"if (FALSE) { getLibraryModelName(library = \"pk\", filters = list(administration = \"oral\", delay = \"lagTime\", absorption = \"firstOrder\", distribution = \"1compartment\", elimination = \"linear\", parametrization = \"clearance\")) # returns \"lib:oral1_1cpt_TlagkaVCl.txt\" getLibraryModelName(\"pd\", list(response = \"turnover\", drugAction = \"productionStimulation\")) # returns c(\"lib:turn_input_Emax.txt\", \"lib:turn_input_gammaEmax.txt\") }"},{"path":"/reference/getLixoftConnectorsState.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lixoftConnectors API current state — getLixoftConnectorsState","title":"Get lixoftConnectors API current state — getLixoftConnectorsState","text":"Retrieve information Lixoft software lixoftConnectors currently interfacing .","code":""},{"path":"/reference/getLixoftConnectorsState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lixoftConnectors API current state — getLixoftConnectorsState","text":"","code":"getLixoftConnectorsState(quietly = FALSE)"},{"path":"/reference/getLixoftConnectorsState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lixoftConnectors API current state — getLixoftConnectorsState","text":"quietly boolean TRUE, warning raised lixoftConnectors package initialized. Equals FALSE default.","code":""},{"path":"/reference/getLixoftConnectorsState.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lixoftConnectors API current state — getLixoftConnectorsState","text":"structure containing: path: path Lixoft installation directory software: software name version: Lixoft softwares suite version","code":""},{"path":"/reference/getLixoftEnvInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about LixoftEnvironment object — getLixoftEnvInfo","title":"Get information about LixoftEnvironment object — getLixoftEnvInfo","text":"Get information LixoftEnvironment object","code":""},{"path":"/reference/getLixoftEnvInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about LixoftEnvironment object — getLixoftEnvInfo","text":"","code":"getLixoftEnvInfo()"},{"path":"/reference/getLogLikelihoodEstimationSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get LogLikelihood algorithm settings — getLogLikelihoodEstimationSettings","title":"[Monolix] Get LogLikelihood algorithm settings — getLogLikelihoodEstimationSettings","text":"Get loglikelihood estimation settings. Associated settings :","code":""},{"path":"/reference/getLogLikelihoodEstimationSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get LogLikelihood algorithm settings — getLogLikelihoodEstimationSettings","text":"","code":"getLogLikelihoodEstimationSettings(...)"},{"path":"/reference/getLogLikelihoodEstimationSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get LogLikelihood algorithm settings — getLogLikelihoodEstimationSettings","text":"... [optional] (string) Name settings whose value displayed. argument provided, settings returned.","code":""},{"path":"/reference/getLogLikelihoodEstimationSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get LogLikelihood algorithm settings — getLogLikelihoodEstimationSettings","text":"array associates setting name current value.","code":""},{"path":[]},{"path":"/reference/getLogLikelihoodEstimationSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Get LogLikelihood algorithm settings — getLogLikelihoodEstimationSettings","text":"","code":"if (FALSE) { getLogLikelihoodEstimationSettings() # retrieve a list of all the loglikelihood estimation settings getLogLikelihoodEstimationSettings(\"nbFixedIterations\",\"samplingMethod\")  # retrieve only nbFixedIterations and samplingMethod settings values }"},{"path":"/reference/getMapping.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Get mapping — getMapping","title":"[Monolix - PKanalix] Get mapping — getMapping","text":"Get mapping data model.","code":""},{"path":"/reference/getMapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Get mapping — getMapping","text":"","code":"getMapping()"},{"path":"/reference/getMapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix] Get mapping — getMapping","text":"list mapping information: mapping (list<list>) list lists representing link data model. list contains: data (string) Data name prediction (string) Prediction name model [Monolix] (string) Model observation name (continuous observations ) type (string) Type linked data (\"continuous\" | \"discrete\" | \"event\") freeData (list<list>) list lists describing mapped data: data (string) Data name type (string) Data type freePredictions (list<list>) list lists describing mapped predictions: prediction (string) Prediction name type (string) Prediction type","code":""},{"path":[]},{"path":[]},{"path":"/reference/getMCMCSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get MCMC algorithm settings — getMCMCSettings","title":"[Monolix] Get MCMC algorithm settings — getMCMCSettings","text":"Get MCMC algorithm settings current project. Associated settings :","code":""},{"path":"/reference/getMCMCSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get MCMC algorithm settings — getMCMCSettings","text":"","code":"getMCMCSettings(...)"},{"path":"/reference/getMCMCSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get MCMC algorithm settings — getMCMCSettings","text":"... [optional] (string) Names settings whose value displayed. argument provided, settings returned.","code":""},{"path":"/reference/getMCMCSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get MCMC algorithm settings — getMCMCSettings","text":"array associates setting name current value.","code":""},{"path":[]},{"path":"/reference/getMCMCSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Get MCMC algorithm settings — getMCMCSettings","text":"","code":"if (FALSE) { getMCMCSettings() # retrieve a list of all the MCMC settings getMCMCSettings(\"strategy\") # retrieve only the strategy setting }"},{"path":"/reference/getModelBuildingResults.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get the results of the model building — getModelBuildingResults","title":"[Monolix] Get the results of the model building — getModelBuildingResults","text":"Get results (detailed models) model building.","code":""},{"path":"/reference/getModelBuildingResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get the results of the model building — getModelBuildingResults","text":"","code":"getModelBuildingResults()"},{"path":"/reference/getModelBuildingResults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get the results of the model building — getModelBuildingResults","text":"results model building detailed tried models returned LL: result -2*Log-Likelihood BICc: modified BIC. individualModels:  (data.frame) individual model individual parameter.  columns covariates elements data.frame notes covariate used current parameter. COSSAC send 2 additional fields: tested: (vector<string>) first element individual parameter second one covariate.  combination notes covariate tested respect previous model. bestModel (boolean) best model amongst tried models according chosen criterion. SAMBA send error model covariance model information exist errorModels: chosen type error model covarianceModels: chosen correlations individual parameters","code":""},{"path":[]},{"path":"/reference/getModelBuildingResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Get the results of the model building — getModelBuildingResults","text":"","code":"if (FALSE) { getModelBuildingResults() }"},{"path":"/reference/getModelBuildingSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get model building settings — getModelBuildingSettings","title":"[Monolix] Get model building settings — getModelBuildingSettings","text":"Get settings used run model building.","code":""},{"path":"/reference/getModelBuildingSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get model building settings — getModelBuildingSettings","text":"","code":"getModelBuildingSettings()"},{"path":"/reference/getModelBuildingSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get model building settings — getModelBuildingSettings","text":"list settings covariates: (list<string>) covariate names parameters: (list<string>) parameters names strategy: (string) strategy search best model ([cossac], samba, covsamba, scm) criterion: (string) crtierion search best model ([BIC], LRT) relationships: (data.frame<parameters, covariates, locked>) Use lock relationships parameters covariates. default, combinations possible. parameter forces use combinations. See example ka must SEX V must WEIGHT threshold$lrt: threshold used criterion LRT continue improve model (first element forward second one backward method) threshold$correlation: threshold used cossac choose combinations (parameter- covariate) must tried next candidate model (first element forward second one backward method) useLin: (boolean) computes linearization ([TRUE]) Importance Sampling (FALSE)","code":""},{"path":[]},{"path":[]},{"path":"/reference/getNbReplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get number of replicates — getNbReplicates","title":"[Simulx] Get number of replicates — getNbReplicates","text":"Get number replicates simulation.","code":""},{"path":"/reference/getNbReplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get number of replicates — getNbReplicates","text":"","code":"getNbReplicates()"},{"path":"/reference/getNbReplicates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get number of replicates — getNbReplicates","text":"number replicates number times Simulx simulate given study.  mixed group size defined setGroupSize. simulate one study, Simulx samples number individuals group, defined setGroupSize (say NidsPerGroup). simulate replicate studies, sample replicate NidsPerGroup individuals group (like changing seed). parameter element individual element population parameter defined vector, replicates always sample individuals using population parameters. case, useful check effect changing seed, get example uncertainty endpoint due limited sampling. parameter element population element defined table containing several lines, imported element mlx_PopUncertainSA mlx_TypicalUncertainSA, replicate use different population parameter simulate study. case, possible see effect changing population parameters prediction (addition uncertainty due limited sampling).","code":""},{"path":[]},{"path":"/reference/getNbReplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Get number of replicates — getNbReplicates","text":"","code":"initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"5.simulation\", \"replicates.smlx\")   loadProject(project_name)   getNbReplicates()"},{"path":"/reference/getNCAData.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get data used for NCA computation — getNCAData","title":"[PKanalix] Get data used for NCA computation — getNCAData","text":"Get data used compute lambda_Z NCA estimation","code":""},{"path":"/reference/getNCAData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get data used for NCA computation — getNCAData","text":"","code":"getNCAData()"},{"path":[]},{"path":"/reference/getNCAIndividualParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get NCA individual parameters — getNCAIndividualParameters","title":"[PKanalix] Get NCA individual parameters — getNCAIndividualParameters","text":"Get estimated values subject individual NCA parameters current project.","code":""},{"path":"/reference/getNCAIndividualParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get NCA individual parameters — getNCAIndividualParameters","text":"","code":"getNCAIndividualParameters(...)"},{"path":"/reference/getNCAIndividualParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Get NCA individual parameters — getNCAIndividualParameters","text":"... (string) Name individual parameters whose values must displayed. Possible parameters: parameters related calculation lambda_z: \"Rsq\", \"Rsq_adjusted\", \"Corr_XY\", \"No_points_lambda_z\", \"Lambda_z\", \"Lambda_z_lower\", \"Lambda_z_upper\", \"HL_Lambda_z\", \"Lambda_z_intercept\", \"Span\" parameters calculated case plasma data: \"Tlag\", \"T0\", \"Dose\", \"N_Samples\", \"C0\", \"Tmax\", \"Cmax\", \"Cmax_D\", \"Tlast\", \"Clast\", \"AUClast\", \"AUClast_D\", \"AUMClast\", \"MRTlast\", \"MRTlast\", \"AUCall\", \"AUCINF_obs\", \"AUCINF_D_obs\", \"AUC_PerCentExtrap_obs\", \"AUC_PerCentBack_Ext_obs\", \"AUMCINF_obs\", \"AUMC_PerCentExtrap_obs\", \"MRTINF_obs\", \"MRTINF_obs\", \"Vz_F_obs\", \"Cl_F_obs\", \"Vz_obs\", \"Cl_obs\", \"Vss_obs\", \"Clast_pred\", \"AUCINF_pred\", \"AUCINF_D_pred\", \"AUC_PerCentExtrap_pred\", \"AUC_PerCentBack_Ext_pred\", \"AUMCINF_pred\", \"AUMC_PerCentExtrap_pred\", \"MRTINF_pred\", \"MRTINF_pred\", \"Vz_F_pred\", \"Cl_F_pred\", \"Vz_pred\", \"Cl_pred\", \"Vss_pred\" parameters calculated case plasma data partial AUC calculation intervals provided partialAucTime: \"AUC_lower_upper\", \"AUC_lower_upper_D\", \"CAVG_lower_upper\" parameters calculated multiple dose data: \"Tau\", \"Ctau\", \"Ctrough\", \"AUC_TAU\", \"AUC_TAU_D\", \"AUC_TAU_PerCentExtrap\", \"AUMC_TAU\", \"Vz_F\", \"Vz\", \"CLss_F\", \"CLss\", \"Cavg\", \"FluctuationPerCent\", \"FluctuationPerCent_Tau\", \"Accumulation_Index\", \"Swing\", \"Swing_Tau\", \"Tmin\", \"Cmin\", \"Cmax\", \"MRTINF_obs\" parameters calculated case urine data: \"T0\", \"Dose\", \"N_Samples\", \"Tlag\", \"Tmax_Rate\", \"Max_Rate\", \"Mid_Pt_last\", \"Rate_last\", \"AURC_last\", \"AURC_last_D\", \"Vol_UR\", \"Amount_Recovered\", \"Percent_Recovered\", \"AURC_all\", \"AURC_INF_obs\", \"AURC_PerCentExtrap_obs\", \"AURC_INF_pred\", \"AURC_PerCentExtrap_pred\", \"AURC_lower_upper\", \"Rate_last_pred\" parameters calculated case urine data partial AUC calculation intervals provided partialAucTime: \"AURC_lower_upper\", \"AURC_lower_upper_D\"","code":""},{"path":"/reference/getNCAIndividualParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Get NCA individual parameters — getNCAIndividualParameters","text":"data frame giving estimated values individual parameters interest subject, list information relative parameters (units & CDISC names)","code":""},{"path":[]},{"path":"/reference/getNCAParameterStatistics.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get NCA parameter statistics — getNCAParameterStatistics","title":"[PKanalix] Get NCA parameter statistics — getNCAParameterStatistics","text":"Get statistics estimated values NCA parameters current project. Statistics computed different sets individuals resulting stratification settings passed argument , given, ones previously set.","code":""},{"path":"/reference/getNCAParameterStatistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get NCA parameter statistics — getNCAParameterStatistics","text":"","code":"getNCAParameterStatistics(parameters = c(), stratification = NULL)"},{"path":"/reference/getNCAParameterStatistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Get NCA parameter statistics — getNCAParameterStatistics","text":"parameters [optional](vector<string>) Name parameters whose values must displayed list information relative parameters (units & CDISC names). Possible parameters: parameters related calculation lambda_z: \"Rsq\", \"Rsq_adjusted\", \"Corr_XY\", \"No_points_lambda_z\", \"Lambda_z\", \"Lambda_z_lower\", \"Lambda_z_upper\", \"HL_Lambda_z\", \"Lambda_z_intercept\", \"Span\" parameters calculated case plasma data: \"Tlag\", \"T0\", \"Dose\", \"N_Samples\", \"C0\", \"Tmax\", \"Cmax\", \"Cmax_D\", \"Tlast\", \"Clast\", \"AUClast\", \"AUClast_D\", \"AUMClast\", \"MRTlast\", \"MRTlast\", \"AUCall\", \"AUCINF_obs\", \"AUCINF_D_obs\", \"AUC_PerCentExtrap_obs\", \"AUC_PerCentBack_Ext_obs\", \"AUMCINF_obs\", \"AUMC_PerCentExtrap_obs\", \"MRTINF_obs\", \"MRTINF_obs\", \"Vz_F_obs\", \"Cl_F_obs\", \"Vz_obs\", \"Cl_obs\", \"Vss_obs\", \"Clast_pred\", \"AUCINF_pred\", \"AUCINF_D_pred\", \"AUC_PerCentExtrap_pred\", \"AUC_PerCentBack_Ext_pred\", \"AUMCINF_pred\", \"AUMC_PerCentExtrap_pred\", \"MRTINF_pred\", \"MRTINF_pred\", \"Vz_F_pred\", \"Cl_F_pred\", \"Vz_pred\", \"Cl_pred\", \"Vss_pred\" parameters calculated case plasma data partial AUC calculation intervals provided partialAucTime: \"AUC_lower_upper\", \"AUC_lower_upper_D\", \"CAVG_lower_upper\" parameters calculated multiple dose data: \"Tau\", \"Ctau\", \"Ctrough\", \"AUC_TAU\", \"AUC_TAU_D\", \"AUC_TAU_PerCentExtrap\", \"AUMC_TAU\", \"Vz_F\", \"Vz\", \"CLss_F\", \"CLss\", \"Cavg\", \"FluctuationPerCent\", \"FluctuationPerCent_Tau\", \"Accumulation_Index\", \"Swing\", \"Swing_Tau\", \"Tmin\", \"Cmin\", \"Cmax\", \"MRTINF_obs\" parameters calculated case urine data: \"T0\", \"Dose\", \"N_Samples\", \"Tlag\", \"Tmax_Rate\", \"Max_Rate\", \"Mid_Pt_last\", \"Rate_last\", \"AURC_last\", \"AURC_last_D\", \"Vol_UR\", \"Amount_Recovered\", \"Percent_Recovered\", \"AURC_all\", \"AURC_INF_obs\", \"AURC_PerCentExtrap_obs\", \"AURC_INF_pred\", \"AURC_PerCentExtrap_pred\", \"AURC_lower_upper\", \"Rate_last_pred\" parameters calculated case urine data partial AUC calculation intervals provided partialAucTime: \"AURC_lower_upper\", \"AURC_lower_upper_D\" stratification [optional] Stratification apply results. default, project one applied. Stratification list containing: state Stratification state groups Stratification groups list See setNCAResultsStratification details argument structure.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getNCAResultsStratification.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get NCA results stratification — getNCAResultsStratification","title":"[PKanalix] Get NCA results stratification — getNCAResultsStratification","text":"Get stratification used compute NCA parameters stratistics table. Stratification defined : stratification covariate groups shared NCA CA results stratification state specific task results","code":""},{"path":"/reference/getNCAResultsStratification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get NCA results stratification — getNCAResultsStratification","text":"","code":"getNCAResultsStratification()"},{"path":"/reference/getNCAResultsStratification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Get NCA results stratification — getNCAResultsStratification","text":"list stratification groups ('groups') stratification state ('state').","code":""},{"path":"/reference/getNCAResultsStratification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[PKanalix] Get NCA results stratification — getNCAResultsStratification","text":"covariate, stratification groups can defined list : stratification state represented list :","code":""},{"path":[]},{"path":[]},{"path":"/reference/getNCASettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get the settings associated to the non compartmental analysis — getNCASettings","title":"[PKanalix] Get the settings associated to the non compartmental analysis — getNCASettings","text":"Get settings associated non compartmental analysis. Associated settings :","code":""},{"path":"/reference/getNCASettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get the settings associated to the non compartmental analysis — getNCASettings","text":"","code":"getNCASettings(...)"},{"path":"/reference/getNCASettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Get the settings associated to the non compartmental analysis — getNCASettings","text":"... [optional] (string) Name settings whose value displayed. argument provided, settings returned.","code":""},{"path":"/reference/getNCASettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Get the settings associated to the non compartmental analysis — getNCASettings","text":"array associates setting name current value.","code":""},{"path":[]},{"path":"/reference/getNCASettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Get the settings associated to the non compartmental analysis — getNCASettings","text":"","code":"if (FALSE) { getNCASettings() # retrieve a list of all the NCA methodology settings getNCASettings(\"lambdaRule\",\"integralMethod\") # retrieve a list containing only the value of the settings whose name has been passed in argument }"},{"path":"/reference/getObservationInformation.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Get observations information — getObservationInformation","title":"[Monolix - PKanalix] Get observations information — getObservationInformation","text":"Get name, type values observations present project.","code":""},{"path":"/reference/getObservationInformation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Get observations information — getObservationInformation","text":"","code":"getObservationInformation()"},{"path":"/reference/getObservationInformation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix] Get observations information — getObservationInformation","text":"list containing following fields : name (vector<string>): observation names. type (vector<string>): observation generic types. Existing types \"continuous\", \"discrete\", \"event\". [Monolix] detailedType (vector<string>): observation specialized types set structural model. Existing types \"continuous\", \"bsmm\", \"wsmm\", \"categorical\", \"count\", \"exactEvent\", \"intervalCensoredEvent\". [Monolix] mapping (vector<string>): mapping observation names (defined mlxtran project) name corresponding entry data set. [\"obsName\"] (data.frame): observation values observation id. PKanalix mode, observation type provided continuous observations allowed. Neither mapping dataset names always used.","code":""},{"path":[]},{"path":"/reference/getOccasionElements.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get occasion elements — getOccasionElements","title":"[Simulx] Get occasion elements — getOccasionElements","text":"Get content occasion element used simulation. element automatically used simulation need added simulation group.","code":""},{"path":"/reference/getOccasionElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get occasion elements — getOccasionElements","text":"","code":"getOccasionElements()"},{"path":"/reference/getOccasionElements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get occasion elements — getOccasionElements","text":"occasion element can defined defineOccasionElement, created import Monolix PKanalix project importProject. can deleted deleteOccasionElement. element list structure occasion elements impacts definition elements Simulx project. occasion element subject-specific, elements (parameters, covariates, treatments, outputs regressors) must either common subjects occasions, must defined subject-specific occasion-wise values external table (id occ columns), occasion structure.","code":""},{"path":[]},{"path":"/reference/getOccasionElements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Get occasion elements — getOccasionElements","text":"","code":"# Get occasion elements in projects in which they were defined differently   initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"3.definition\", \"3.7.occasions\", \"occasions_common.smlx\")   loadProject(project_name)   getOccasionElements()    project_name <- file.path(getDemoPath(), \"3.definition\", \"3.7.occasions\", \"occasions_common_washout.smlx\")   loadProject(project_name)   getOccasionElements()    project_name <- file.path(getDemoPath(), \"3.definition\", \"3.7.occasions\", \"occasions_external.smlx\")   loadProject(project_name)   getOccasionElements()    project_name <- file.path(getDemoPath(), \"3.definition\", \"3.7.occasions\", \"occasions_two_levels.smlx\")   loadProject(project_name)   getOccasionElements()"},{"path":"/reference/getOutcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get outcome elements — getOutcomes","title":"[Simulx] Get outcome elements — getOutcomes","text":"Get list available outcomes. function returns list containing following elements: , outcome based continuous categorical output: reference - one \"baseline\", \"min\", \"max\", \"minCurrentTime\", \"maxCurrentTime\" \"customValue\", type - \"ratio\" \"difference\", value - reference \"customValue\". operator - one \"avg\", \"min\", \"max\", \"first\", \"last\", \"durationBelow\", \"durationAbove\", \"durationBetween\" \"timePoint\", type operator \"min\" \"max\", one \"value\", \"timeContinuous\" \"timeEvent\", operator \"durationBelow\", \"durationAbove\" \"durationBetween\", one \"cumulativeTime\", \"percentTime\", \"nbObs\", \"firstOccurenceContinuous\" \"firstOccurenceEvent\", value - vector boundaries operator \"durationBelow\", \"durationAbove\" \"durationBetween\", time point operator \"timePoint\". operator - one \"==\", \"!=\", \">=\", \">\", \"<=\" \"<\", value - real number indicating threshold value. outcome based TTE output: type - one \"timeOfEvents\" (case repeated TTE), \"hasAnEvent\", \"hasNoEvent\" (case single TTE) \"numberOf\" (case repeated TTE), rank - rank event time outcome (type \"timeOfEvents\").","code":""},{"path":"/reference/getOutcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get outcome elements — getOutcomes","text":"","code":"getOutcomes()"},{"path":[]},{"path":[]},{"path":"/reference/getOutputElements.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get output elements — getOutputElements","title":"[Simulx] Get output elements — getOutputElements","text":"Get list available output elements simulation.","code":""},{"path":"/reference/getOutputElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get output elements — getOutputElements","text":"","code":"getOutputElements()"},{"path":"/reference/getOutputElements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get output elements — getOutputElements","text":"Output elements can defined defineOutputElement, created importing  Monolix PKanalix project. Elements defined created background saved Simulx project calling saveProject. can deleted deleteElement. element list Importantly, variables model file can used output. user constrained ones defined OUTPUT section model. project created model file, output element created output section OUTPUT model, regular grid 0 100 steps 1. project created importing Monolix project, example Cc prediction y measurement, output element mlx_y1 created external file times output id original dataset Monolix project. output element mlx_Cc created regular grid starting first time final time measured original dataset. project created importing PKanalix project, example Cc prediction,  #' output element pkx_Cc_OriginalTimes created external file times output id original dataset Monolix project. output element pkx_Cc_FineGrid created regular grid starting first time final time measured original dataset.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getPlotPreferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Preferences to customize plots — getPlotPreferences","title":"Define Preferences to customize plots — getPlotPreferences","text":"Define Preferences customize plots","code":""},{"path":"/reference/getPlotPreferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Preferences to customize plots — getPlotPreferences","text":"","code":"getPlotPreferences(plotName = NULL, update = NULL, ...)"},{"path":"/reference/getPlotPreferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Preferences to customize plots — getPlotPreferences","text":"plotName (string) Name plot function. plotName NULL, preferences returned update list containing plot elements updated. ... additional arguments - dataType plots","code":""},{"path":"/reference/getPlotPreferences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Preferences to customize plots — getPlotPreferences","text":"list theme specifiers","code":""},{"path":"/reference/getPlotPreferences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Preferences to customize plots — getPlotPreferences","text":"function creates theme customizes plot looks, .e. legend, colors fills, transparencies, linetypes sizes, etc. curve, list available customizations: color: color (lines points) fill: color (surfaces) opacity: color transparency radius: size points shape: shape points lineType: linetype lineWidth: line size legend: name legend (NULL, legend displayed element)","code":""},{"path":[]},{"path":"/reference/getPlotPreferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Preferences to customize plots — getPlotPreferences","text":"","code":"if (FALSE) {   preferences <- getPlotPreferences(update = list(     obs = list(color = \"red\", legend = \"Observations\"),     obsCens = list(color = rgb(70, 130, 180, maxColorValue = 255))   ))   # preferences that are used by default in the plots   preferences <- getPlotPreferences()      # preferences that are used by default in plotObservedData   preferences <- getPlotPreferences(plotName = \"plotObservedData\") }"},{"path":"/reference/getPointsIncludedForLambdaZ.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Get points included in lambda_Z computation — getPointsIncludedForLambdaZ","title":"[PKanalix] Get points included in lambda_Z computation — getPointsIncludedForLambdaZ","text":"Get points used compute lambda_Z NCA estimation","code":""},{"path":"/reference/getPointsIncludedForLambdaZ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Get points included in lambda_Z computation — getPointsIncludedForLambdaZ","text":"","code":"getPointsIncludedForLambdaZ()"},{"path":[]},{"path":"/reference/getPopulationElements.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get population parameters elements — getPopulationElements","title":"[Simulx] Get population parameters elements — getPopulationElements","text":"Get list available population parameters elements simulation. use one elements simulation, please add simulation group setGroupElement.","code":""},{"path":"/reference/getPopulationElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get population parameters elements — getPopulationElements","text":"","code":"getPopulationElements()"},{"path":"/reference/getPopulationElements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get population parameters elements — getPopulationElements","text":"Population parameters elements can defined definePopulationElement, created import Monolix project importProject. Elements defined created background saved Simulx project calling saveProject. can deleted deleteElement. element list Notice : - project created model file, population element PopParameters created values equal 1. - project created using importing Monolix project (importProject), population element mlx_Pop created population parameters estimated Monolix project. parameters estimated Monolix project, population element mlx_PopInit created instead mlx_Pop, initial values population parameters. population element mlx_PopUncertainSA (resp. mlx_PopUncertainLin) created enables sample population parameters using covariance matrix estimates computed Monolix Standard Error task (Estimation Fisher Information matrix) performed stochastic approximation (resp. linearization). sample several population parameter sets, element needs used replicates (usesetNbReplicates. population element mlx_Typical created population parameters estimated Monolix projects omega parameters set zero. useful simulate typical individual different covariate values reference model. population element mlx_TypicalUncertainSA (resp. mlx_TypicalUncertainLin) created mlx_PopUncertain omegas set zero remove inter-individual variability. useful propagate uncertainty population parameters prediction typical individual.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getPopulationParameterEstimationSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get population parameter estimation settings — getPopulationParameterEstimationSettings","title":"[Monolix] Get population parameter estimation settings — getPopulationParameterEstimationSettings","text":"Get population parameter estimation settings. Associated settings :","code":""},{"path":"/reference/getPopulationParameterEstimationSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get population parameter estimation settings — getPopulationParameterEstimationSettings","text":"","code":"getPopulationParameterEstimationSettings(...)"},{"path":"/reference/getPopulationParameterEstimationSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get population parameter estimation settings — getPopulationParameterEstimationSettings","text":"... [optional] (string) Name settings whose value displayed. argument provided, settings returned.","code":""},{"path":"/reference/getPopulationParameterEstimationSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get population parameter estimation settings — getPopulationParameterEstimationSettings","text":"array associates setting name current value.","code":""},{"path":[]},{"path":"/reference/getPopulationParameterEstimationSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Get population parameter estimation settings — getPopulationParameterEstimationSettings","text":"","code":"if (FALSE) { getPopulationParameterEstimationSettings()  # retrieve a list of all the population parameter estimation settings  getPopulationParameterEstimationSettings(\"nbBurningIterations\",\"smoothingInterval\") # retrieve only the nbBurningIterations and smoothingInterval settings values }"},{"path":"/reference/getPopulationParameterInformation.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get population parameters information — getPopulationParameterInformation","title":"[Monolix] Get population parameters information — getPopulationParameterInformation","text":"Get name, initial value, estimation method , relevant, MAP parameters value population parameters present project.  available fixed effects, random effects, error model parameters, latent covariates probabilities.","code":""},{"path":"/reference/getPopulationParameterInformation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get population parameters information — getPopulationParameterInformation","text":"","code":"getPopulationParameterInformation()"},{"path":"/reference/getPopulationParameterInformation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get population parameters information — getPopulationParameterInformation","text":"data frame giving, population parameter, corresponding : initialValue : (double) initial value method : (string) estimation method priorValue : (double) [MAP] typical value priorSD : (double) [MAP] standard deviation","code":""},{"path":[]},{"path":[]},{"path":"/reference/getPreferences.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Get project preferences — getPreferences","title":"[Monolix - PKanalix - Simulx] Get project preferences — getPreferences","text":"Get summary project preferences. Preferences :","code":""},{"path":"/reference/getPreferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Get project preferences — getPreferences","text":"","code":"getPreferences(...)"},{"path":"/reference/getPreferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Get project preferences — getPreferences","text":"... [optional] (string) Name preference whose value displayed. argument provided, preferences returned.","code":""},{"path":"/reference/getPreferences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix - Simulx] Get project preferences — getPreferences","text":"array associates preference name current value.","code":""},{"path":"/reference/getPreferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix - Simulx] Get project preferences — getPreferences","text":"","code":"if (FALSE) { getPreferences() # retrieve a list of all the general settings  getPreferences(\"imageFormat\",\"exportCharts\")  # retrieve only the imageFormat and exportCharts settings values }"},{"path":"/reference/getProjectSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Get project settings — getProjectSettings","title":"[Monolix - PKanalix - Simulx] Get project settings — getProjectSettings","text":"Get summary project settings. Associated settings Monolix projects : Associated settings PKanalix projects : Associated settings Simulx projects :","code":""},{"path":"/reference/getProjectSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Get project settings — getProjectSettings","text":"","code":"getProjectSettings(...)"},{"path":"/reference/getProjectSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Get project settings — getProjectSettings","text":"... [optional] (string) Name settings whose value displayed. argument provided, settings returned.","code":""},{"path":"/reference/getProjectSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix - Simulx] Get project settings — getProjectSettings","text":"array associates setting name current value.","code":""},{"path":[]},{"path":"/reference/getRegressorElements.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get regressor elements — getRegressorElements","title":"[Simulx] Get regressor elements — getRegressorElements","text":"Get list available regressor elements simulation. use one elements simulation, please add simulation group setGroupElement. simulate model times outside specified grid, last value carried forward interpolation used.","code":""},{"path":"/reference/getRegressorElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get regressor elements — getRegressorElements","text":"","code":"getRegressorElements()"},{"path":"/reference/getRegressorElements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get regressor elements — getRegressorElements","text":"Regressor elements can defined defineRegressorElement, created importing  Monolix PKanalix project importProject. Elements defined created background saved Simulx project calling saveProject. can deleted deleteElement. element list Note : project created model file regressors, regressor element Regressors created one time point 0 regressors equal 1. project created importing Monolix PKanalix project regressors, regressor element mlx_Reg created based external file ids, times regressor values names read dataset Monolix project.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getResultsStratificationGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Get results stratification groups — getResultsStratificationGroups","title":"[Monolix - PKanalix - Simulx] Get results stratification groups — getResultsStratificationGroups","text":"Get stratification covariate groups used compute statistics individual parameters. groups shared task results.","code":""},{"path":"/reference/getResultsStratificationGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Get results stratification groups — getResultsStratificationGroups","text":"","code":"getResultsStratificationGroups()"},{"path":"/reference/getResultsStratificationGroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix - Simulx] Get results stratification groups — getResultsStratificationGroups","text":"Stratification groups list.","code":""},{"path":"/reference/getResultsStratificationGroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix - Simulx] Get results stratification groups — getResultsStratificationGroups","text":"covariate, stratification groups can defined list :","code":""},{"path":[]},{"path":[]},{"path":"/reference/getSAEMiterations.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get SAEM algorithm iterations — getSAEMiterations","title":"[Monolix] Get SAEM algorithm iterations — getSAEMiterations","text":"Retrieve successive values population parameters present within current project (fixed effects + individual variances + correlations + latent probabilities + error model parameters) previous run SAEM algorithm. WARNING: Convergence history population parameters values accessible SAEM algorithm launched .","code":""},{"path":"/reference/getSAEMiterations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get SAEM algorithm iterations — getSAEMiterations","text":"","code":"getSAEMiterations(...)"},{"path":"/reference/getSAEMiterations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get SAEM algorithm iterations — getSAEMiterations","text":"... [optional] (array<string>) Names population parameters whose convergence history must displayed. Call getPopulationParameterInformation get list population parameters present within current project. field specified, function retrieve values available population parameters.","code":""},{"path":"/reference/getSAEMiterations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get SAEM algorithm iterations — getSAEMiterations","text":"list containing pair composed number exploratory smoothing iterations data frame associates wanted population parameter successive values SAEM algorithm iterations.","code":""},{"path":[]},{"path":"/reference/getSameIndividualsAmongGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get same individuals among groups — getSameIndividualsAmongGroups","title":"[Simulx] Get same individuals among groups — getSameIndividualsAmongGroups","text":"Get information individuals simulated among groups.","code":""},{"path":"/reference/getSameIndividualsAmongGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get same individuals among groups — getSameIndividualsAmongGroups","text":"","code":"getSameIndividualsAmongGroups()"},{"path":"/reference/getSameIndividualsAmongGroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get same individuals among groups — getSameIndividualsAmongGroups","text":"setSameIndividualsAmongGroups(value = TRUE) allows individual parameters groups. available following elements (required sampling) groups: size groups, parameters (population individual) covariates. main goal make comparison groups easier. particular, used compare different treatments individuals - subjects individual parameters. Selecting individuals among groups ensures differences groups due treatment .  obtain conclusion without option enabled, simulation performed large number individuals averaged individual differences. options Simulx scenario Simulx GUI. Check online doc Simulx get guidance use .","code":""},{"path":[]},{"path":"/reference/getSameIndividualsAmongGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Get same individuals among groups — getSameIndividualsAmongGroups","text":"","code":"initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"5.simulation\", \"simulationGroups_sameIdsInGroups.smlx\")   loadProject(project_name)   getSameIndividualsAmongGroups()"},{"path":"/reference/getSamplingMethod.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get sampling method — getSamplingMethod","title":"[Simulx] Get sampling method — getSamplingMethod","text":"Get sampling method used simulation. possibilities : keepOrder (default): individual values taken order appear table. withReplacement: individual values sampled table replacement. withoutReplacement:  individual values sampled table without replacement. option available tables contain least number individual values group size. sampling methods general apply tables simulation scenario.","code":""},{"path":"/reference/getSamplingMethod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get sampling method — getSamplingMethod","text":"","code":"getSamplingMethod()"},{"path":"/reference/getSamplingMethod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get sampling method — getSamplingMethod","text":"options Simulx scenario Simulx GUI. Check online doc Simulx get guidance use .","code":""},{"path":[]},{"path":"/reference/getSamplingMethod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Get sampling method — getSamplingMethod","text":"","code":"initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"5.simulation\", \"samplingOptions.smlx\")   loadProject(project_name)   getSamplingMethod()"},{"path":"/reference/getScenario.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Get current scenario — getScenario","title":"[Monolix - PKanalix - Simulx] Get current scenario — getScenario","text":"Get list tasks run next call runScenario. Monolix, get addition associated method (linearization true false), associated list plots.","code":""},{"path":"/reference/getScenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Get current scenario — getScenario","text":"","code":"getScenario()"},{"path":"/reference/getScenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix - Simulx] Get current scenario — getScenario","text":"list tasks corresponds current scenario, indexed task names.","code":""},{"path":"/reference/getScenario.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix - Simulx] Get current scenario — getScenario","text":"Monolix, getScenario returns given list tasks, linearization option list plots. Every task list associated boolean. NOTE: Within MONOLIX scenario, order according different algorithms run fixed: PKanalix, getScenario returns given list tasks. Every task list associated boolean. NOTE: Within PKanalix scenario, order according different algorithms run fixed: Simulx, setScenario returns given list tasks. Every task list associated boolean. NOTE: Within Simulx scenario, order according different algorithms run fixed: Note: every task can also run separately specific function, runSimulation Simulx, runEstimation Monolix. CA task PKanalix part scenario, must run runCAEstimation.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getSharedIds.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get element types sharing individuals — getSharedIds","title":"[Simulx] Get element types sharing individuals — getSharedIds","text":"Get element types share individuals simulation.","code":""},{"path":"/reference/getSharedIds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get element types sharing individuals — getSharedIds","text":"","code":"getSharedIds()"},{"path":"/reference/getSharedIds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get element types sharing individuals — getSharedIds","text":"several elements defined tables individual values set simulation groups, option \"shared ids\" allows create intersection ids present tables. , ids intersection sampled create data simulation. options Simulx scenario Simulx GUI. Check online doc Simulx get guidance use .","code":""},{"path":[]},{"path":"/reference/getSharedIds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Get element types sharing individuals — getSharedIds","text":"","code":"initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"5.simulation\", \"sharedIds.smlx\")   loadProject(project_name)   getSharedIds()"},{"path":"/reference/getSimulatedIndividualParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get simulated individual parameters — getSimulatedIndividualParameters","title":"[Monolix] Get simulated individual parameters — getSimulatedIndividualParameters","text":"Get simulated values replicate subject individual parameters present within current project. WARNING: Simulated individual parameters values accessible individual estimation conditional mean algorithm launched .","code":""},{"path":"/reference/getSimulatedIndividualParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get simulated individual parameters — getSimulatedIndividualParameters","text":"","code":"getSimulatedIndividualParameters(...)"},{"path":"/reference/getSimulatedIndividualParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get simulated individual parameters — getSimulatedIndividualParameters","text":"... (string) Name individual parameters whose values must displayed. Call getIndividualParameterModel get list individual parameters present within current project.","code":""},{"path":"/reference/getSimulatedIndividualParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get simulated individual parameters — getSimulatedIndividualParameters","text":"list giving last simulated values individual parameters interest replicate subject.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getSimulatedRandomEffects.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get simulated random effects — getSimulatedRandomEffects","title":"[Monolix] Get simulated random effects — getSimulatedRandomEffects","text":"Get simulated values replicate subject individual random effects present within current project. WARNING: Simulated individual random effects values accessible individual estimation algorithm conditional mean launched .","code":""},{"path":"/reference/getSimulatedRandomEffects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get simulated random effects — getSimulatedRandomEffects","text":"","code":"getSimulatedRandomEffects(...)"},{"path":"/reference/getSimulatedRandomEffects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get simulated random effects — getSimulatedRandomEffects","text":"... (string) Name individual parameters whose values must displayed. Call getIndividualParameterModel get list individual parameters present within current project.","code":""},{"path":"/reference/getSimulatedRandomEffects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get simulated random effects — getSimulatedRandomEffects","text":"list giving last simulated values individual random effects interest replicate subject.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getSimulationResults.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get simulation results — getSimulationResults","title":"[Simulx] Get simulation results — getSimulationResults","text":"Get results simulation. output list four elements: res, IndividualParameters, populationParameters doses. res corresponds list output(s) simulation. includes data frame output columns id, time, outputName, group (corresponding group name several groups). IndividualParameters corresponds list data frames, one simulation group, individual parameters sampled group. PopulationParameters corresponds list data frames, one simulation group, population parameters sampled group (can several sets case replicates). doses corresponds list data frames, one simulation group, dose amounts administered individual group.","code":""},{"path":"/reference/getSimulationResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get simulation results — getSimulationResults","text":"","code":"getSimulationResults(id = NULL, rep = NULL)"},{"path":"/reference/getSimulationResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Get simulation results — getSimulationResults","text":"id [optional](string) provided, results retrieved id. rep [optional](int) provided, results retrieved replicate.","code":""},{"path":[]},{"path":"/reference/getSimulationResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Get simulation results — getSimulationResults","text":"","code":"# retrieve complete results  initializeLixoftConnectors(\"simulx\")  project_file <- file.path(getDemoPath(), \"1.overview\", \"importFromMonolix_resimulateProject.smlx\")  loadProject(project_file)  runSimulation()  if (FALSE) {    getSimulationResults()    getSimulationResults()$IndividualParameters    getSimulationResults()$doses  }   # retrieve results of a specific individual and replicate  initializeLixoftConnectors(\"simulx\")  project_file <- file.path(getDemoPath(), \"1.overview\", \"importFromMonolix_clinicalTrial.smlx\")  loadProject(project_file)  runSimulation()  getSimulationResults(id = \"1\", rep = 10)"},{"path":"/reference/getStandardErrorEstimationSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get standard error estimation settings — getStandardErrorEstimationSettings","title":"[Monolix] Get standard error estimation settings — getStandardErrorEstimationSettings","text":"Get standard error estimation settings. Associated settings :","code":""},{"path":"/reference/getStandardErrorEstimationSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get standard error estimation settings — getStandardErrorEstimationSettings","text":"","code":"getStandardErrorEstimationSettings(...)"},{"path":"/reference/getStandardErrorEstimationSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Get standard error estimation settings — getStandardErrorEstimationSettings","text":"... [optional] (string) Name settings whose value displayed. argument provided, settings returned.","code":""},{"path":"/reference/getStandardErrorEstimationSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get standard error estimation settings — getStandardErrorEstimationSettings","text":"array associates setting name current value.","code":""},{"path":[]},{"path":"/reference/getStandardErrorEstimationSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Get standard error estimation settings — getStandardErrorEstimationSettings","text":"","code":"if (FALSE) { getStandardErrorEstimationSettings()  # retrieve a list of all the standard error estimation settings  getStandardErrorEstimationSettings(\"minIterations\",\"maxIterations\")  # retrieve only minIterations and maxIterations settings values }"},{"path":"/reference/getStructuralModel.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Get structural model file — getStructuralModel","title":"[Monolix - PKanalix - Simulx] Get structural model file — getStructuralModel","text":"Get model file structural model used current project.","code":""},{"path":"/reference/getStructuralModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Get structural model file — getStructuralModel","text":"","code":"getStructuralModel()"},{"path":"/reference/getStructuralModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix - Simulx] Get structural model file — getStructuralModel","text":"string corresponding path structural model file.","code":""},{"path":"/reference/getStructuralModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix - Simulx] Get structural model file — getStructuralModel","text":"Simulx, function return path structural model project imported Monolix, path full custom model otherwise.  Note custom model Simulx may include also statistical part. Simulx, associated function getStructuralModel() setting new model equivalent creating new project. Use newProject instead. model loaded libraries, returned character path,  name library model, \"lib:model_name.txt\". see content library model, use getLibraryModelContent.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getTests.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get statistical tests results — getTests","title":"[Monolix] Get statistical tests results — getTests","text":"Get results performed statistical tests. Existing tests: Wald, Individual parameters normality, individual parameters marginal distribution, random effects normality, random effects correlation, individual parameters vs covariates correlation, random effects vs covariates correlation, residual normality residual symmetry. WARNING: tests performed last scenario run can provide results.","code":""},{"path":"/reference/getTests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get statistical tests results — getTests","text":"","code":"getTests()"},{"path":"/reference/getTests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get statistical tests results — getTests","text":"list associating name test corresponding results values computed last scenario run.","code":""},{"path":[]},{"path":"/reference/getTreatmentElements.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Get treatment elements — getTreatmentElements","title":"[Simulx] Get treatment elements — getTreatmentElements","text":"Get list available treatments elements simulation. use one several elements simulation, please add simulation group setGroupElement.","code":""},{"path":"/reference/getTreatmentElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Get treatment elements — getTreatmentElements","text":"","code":"getTreatmentElements()"},{"path":"/reference/getTreatmentElements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Get treatment elements — getTreatmentElements","text":"Treatment elements can defined defineTreatmentElement, created importing  Monolix PKanalix project importProject. Elements defined created background saved Simulx project calling saveProject. can deleted deleteElement. element list project created model file, treatment element added. project created importing Monolix PKanalix project, administration type present original project (dataset column tagged administration id), individual element mlx_adm created external file dosing times amounts original dataset Monolix PKanalix project.","code":""},{"path":[]},{"path":[]},{"path":"/reference/getTreatmentsInformation.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Get treatments information — getTreatmentsInformation","title":"[Monolix - PKanalix] Get treatments information — getTreatmentsInformation","text":"Get information doses present loaded dataset.","code":""},{"path":"/reference/getTreatmentsInformation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Get treatments information — getTreatmentsInformation","text":"","code":"getTreatmentsInformation()"},{"path":"/reference/getTreatmentsInformation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix] Get treatments information — getTreatmentsInformation","text":"dataframe whose columns : id occasion level names (string) time (double) amount (double) [optional] administrationType (int) [optional] infusionTime (double) [optional] isArtificial (bool): created SS ADDL column [optional] isReset (bool): IOV case ","code":""},{"path":"/reference/getTreatmentsInformation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Get treatments information — getTreatmentsInformation","text":"","code":"{ if (FALSE) { initializeLixoftConnectors(\"monolix\") project_name <- file.path(getDemoPath(), \"6.PK_models\", \"6.3.multiple_doses\", \"ss1_project.mlxtran\") loadProject(project_name) getTreatmentsInformation() } }"},{"path":"/reference/getVariabilityLevels.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Get variability levels — getVariabilityLevels","title":"[Monolix] Get variability levels — getVariabilityLevels","text":"Get summary variability levels (inter-individual /intra-individual variability) present current project.","code":""},{"path":"/reference/getVariabilityLevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Get variability levels — getVariabilityLevels","text":"","code":"getVariabilityLevels()"},{"path":"/reference/getVariabilityLevels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Get variability levels — getVariabilityLevels","text":"collection variability levels present currently loaded project.","code":""},{"path":"/reference/getVariabilityLevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Get variability levels — getVariabilityLevels","text":"","code":"if (FALSE) { getVariabilityLevels() }"},{"path":"/reference/importMonolixProject.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Import project from Monolix — importMonolixProject","title":"[Simulx] Import project from Monolix — importMonolixProject","text":"[DEPRECATED] function removed future version. Use importProject instead.","code":""},{"path":"/reference/importMonolixProject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Import project from Monolix — importMonolixProject","text":"","code":"importMonolixProject(projectFile)"},{"path":"/reference/importMonolixProject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Import project from Monolix — importMonolixProject","text":"projectFile (string) Path project file. Can absolute relative current working directory.","code":""},{"path":"/reference/importMonolixProject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Import project from Monolix — importMonolixProject","text":"Import elements coming Monolix project. imports  - model file,  - population parameters (estimated, else wise element created values 1),  - individual parameters (estimated, else wise element created values 1), - outputs external element, - treatments () external element,  - regressors () external element, - occasion structure () external element. WARNING: R sensitive '\\' '/', '/' can used.","code":""},{"path":[]},{"path":"/reference/importProject.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Import project from Datxplore, Monolix or PKanalix — importProject","title":"[Monolix - PKanalix - Simulx] Import project from Datxplore, Monolix or PKanalix — importProject","text":"Import Monolix PKanalix project currently running application initialized connectors. extensions .mlxtran Monolix, .pkx PKanalix, .smlx Simulx .dxp Datxplore. WARNING: R sensitive '\\' '/', '/' can used. Allowed import sources :","code":""},{"path":"/reference/importProject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Import project from Datxplore, Monolix or PKanalix — importProject","text":"","code":"importProject(projectFile)"},{"path":"/reference/importProject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Import project from Datxplore, Monolix or PKanalix — importProject","text":"projectFile (character) Path project file. Can absolute relative  current working directory.","code":""},{"path":"/reference/importProject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix - Simulx] Import project from Datxplore, Monolix or PKanalix — importProject","text":"import, new project created temporary folder project setting filesNextToProject = TRUE,  means file dependencies data model files copied kept next new project  (result folder Simulx). new project can saved desired location withsaveProject. Simulx projects can exported, imported. export Simulx project another application,  please load Simulx project Simulx connectors use exportProject. Importing Monolix PKanalix project Simulx automatically creates elements can used  simulation, exactly GUI. see elements type created new project, can use get..Element functions:  getOccasionElements, getPopulationElements, getPopulationElements, getIndividualElements,  getCovariateElements, getTreatmentElements, getOutputElements, getRegressorElements.","code":""},{"path":[]},{"path":"/reference/importProject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix - Simulx] Import project from Datxplore, Monolix or PKanalix — importProject","text":"","code":"if (FALSE) { initializeLixoftConnectors(software = \"simulx\", force = TRUE) importProject(\"/path/to/project/file.mlxtran\")  importProject(\"/path/to/project/file.pkx\")   initializeLixoftConnectors(software = \"monolix\", force = TRUE) importProject(\"/path/to/project/file.pkx\")   initializeLixoftConnectors(software = \"pkanalix\", force = TRUE) importProject(\"/path/to/project/file.mlxtran\")  }  # working example to import a Monolix demo project into Simulx. The resulting .smlx file can be opened from Simulx GUI.  initializeLixoftConnectors(software = \"monolix\", force = TRUE) MonolixDemoPath = file.path(getDemoPath(),\"1.creating_and_using_models\",\"1.1.libraries_of_models\",\"warfarinPK_project.mlxtran\") initializeLixoftConnectors(software = \"simulx\", force = TRUE) importProject(MonolixDemoPath) saveProject(\"importFromMonolix.smlx\")"},{"path":"/reference/initializeLixoftConnectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize lixoftConnectors API — initializeLixoftConnectors","title":"Initialize lixoftConnectors API — initializeLixoftConnectors","text":"Initialize lixoftConnectors API given software","code":""},{"path":"/reference/initializeLixoftConnectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize lixoftConnectors API — initializeLixoftConnectors","text":"","code":"initializeLixoftConnectors(software = \"monolix\", path = \"\", force = FALSE)"},{"path":"/reference/initializeLixoftConnectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize lixoftConnectors API — initializeLixoftConnectors","text":"software (character) [optional] Name software loaded. default, \"monolix\" software used. path (character) [optional] Path installation directory Lixoft suite. lixoftConnectors library already loaded path given, directory written lixoft.ini file used initialization. force (bool) [optional] software switch security overpassed . Equals FALSE default.","code":""},{"path":"/reference/initializeLixoftConnectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize lixoftConnectors API — initializeLixoftConnectors","text":"boolean equaling TRUE initialization successful FALSE .","code":""},{"path":"/reference/initializeLixoftConnectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize lixoftConnectors API — initializeLixoftConnectors","text":"","code":"if (FALSE) { initializeLixoftConnectors(software = \"monolix\", path = \"/path/to/lixoftRuntime/\") }"},{"path":"/reference/isProjectLoaded.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Get current project load status — isProjectLoaded","title":"[Monolix - PKanalix - Simulx] Get current project load status — isProjectLoaded","text":"[Monolix - PKanalix - Simulx] Get current project load status","code":""},{"path":"/reference/isProjectLoaded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Get current project load status — isProjectLoaded","text":"","code":"isProjectLoaded()"},{"path":"/reference/isProjectLoaded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix - Simulx] Get current project load status — isProjectLoaded","text":"TRUE project currently loaded, FALSE otherwise","code":""},{"path":"/reference/isProjectLoaded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix - Simulx] Get current project load status — isProjectLoaded","text":"","code":"initializeLixoftConnectors(\"monolix\") project_name <- file.path(getDemoPath(), \"1.creating_and_using_models\", \"1.1.libraries_of_models\", \"warfarinPK_project.mlxtran\") loadProject(project_name) isProjectLoaded() initializeLixoftConnectors(\"pkanalix\") isProjectLoaded()"},{"path":"/reference/lixoftDisplay.html","id":null,"dir":"Reference","previous_headings":"","what":"Display Lixoft API Structures — lixoftDisplay","title":"Display Lixoft API Structures — lixoftDisplay","text":"[Tools][Display]   Display structures retrieved LixoftConnectors library user-friendly way.","code":""},{"path":"/reference/lixoftDisplay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display Lixoft API Structures — lixoftDisplay","text":"","code":"lixoftDisplay(structure)"},{"path":"/reference/lixoftDisplay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display Lixoft API Structures — lixoftDisplay","text":"structure [miscellanous] data structure displayed.","code":""},{"path":"/reference/lixoftDisplay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display Lixoft API Structures — lixoftDisplay","text":"","code":"if (FALSE) { settings = getProjectSettings() lixoftDisplay(settings) }"},{"path":"/reference/loadProject.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Load project from file — loadProject","title":"[Monolix - PKanalix - Simulx] Load project from file — loadProject","text":"Load project currently running application initialized connectors. extensions .mlxtran Monolix, .pkx PKanalix, .smlx Simulx. WARNING: R sensitive '\\' '/', '/' can used.","code":""},{"path":"/reference/loadProject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Load project from file — loadProject","text":"","code":"loadProject(projectFile)"},{"path":"/reference/loadProject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Load project from file — loadProject","text":"projectFile (character) Path project file. Can absolute relative current working directory.","code":""},{"path":[]},{"path":[]},{"path":"/reference/newProject.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Create new project — newProject","title":"[Monolix - PKanalix - Simulx] Create new project — newProject","text":"New projects can created connectors PKanalix, Monolix Simulx GUI. creation new project requires dataset PKanalix, dataset model Monolix, model Simulx.","code":""},{"path":"/reference/newProject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Create new project — newProject","text":"","code":"newProject(modelFile = NULL, data = NULL)"},{"path":"/reference/newProject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Create new project — newProject","text":"modelFile (character) Path model file. Mandatory Monolix Simulx, optional PKanalix (used CA part). Can absolute relative current working directory.  use model libraries, can find model name getLibraryModelName set modelFile = \"lib:modelName.txt\" name obtained. simulate inter-individual variability Simulx new project, model file include statistical model, contrary Monolix PKanalix model file contains structural model. Check detail write model scratch. data (list) Structure describing data. Mandatory Monolix PKanalix. dataFile (string): Path data file. Can absolute relative current working directory. headerTypes (array<character>): collection header types. possible header types : \"ignore\", \"id\", \"time\", \"observation\", \"amount\", \"contcov\", \"catcov\", \"occ\", \"evid\", \"mdv\", \"obsid\", \"cens\", \"limit\", \"regressor\",\"admid\", \"rate\", \"tinf\", \"ss\", \"ii\", \"addl\", \"date\". Notice exactly types displayed interface, shortcuts. observationTypes [optional] (list):  list giving type observation present data file. one y-type, corresponding observation name can omitted. possible observation types \"continuous\", \"discrete\", \"event\". nbSSDoses (int): Number doses (SS column steady-state). mapping [optional](list): list lists representing link observation types model outputs. list contains: data (string) Name observation type prediction (string) Prediction name model [Monolix] (string) Model observation name (continuous observations )","code":""},{"path":"/reference/newProject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix - Simulx] Create new project — newProject","text":"Note: instead creating project scratch, also possible Monolix PKanalix load existing project loadProject importProject change dataset model setData setStructuralModel.","code":""},{"path":[]},{"path":"/reference/newProject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix - Simulx] Create new project — newProject","text":"","code":"# Create a new Monolix project initializeLixoftConnectors(\"monolix\") data_file <- file.path(getDemoPath(), \"1.creating_and_using_models\", \"1.1.libraries_of_models\", \"data\", \"warfarin_data.csv\") newProject(data = list(dataFile = data_file,                         headerTypes = c(\"id\", \"time\", \"amount\", \"observation\", \"obsid\", \"contcov\", \"catcov\", \"contcov\"),                         observationTypes = list(\"1\" = \"continuous\", \"2\" = \"continuous\"),                        mapping = list(list(data = \"1\",                                            prediction = \"Cc\",                                            model = \"y1\"),                                       list(data = \"2\",                                            prediction = \"R\",                                            model = \"y2\"))),            modelFile = \"lib:oral1_1cpt_IndirectModelInhibitionKin_TlagkaVClR0koutImaxIC50.txt\")                                                  # Create a new PKanalix project initializeLixoftConnectors(\"pkanalix\") data_file <- file.path(getDemoPath(), \"1.basic_examples\", \"data\", \"data_BLQ.csv\") newProject(data = list(dataFile = data_file,                        headerTypes = c(\"id\", \"time\", \"amount\", \"observation\", \"cens\", \"catcov\")))  # Create a new Simulx project initializeLixoftConnectors(\"simulx\") newProject(modelFile = \"lib:oral1_1cpt_IndirectModelInhibitionKin_TlagkaVClR0koutImaxIC50.txt\")"},{"path":"/reference/plotBEConfidenceIntervals.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Individual NCA parameter vs covariate plot — plotBEConfidenceIntervals","title":"[PKanalix] Individual NCA parameter vs covariate plot — plotBEConfidenceIntervals","text":"[PKanalix] Individual NCA parameter vs covariate plot","code":""},{"path":"/reference/plotBEConfidenceIntervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Individual NCA parameter vs covariate plot — plotBEConfidenceIntervals","text":"","code":"plotBEConfidenceIntervals(   parameters = NULL,   formulations = NULL,   settings = list(),   preferences = NULL,   data = NULL )"},{"path":"/reference/plotBEConfidenceIntervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Individual NCA parameter vs covariate plot — plotBEConfidenceIntervals","text":"parameters vector bioequivalence parameters display. (default first 4 computed parameters displayed). formulations vector test formulations display. (default first 4 test formulations displayed). settings List following settings median (bool) - TRUE median displayed (default TRUE). limits (bool) - TRUE confidence intervals limits displayed (default TRUE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default TRUE). ylab (string) label y axis (default Ratio). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. units (boolean) Set units axis labels (default TRUE). preferences (optional) preferences plot display, run getPlotPreferences(\"plotBEConfidenceIntervals\") check available displays. data Charts data dataframe - Output getChartsData (getChartsData(\"plotBESubjectByFormulation\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotBEConfidenceIntervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Individual NCA parameter vs covariate plot — plotBEConfidenceIntervals","text":"ggplot object one parameter, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotBEConfidenceIntervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Individual NCA parameter vs covariate plot — plotBEConfidenceIntervals","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)   runNCAEstimation()   runBioequivalenceEstimation()   plotBEConfidenceIntervals()      plotBEConfidenceIntervals(parameters = \"Cmax\",                             settings = list(legend = T))      # pre compute dataset   data <- getChartsData(plotName = \"plotBEConfidenceIntervals\")   plotBEConfidenceIntervals(data = data)      parameters <- c(\"AUClast\", \"Cmax\")   plotBEConfidenceIntervals(parameters = parameters)"},{"path":"/reference/plotBESequenceByPeriod.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Plot Bioequivalence Sequenced parameters — plotBESequenceByPeriod","title":"[PKanalix] Plot Bioequivalence Sequenced parameters — plotBESequenceByPeriod","text":"[PKanalix] Plot Bioequivalence Sequenced parameters","code":""},{"path":"/reference/plotBESequenceByPeriod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Plot Bioequivalence Sequenced parameters — plotBESequenceByPeriod","text":"","code":"plotBESequenceByPeriod(   parameters = NULL,   settings = list(),   preferences = NULL,   stratify = list(),   data = NULL )"},{"path":"/reference/plotBESequenceByPeriod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Plot Bioequivalence Sequenced parameters — plotBESequenceByPeriod","text":"parameters vector bioequivalence parameters display. (default first 4 computed parameters displayed). settings List following settings dots (bool) - TRUE sequenced parameters displayed dots (default TRUE). lines (bool) - TRUE sequenced parameters displayed lines (default TRUE). error (bool) - TRUE error displayed bars (default TRUE). formulationColors (vector<string>) List colors use formulation   one test formulation. legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default FALSE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. units (boolean) Set units axis labels (default TRUE). xlab (string) Label x-axis (label default) . preferences (optional) preferences plot display, run getPlotPreferences(\"plotBESequenceByPeriod\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values. groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter. interval - case continuous covariate, list filtering intervals. data Charts data dataframe - Output getChartsData (getChartsData(\"plotBESequenceByPeriod\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotBESequenceByPeriod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Plot Bioequivalence Sequenced parameters — plotBESequenceByPeriod","text":"ggplot object one parameter, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotBESequenceByPeriod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Plot Bioequivalence Sequenced parameters — plotBESequenceByPeriod","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"3.bioequivalence/project_crossover_bioequivalence.pkx\")   loadProject(project)    runNCAEstimation()   runBioequivalenceEstimation()      plotBESequenceByPeriod(parameters = \"Cmax\",                          settings = list(legend = T))      # stratification   plotBESequenceByPeriod(     parameters = \"AUClast\",     stratify = list(filter = list(name = \"AGE\", interval = c(25, 30)))   )   plotBESequenceByPeriod(     parameters = \"AUClast\",     stratify = list(splitGroup = list(name = \"AGE\", breaks = c(25)))   )   plotBESequenceByPeriod(     parameters = \"AUClast\", settings=list(legend=T),     stratify = list(splitGroup=list(list(name = \"AGE\", breaks = 25),                                     list(name = \"WT\", breaks = 75)))   )      # update settings and preferences   plotBESequenceByPeriod(     parameters = \"Cmax\",     settings = list(legend = T, error = F)   )   preferences <- list(sequence = list(lineType = \"dashed\"))   plotBESequenceByPeriod(parameter =  \"Cmax\",                          preferences = preferences)      # pre compute dataset   data <- getChartsData(plotName = \"plotBESequenceByPeriod\")   plotBESequenceByPeriod(data = data)      parameters <- c(\"AUClast\", \"Cmax\")   plotBESequenceByPeriod()   plotBESequenceByPeriod(parameters = parameters)"},{"path":"/reference/plotBESubjectByFormulation.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Plot Bioequivalence Formulation parameters — plotBESubjectByFormulation","title":"[PKanalix] Plot Bioequivalence Formulation parameters — plotBESubjectByFormulation","text":"[PKanalix] Plot Bioequivalence Formulation parameters","code":""},{"path":"/reference/plotBESubjectByFormulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Plot Bioequivalence Formulation parameters — plotBESubjectByFormulation","text":"","code":"plotBESubjectByFormulation(   parameters = NULL,   formulations = NULL,   settings = list(),   preferences = NULL,   stratify = list(),   data = NULL )"},{"path":"/reference/plotBESubjectByFormulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Plot Bioequivalence Formulation parameters — plotBESubjectByFormulation","text":"parameters vector bioequivalence parameters display. (default first 4 computed parameters displayed). formulations list test formulations display. (default first 4 test formulations displayed). settings List following settings dots (bool) - TRUE sequenced parameters displayed dots (default TRUE). lines (bool) - TRUE sequenced parameters displayed lines (default TRUE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default FALSE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. units (boolean) Set units axis labels (default TRUE). preferences (optional) preferences plot display, run getPlotPreferences(\"plotBESubjectByFormulation\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data Charts data dataframe - Output getChartsData (getChartsData(\"plotBESubjectByFormulation\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotBESubjectByFormulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Plot Bioequivalence Formulation parameters — plotBESubjectByFormulation","text":"ggplot object one parameter, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotBESubjectByFormulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Plot Bioequivalence Formulation parameters — plotBESubjectByFormulation","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)    runNCAEstimation()   runBioequivalenceEstimation()      plotBESubjectByFormulation(parameters = \"Cmax\",                              settings = list(legend = T))      # stratification   plotBESubjectByFormulation(     parameters = \"AUClast\",     stratify = list(filter = list(name = \"AGE\", interval = c(25, 30)))   )   plotBESubjectByFormulation(     parameters = \"AUClast\",     stratify = list(splitGroup = list(name = \"AGE\", breaks = c(25)))   )   plotBESubjectByFormulation(     parameters = \"AUClast\",     stratify = list(colorGroup = list(name = \"AGE\", breaks = c(25))),     settings = list(legend = T)   )   plotBESubjectByFormulation(     parameters = \"AUClast\",     stratify = list(colorGroup = list(name = \"ID\")),     settings = list(legend = T)   )   plotBESubjectByFormulation(     parameters = \"AUClast\", settings=list(legend=T),     stratify = list(splitGroup=list(list(name = \"AGE\", breaks = 25),                                     list(name = \"WT\", breaks = 75)))   )    # update settings and preferences   plotBESubjectByFormulation(     parameters = \"Cmax\",     settings = list(legend = T, lines = F)   )   preferences <- list(formulationLine = list(lineType = \"dashed\"))   plotBESubjectByFormulation(parameter =  \"Cmax\",                              preferences = preferences)      # pre compute dataset   data <- getChartsData(plotName = \"plotBESubjectByFormulation\")   plotBESubjectByFormulation(data = data)      parameters <- c(\"AUClast\", \"Cmax\")   plotBESubjectByFormulation()   plotBESubjectByFormulation(parameters = parameters)"},{"path":"/reference/plotBivariateDataViewer.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Generate Bivariate observations plots — plotBivariateDataViewer","title":"[Monolix - PKanalix] Generate Bivariate observations plots — plotBivariateDataViewer","text":"[Monolix - PKanalix] Generate Bivariate observations plots","code":""},{"path":"/reference/plotBivariateDataViewer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Generate Bivariate observations plots — plotBivariateDataViewer","text":"","code":"plotBivariateDataViewer(   obs1 = NULL,   obs2 = NULL,   data = NULL,   settings = list(),   stratify = list(),   preferences = list() )"},{"path":"/reference/plotBivariateDataViewer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Generate Bivariate observations plots — plotBivariateDataViewer","text":"obs1 (string) Name observation display x axis (dataset header). default first observation considered. obs2 (string) Name observation display y axis (dataset header). default second observation considered. data List charts data dataframe - Output getChartsData (getChartsData(\"plotBivariateDataViewer\", ...)) data specified, charts data computed inside function. settings List following settings dots (bool) - TRUE individual observations displayed dots (default TRUE). lines (bool) - TRUE individual observations displayed lines (default TRUE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). xlog (bool) add (TRUE) / remove (FALSE) log scaling x axis (default FALSE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default FALSE). xlab (string) label x axis (Name obs1 default). ylab (string) label y axis (Name obs2 default). ncol (int) number columns facet = TRUE (default 4). xlim (c(double, double)) limits x axis. ylim (c(double, double)) limits y axis. fontsize (integer) Plot text font size. units (boolean) Set units axis labels (available PKanalix). scales (string) scales fixed (\"fixed\"),   free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined preferences (optional) preferences plot display, run getPlotPreferences(\"plotBivariateDataViewer\") check available displays.","code":""},{"path":"/reference/plotBivariateDataViewer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix] Generate Bivariate observations plots — plotBivariateDataViewer","text":"ggplot object","code":""},{"path":[]},{"path":"/reference/plotBivariateDataViewer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Generate Bivariate observations plots — plotBivariateDataViewer","text":"","code":"initializeLixoftConnectors(software = \"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"warfarinPKPD_project.mlxtran\")   loadProject(project)      plotBivariateDataViewer(obs1 = \"y1\", obs2 = \"y2\")   plotBivariateDataViewer(settings = list(lines = FALSE))      # stratification   plotBivariateDataViewer(obs1 = \"y1\", obs2 = \"y2\", stratify = list(ids = \"10\"))   plotBivariateDataViewer(stratify = list(splitGroup = list(name = \"age\", breaks = 25),                                       filter = list(name = \"sex\", cat = 1)))   plotBivariateDataViewer(stratify = list(colorGroup = list(name = \"wt\", breaks = 75)))   plotBivariateDataViewer(stratify = list(splitGroup = list(list(name = \"age\", breaks = 25),                                                             list(name = \"sex\"))))   # update plot settings or preferences   plotBivariateDataViewer(preferences = list(obs = list(color = \"#32CD32\")))"},{"path":"/reference/plotBlqPredictiveCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Plot BLQ predictive checks — plotBlqPredictiveCheck","title":"[Monolix] Plot BLQ predictive checks — plotBlqPredictiveCheck","text":"[Monolix] Plot BLQ predictive checks","code":""},{"path":"/reference/plotBlqPredictiveCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Plot BLQ predictive checks — plotBlqPredictiveCheck","text":"","code":"plotBlqPredictiveCheck(   obsName = NULL,   settings = list(),   preferences = list(),   data = NULL )"},{"path":"/reference/plotBlqPredictiveCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Plot BLQ predictive checks — plotBlqPredictiveCheck","text":"obsName (string) Name observation (dataset header). default first observation considered. settings list optional plot settings: level (int) level prediction intervals computation (default 90). nbPoints (int) Number points grid computation (default 200). censoredInterval (c(double, double)) Censored interval c(min, max) censored data. default, limit censored values used. empirical (bool) TRUE Empirical data displayed (default TRUE). theoretical (bool) TRUE theoretical data displayed (default FALSE): predInterval (bool) TRUE Prediction intervalis displayed (default TRUE). outlierAreas (bool) TRUE Add red areas indicating empirical percentiles outside prediction intervals (default TRUE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). xlog (bool) add (TRUE) / remove (FALSE) log scaling x axis (default FALSE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default FALSE). xlab (string) label x axis (default \"Time\"). ylab (string) label y axis (default obsName). ncol (int) number columns facet = TRUE (default 4). xlim (c(double, double)) limits x axis. ylim (c(double, double)) limits y axis. fontsize (integer) Plot text font size. scales (string) scales fixed (\"fixed\"), free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). preferences (optional) preferences plot display, run getPlotPreferences(\"plotBlqPredictiveCheck\") check available displays. data List charts data dataframe - Output getChartsData (getChartsData(\"plotBlqPredictiveCheck\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotBlqPredictiveCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Plot BLQ predictive checks — plotBlqPredictiveCheck","text":"ggplot2 object","code":""},{"path":[]},{"path":"/reference/plotBlqPredictiveCheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Plot BLQ predictive checks — plotBlqPredictiveCheck","text":"","code":"initializeLixoftConnectors(software = \"monolix\")      # continuous data   project <- file.path(getDemoPath(), \"2.models_for_continuous_outcomes\",                        \"2.2.censored_data\", \"censoring1_project.mlxtran\")   loadProject(project)   runScenario()      plotBlqPredictiveCheck(obsName = \"Y\")"},{"path":"/reference/plotCAIndividualFits.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Generate CA Fit plots — plotCAIndividualFits","title":"[PKanalix] Generate CA Fit plots — plotCAIndividualFits","text":"[PKanalix] Generate CA Fit plots","code":""},{"path":"/reference/plotCAIndividualFits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Generate CA Fit plots — plotCAIndividualFits","text":"","code":"plotCAIndividualFits(   obsName = NULL,   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotCAIndividualFits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Generate CA Fit plots — plotCAIndividualFits","text":"obsName (string) Name observation (dataset header). default first observation considered. settings List following settings obsDots (bool) - TRUE individual observations displayed dots (default TRUE). obsLines (bool) - TRUE individual observations displayed lines (default FALSE). cens (bool) - TRUE censoring data displayed intervals (default TRUE). indivFits (bool) - TRUE individual fits displayed (default TRUE). dosingTimes (bool) - Add dosing times vertical lines (default FALSE). splitOccasions (bool) - TRUE occasions displayed separate plots (default TRUE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). xlog (bool) add (TRUE) / remove (FALSE) log scaling x axis (default FALSE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default TRUE). xlab (string) label x axis (default \"Time\"). ylab (string) label y axis (default \"Concentration\"). ncol (int) number columns facet = TRUE (default 4). xlim (c(double, double)) limits x axis. ylim (c(double, double)) limits y axis. fontsize (integer) Plot text font size. units (boolean) Set units axis labels. scales (string) scales fixed (\"fixed\"),   free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). preferences (optional) preferences plot display, run getPlotPreferences(\"plotCAIndividualFits\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed), colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List charts data dataframe - Output getChartsData (getChartsData(\"plotCAIndividualFits\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotCAIndividualFits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Generate CA Fit plots — plotCAIndividualFits","text":"ggplot object","code":""},{"path":[]},{"path":"/reference/plotCAIndividualFits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Generate CA Fit plots — plotCAIndividualFits","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)    runCAEstimation()      plotCAIndividualFits()     # display   plotCAIndividualFits(stratify = list(ids = c(1, 2, 3)),                        settings = list(obsDots = T, indivFits = T))   plotCAIndividualFits(stratify = list(ids = c(1, 2, 3)),                        settings = list(obsDots = F, obsLines = T, cens = T, indivFits = T))      # stratification   plotCAIndividualFits(stratify = list(ids = c(1, 2, 3, 4),                                        filter = list(name = \"Period\", cat = 1)))   plotCAIndividualFits(stratify = list(ids = c(1, 2, 3, 4, 5),                                        colorGroup = list(name = \"SEQ\"),                                        colors = c(\"#5DC088\", \"#DBA92B\")))   plotCAIndividualFits(settings=list(legend=T),                        stratify = list(ids = c(1, 2, 3, 4, 5),                                        colorGroup=list(list(name = \"AGE\", breaks = 25),                                                        list(name = \"Period\"))))      # update settings and preferences   plotCAIndividualFits(stratify = list(ids = c(1, 4)),                        settings = list(ylog = F, scales = \"fixed\"))   plotCAIndividualFits(settings = list(ncol = 5))   preferences <- list(censObsIntervals = list(opacity = 1, lineWidth = 0.5))   plotCAIndividualFits(stratify = list(ids = c(4, 5, 6)), preferences = preferences)      # pre compute dataset   data <- getChartsData(plot = \"plotCAIndividualFits\", ids = c(1, 2))   plotCAIndividualFits(data = data)"},{"path":"/reference/plotCAObservationsVsPredictions.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Plot Observation VS Prediction — plotCAObservationsVsPredictions","title":"[PKanalix] Plot Observation VS Prediction — plotCAObservationsVsPredictions","text":"[PKanalix] Plot Observation VS Prediction","code":""},{"path":"/reference/plotCAObservationsVsPredictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Plot Observation VS Prediction — plotCAObservationsVsPredictions","text":"","code":"plotCAObservationsVsPredictions(   obsName = NULL,   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotCAObservationsVsPredictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Plot Observation VS Prediction — plotCAObservationsVsPredictions","text":"obsName (string) Name observation (dataset header). default first observation considered. settings List following settings useCensored (bool) Choose use BLQ data (TRUE) ignore (FALSE) compute statistics (default TRUE). obs (bool) - TRUE observations displayed dots (default TRUE). cens (bool) - TRUE censoring data displayed red dots (default TRUE). spline (bool) - TRUE add spline (default FALSE). identityLine (bool) - TRUE add identity line (default TRUE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). xlog (bool) add (TRUE) / remove (FALSE) log scaling x axis (default FALSE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default FALSE). ncol (int) number columns facet = TRUE (default 4). xlim (c(double, double)) limits x axis. ylim (c(double, double)) limits y axis. fontsize (integer) Plot text font size. scales (string) scales fixed (\"fixed\"), free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). ylab (string) label y axis (default \"Observations\"). preferences (optional) preferences plot display, run getPlotPreferences(\"plotObservationsVsPredictions\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List chazrts data dataframe - Output getChartsData (getChartsData(\"plotObservationsVsPredictions\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotCAObservationsVsPredictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Plot Observation VS Prediction — plotCAObservationsVsPredictions","text":"ggplot object one prediction type, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotCAObservationsVsPredictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Plot Observation VS Prediction — plotCAObservationsVsPredictions","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"1.basic_examples\",                        \"project_censoring.pkx\")   loadProject(project)   runCAEstimation()      plotCAObservationsVsPredictions()   plotCAObservationsVsPredictions(settings = list(spline = TRUE))   plotCAObservationsVsPredictions(settings = list(ylog = TRUE, xlog = TRUE))      # stratification   plotCAObservationsVsPredictions(stratify = list(filter = list(name = \"STUDY\", cat = \"102\")))   plotCAObservationsVsPredictions(stratify = list(splitGroup = list(name = \"STUDY\")))   plotCAObservationsVsPredictions(stratify = list(colorGroup = list(name = \"STUDY\")))    data <- getChartsData(plotName = \"plotCAObservationsVsPredictions\",                         colorGroup = list(name = \"STUDY\"))   plotCAObservationsVsPredictions(data = data)"},{"path":"/reference/plotCAParametersCorrelation.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Correlation between 2 individual CA parameters — plotCAParametersCorrelation","title":"[PKanalix] Correlation between 2 individual CA parameters — plotCAParametersCorrelation","text":"[PKanalix] Correlation 2 individual CA parameters","code":""},{"path":"/reference/plotCAParametersCorrelation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Correlation between 2 individual CA parameters — plotCAParametersCorrelation","text":"","code":"plotCAParametersCorrelation(   parametersRows = NULL,   parametersColumns = NULL,   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotCAParametersCorrelation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Correlation between 2 individual CA parameters — plotCAParametersCorrelation","text":"parametersRows vector name CA parameters display rows (default first 4 computed parameters displayed). parametersColumns vector name CA parameters display columns (default parametersColumns = parametersRows). settings List following settings regressionLine (bool) TRUE, Add regression line scatterplots (default TRUE). spline (bool) TRUE, Add xpline scatterplots (default FALSE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. preferences (optional) preferences plot display, run getPlotPreferences(\"plotCAParametersCorrelation\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List charts data dataframe - Output getChartsData (getChartsData(\"plotCAParametersCorrelation\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotCAParametersCorrelation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Correlation between 2 individual CA parameters — plotCAParametersCorrelation","text":"ggplot object one element parametersRows parametersColumns, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotCAParametersCorrelation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Correlation between 2 individual CA parameters — plotCAParametersCorrelation","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)    runCAEstimation()      plotCAParametersCorrelation()   plotCAParametersCorrelation(parametersRows = c(\"ka\", \"Cl\"))      plotCAParametersCorrelation(parametersRows = \"ka\", parametersColumns = \"Cl\")   plotCAParametersCorrelation(parametersRows = \"Cl\", parametersColumns = \"ka\")   plotCAParametersCorrelation(parametersRows = \"ka\", parametersColumns = \"Cl\",                               settings = list(spline = TRUE))      # stratification   plotCAParametersCorrelation(parametersRows = \"ka\", parametersColumns = \"Cl\",                               stratify = list(filter = list(name = \"AGE\", interval = c(25, 30))))   plotCAParametersCorrelation(parametersRows = \"ka\", parametersColumns = \"Cl\",                               stratify = list(splitGroup = list(name = \"AGE\", breaks = c(25))))   plotCAParametersCorrelation(parametersRows = \"ka\", parametersColumns = \"Cl\",                               stratify = list(colorGroup = list(name = \"HT\", breaks = 181)))   plotCAParametersCorrelation(     parametersRows = \"ka\", parametersColumns = \"Cl\", settings=list(legend=T),     stratify = list(splitGroup=list(list(name = \"AGE\", breaks = 25),                                     list(name = \"Period\")))   )    # update preferences and settings   preferences <- list(obs = list(color = \"#51B613\"))   plotCAParametersCorrelation(parametersRows = \"ka\", parametersColumns = \"Cl\",                               preferences = preferences)     # pre compute dataset                      data <- getChartsData(plotName = \"plotCAParametersCorrelation\")   plotCAParametersCorrelation(data = data)      plotCAParametersCorrelation(parametersRows = c(\"Tlag\", \"ka\", \"V\"))"},{"path":"/reference/plotCAParametersDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Distribution of the individual CA parameters — plotCAParametersDistribution","title":"[PKanalix] Distribution of the individual CA parameters — plotCAParametersDistribution","text":"[PKanalix] Distribution individual CA parameters","code":""},{"path":"/reference/plotCAParametersDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Distribution of the individual CA parameters — plotCAParametersDistribution","text":"","code":"plotCAParametersDistribution(   parameters = NULL,   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotCAParametersDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Distribution of the individual CA parameters — plotCAParametersDistribution","text":"parameters vector ca parameters display. (default first 4 computed ca parameters displayed). settings List following settings plot Type plot: probability density distribution (\"pdf\"), cumulative density distribution (\"cdf\") (default \"pdf\"). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. scales (string) scales fixed (\"fixed\"),   free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). preferences (optional) preferences plot display, run getPlotPreferences(\"plotCAParametersDistribution\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List charts data dataframe - Output getChartsData (getChartsData(\"plotCAParametersDistribution\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotCAParametersDistribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Distribution of the individual CA parameters — plotCAParametersDistribution","text":"ggplot object one parameter, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotCAParametersDistribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Distribution of the individual CA parameters — plotCAParametersDistribution","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)    runCAEstimation()      plotCAParametersDistribution(parameters = \"Tlag\", settings = list(plot = \"pdf\"))   plotCAParametersDistribution(parameters = \"Cl\", settings = list(plot = \"cdf\"))      # stratification   plotCAParametersDistribution(parameters = \"Tlag\",                                stratify = list(filter = list(name = \"AGE\", interval = c(25, 30))))   plotCAParametersDistribution(parameters = \"Cl\",                                stratify = list(splitGroup = list(name = \"AGE\", breaks = c(25))))   plotCAParametersDistribution(parameters = \"Cl\", settings = list(plot = \"pdf\"),                                stratify = list(colorGroup = list(name = \"HT\", breaks = 181)))   plotCAParametersDistribution(parameters = \"Cl\", settings = list(plot = \"cdf\"),                                stratify = list(colorGroup = list(name = \"HT\", breaks = 181),                                colors = c(\"#46B4AF\", \"#B4468A\")))   plotCAParametersDistribution(     parameters = \"Cl\", settings=list(legend=T),     stratify = list(splitGroup=list(list(name = \"AGE\", breaks = 25),                                     list(name = \"Period\")))   )    # pre compute dataset   data <- getChartsData(plotName = \"plotCAParametersDistribution\")   plotCAParametersDistribution(data = data)      parameters <- c(\"Tlag\", \"ka\", \"V\")   plotCAParametersDistribution(data = data, parameters = parameters)   plotCAParametersDistribution(parameters = parameters)   plotCAParametersDistribution(parameters = parameters, settings = list(plot = \"cdf\"))   plotCAParametersDistribution(parameters = parameters, settings = list(plot = \"pdf\"))"},{"path":"/reference/plotCAParametersVsCovariates.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Individual CA parameter vs covariate plot — plotCAParametersVsCovariates","title":"[PKanalix] Individual CA parameter vs covariate plot — plotCAParametersVsCovariates","text":"[PKanalix] Individual CA parameter vs covariate plot","code":""},{"path":"/reference/plotCAParametersVsCovariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Individual CA parameter vs covariate plot — plotCAParametersVsCovariates","text":"","code":"plotCAParametersVsCovariates(   parameters = NULL,   covariates = NULL,   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotCAParametersVsCovariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Individual CA parameter vs covariate plot — plotCAParametersVsCovariates","text":"parameters vector ca parameters display. (default first 4 computed ca parameters displayed). covariates vector covariates display. (default first 4 covariates displayed). settings List following settings regressionLine (bool) TRUE, Add regression line scatterplots (default TRUE). spline (bool) TRUE, Add xpline scatterplots (default FALSE). boxplotData (string) categorical covariate, boxplotData NULL, data added dots boxplot. can either \"spread\" box \"aligned\" (default NULL) legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. preferences (optional) preferences plot display, run getPlotPreferences(\"plotCAParametersVsCovariates\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed), splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data Charts data dataframe - Output getChartsData (getChartsData(\"plotCAParametersVsCovariates\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotCAParametersVsCovariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Individual CA parameter vs covariate plot — plotCAParametersVsCovariates","text":"ggplot object one element covariatesRows covariatesColumns, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotCAParametersVsCovariates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Individual CA parameter vs covariate plot — plotCAParametersVsCovariates","text":"","code":"initializeLixoftConnectors(software=\"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)    runCAEstimation()      plotCAParametersVsCovariates(covariates=\"AGE\", parameters=\"ka\", settings=list(spline=T))   plotCAParametersVsCovariates(covariates=\"FORM\", parameters=\"Tlag\")      # stratification   plotCAParametersVsCovariates(covariates= \"HT\", parameters=\"ka\",                                stratify=list(filter=list(name=\"AGE\", interval=c(25, 30))))   plotCAParametersVsCovariates(covariates=\"WT\", parameters=\"ka\",                                stratify=list(splitGroup=list(name=\"AGE\", breaks=c(25))))   plotCAParametersVsCovariates(covariates=\"AGE\", parameters=\"ka\",                                stratify=list(colorGroup=list(name=\"HT\", breaks=181)))   plotCAParametersVsCovariates(covariates=\"SEQ\", parameters=\"ka\",                                stratify=list(colorGroup=list(name=\"HT\", breaks=181),                                              colors = c(\"#175C8C\", \"#ABD3EF\")))   plotCAParametersVsCovariates(     covariates=\"SEQ\", parameters=\"ka\", settings=list(legend=T),     stratify = list(splitGroup=list(list(name = \"AGE\", breaks = 25),                                     list(name = \"Period\")))   )    # update settings and preferences   plotCAParametersVsCovariates(covariates=\"SEQ\", parameters=\"Tlag\", settings=list(legend=T))   preferences <- list(spline=list(lineType=\"dashed\"))   plotCAParametersVsCovariates(covariates=\"AGE\", parameters=\"ka\",                                settings=list(regressionLine=F, spline=T),                                preferences=preferences)      # pre compute dataset   data <- getChartsData(plotName=\"plotCAParametersVsCovariates\")   plotCAParametersVsCovariates(data=data)      parameters <- c(\"Tlag\", \"Cl\", \"V\")   covariates <- c(\"AGE\", \"WT\", \"FORM\")   plotCAParametersVsCovariates(parameters=parameters, covariates=covariates, data=data)   plotCAParametersVsCovariates(parameters=parameters, covariates=covariates)"},{"path":"/reference/plotCovariates.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Generate Covariate plots — plotCovariates","title":"[Monolix - PKanalix] Generate Covariate plots — plotCovariates","text":"Generate scatterplots two continuous covariates bar plot categorical covariates","code":""},{"path":"/reference/plotCovariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Generate Covariate plots — plotCovariates","text":"","code":"plotCovariates(   covariatesRows = NULL,   covariatesColumns = NULL,   data = NULL,   settings = list(),   preferences = list(),   stratify = list() )"},{"path":"/reference/plotCovariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Generate Covariate plots — plotCovariates","text":"covariatesRows vector name covariates display rows (default first 4 covariates displayed). covariatesColumns vector name covariates display columns (default first 4 covariates displayed). data List charts data dataframe - Output getChartsData (getChartsData(\"plotCovariates\", ...)) data specified, charts data computed inside function. settings List following settings regressionLine (bool) TRUE, Add regression line scatterplots (default TRUE). spline (bool) TRUE, Add xpline scatterplots (default FALSE). histogramColors (vector<string>) List colors use histograms plots. histogramPosition (string) Type histogram: \"stacked\", \"grouped\" \"default\" (histograms categorical covariates xaxis plot grouped else stacked),  (Default \"default\") legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). bins (int) number bins histogram (default 10) fontsize (integer) Plot text font size. preferences (optional) preferences plot display, run getPlotPreferences(\"plotCovariates\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined","code":""},{"path":"/reference/plotCovariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix] Generate Covariate plots — plotCovariates","text":"ggplot object one element covariatesRows covariatesColumns, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotCovariates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Generate Covariate plots — plotCovariates","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)      # covariate distribution when only one covariate is specified   plotCovariates(covariatesRows = \"HT\", settings = list(bins = 10))      # scatter plot when both covariates are continuous   plotCovariates(covariatesRows = \"HT\", covariatesColumns = \"AGE\", settings = list(spline = TRUE))   plotCovariates(covariatesRows = \"HT\", covariatesColumns = c(\"AGE\", \"FORM\"))      # box plot when one covariate is categorical and the othe one is continuous   preferences <- list(boxplot = list(fill = \"#2075AE\"), boxplotOutlier = list(shape = 3))   plotCovariates(covariatesRows = \"FORM\", covariatesColumns = \"AGE\", preferences = preferences)      # histogram when covariate on column is categorical   plotCovariates(covariatesRows = \"FORM\", covariatesColumns = \"SEQ\",                  settings = list(histogramColors = c(\"#5DC088\", \"#DBA92B\")))   plotCovariates(covariatesRows = \"AGE\", covariatesColumns = \"SEQ\",                  settings = list(histogramColors = c(\"#5DC088\", \"#DBA92B\")))      # stratification   plotCovariates(covariatesRows = \"HT\", covariatesColumns = \"WT\", stratify = list(                  splitGroup = list(name = \"AGE\", breaks = 25),                  filter = list(name = \"Period\", cat = 1)))   preferences <- list(regressionLine = list(color = \"#E5551B\"))   plotCovariates(covariatesRows = \"AGE\", covariatesColumns = \"WT\", stratify = list(                  colorGroup = list(name = \"HT\", breaks = 181),                  colors = c(\"#2BB9DB\", \"#DD6BD2\")), preferences = preferences)   plotCovariates(covariatesRows = \"HT\", covariatesColumns = \"WT\",                  stratify = list(splitGroup = list(list(name = \"AGE\", breaks = 25),                                                    list(name = \"SEQ\"))))    # Mulitple covariates   plotCovariates()   plotCovariates(covariatesRows = c(\"AGE\", \"SEQ\", \"HT\"), covariatesColumns = c(\"AGE\", \"SEQ\", \"HT\"))   plotCovariates(stratify = list(filter = list(name = \"AGE\", interval = c(20, 30))))   plotCovariates(stratify = list(splitGroup = list(name = \"AGE\", breaks = c(25))))   plotCovariates(stratify = list(colorGroup = list(name = \"AGE\", breaks = c(25))))"},{"path":"/reference/plotImportanceSampling.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Plot Importance sampling convergence — plotImportanceSampling","title":"[Monolix] Plot Importance sampling convergence — plotImportanceSampling","text":"[Monolix] Plot Importance sampling convergence","code":""},{"path":"/reference/plotImportanceSampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Plot Importance sampling convergence — plotImportanceSampling","text":"","code":"plotImportanceSampling(settings = list(), data = NULL)"},{"path":"/reference/plotImportanceSampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Plot Importance sampling convergence — plotImportanceSampling","text":"settings list optional settings: grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). fontsize (integer) Plot text font size. data dataframe - Output getChartsData (getChartsData(\"plotImportanceSampling\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotImportanceSampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Plot Importance sampling convergence — plotImportanceSampling","text":"ggplot object","code":""},{"path":[]},{"path":"/reference/plotImportanceSampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Plot Importance sampling convergence — plotImportanceSampling","text":"","code":"initializeLixoftConnectors(software = \"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()   runLogLikelihoodEstimation()      plotImportanceSampling()"},{"path":"/reference/plotIndividualFits.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Plot Monolix Individual Fits Only available for Continuous data. — plotIndividualFits","title":"[Monolix] Plot Monolix Individual Fits Only available for Continuous data. — plotIndividualFits","text":"[Monolix] Plot Monolix Individual Fits available Continuous data.","code":""},{"path":"/reference/plotIndividualFits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Plot Monolix Individual Fits Only available for Continuous data. — plotIndividualFits","text":"","code":"plotIndividualFits(   obsName = NULL,   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotIndividualFits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Plot Monolix Individual Fits Only available for Continuous data. — plotIndividualFits","text":"obsName (string) Name observation (dataset header). default first observation considered. settings List following settings indivEstimate (string) Calculation individual estimates: conditional mean (\"mean\"),   conditional mode EBE's (\"mode\")   (default \"mode\") . obsDots (bool) - TRUE individual observations displayed dots (default TRUE). obsLines (bool) - TRUE individual observations displayed lines (default FALSE). cens (bool) - TRUE censored intervals displayed (default TRUE). indivFits (bool) - TRUE individual fits displayed (default TRUE). popFits (bool) - TRUE population fits (typical individual) displayed (default FALSE). popCov (bool) - TRUE population fits (individual covariates) displayed (default FALSE). predMedian (bool) - TRUE median individual fits computed based multiple simulations (default FALSE). predInterval (bool) - TRUE 90 % prediction interval individual fits computed based multiple simulations (default FALSE). splitOccasions (bool) - TRUE occasions displayed separate plots (default TRUE). dosingTimes (boolean) - Add dosing times vertical lines (default FALSE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). xlog (bool) add (TRUE) / remove (FALSE) log scaling x axis (default FALSE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default FALSE). xlab (string) label x axis (default \"Time\"). ylab (string) label y axis (default obsName). ncol (int) number columns facet = TRUE (default 4). xlim (c(double, double)) limits x axis. ylim (c(double, double)) limits y axis. fontsize (integer) Plot text font size. scales (string) scales fixed (\"fixed\"),   free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). preferences (optional) preferences plot display, run getPlotPreferences(\"plotIndividualFits\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List charts data dataframe - Output getChartsData (getChartsData(\"plotIndividualFits\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotIndividualFits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Plot Monolix Individual Fits Only available for Continuous data. — plotIndividualFits","text":"ggplot object","code":""},{"path":[]},{"path":"/reference/plotIndividualFits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Plot Monolix Individual Fits Only available for Continuous data. — plotIndividualFits","text":"","code":"initializeLixoftConnectors(software = \"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()   runConditionalDistributionSampling()   runConditionalModeEstimation()      plotIndividualFits()      plotIndividualFits(settings=list(popFits=T))   plotIndividualFits(settings=list(obsLines=T, obsDots=F, predInterval=T))   plotIndividualFits(settings=list(dosingTimes=T))      # stratification options   plotIndividualFits(stratify=list(ids=c(1, 2, 3, 4)))   plotIndividualFits(stratify=list(filter=list(name=\"WEIGHT\", interval=c(75, 100))))   plotIndividualFits(stratify=list(filter=list(name=\"SEX\", cat =\"F\")))   plotIndividualFits(stratify=list(colorGroup=list(name=\"SEX\"), colors=c(\"#5DC088\", \"#DBA92B\")))   plotIndividualFits(     settings=list(legend=T),     stratify = list(colorGroup=list(list(name = \"SEX\"),                                     list(name = \"WEIGHT\", breaks = 70)))   )    # settings and preferences options   plotIndividualFits(settings=list(ylog=T, ylim=c(0.8, 11)))   preferences <- list(popFits=list(lineType=\"solid\", legend=\"Population fits\"))   plotIndividualFits(settings=list(popFits=T), preferences=preferences)      data <- getChartsData(plotName=\"plotIndividualFits\",                         computeSettings=list(indivEstimate=\"mean\"),                         ids=c(1, 2, 3, 4))   plotIndividualFits(data=data)"},{"path":"/reference/plotMCMC.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Plot MCMC convergence — plotMCMC","title":"[Monolix] Plot MCMC convergence — plotMCMC","text":"[Monolix] Plot MCMC convergence","code":""},{"path":"/reference/plotMCMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Plot MCMC convergence — plotMCMC","text":"","code":"plotMCMC(settings = list(), data = NULL)"},{"path":"/reference/plotMCMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Plot MCMC convergence — plotMCMC","text":"settings list optional settings: grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. data List charts data dataframe - Output getChartsData (getChartsData(\"plotMCMC\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotMCMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Plot MCMC convergence — plotMCMC","text":"TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotMCMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Plot MCMC convergence — plotMCMC","text":"","code":"initializeLixoftConnectors(software = \"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()   runConditionalDistributionSampling()      plotMCMC()"},{"path":"/reference/plotNCAIndividualFits.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Generate NCA individual fits (elimination) — plotNCAIndividualFits","title":"[PKanalix] Generate NCA individual fits (elimination) — plotNCAIndividualFits","text":"[PKanalix] Generate NCA individual fits (elimination)","code":""},{"path":"/reference/plotNCAIndividualFits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Generate NCA individual fits (elimination) — plotNCAIndividualFits","text":"","code":"plotNCAIndividualFits(   data = NULL,   settings = list(),   preferences = list(),   stratify = list() )"},{"path":"/reference/plotNCAIndividualFits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Generate NCA individual fits (elimination) — plotNCAIndividualFits","text":"data List charts data dataframe - Output getChartsData ((getChartsData(\"plotNCAIndividualFits\", ...)) data specified, charts data computed inside function. settings List following settings obsDots (bool) - TRUE individual observations displayed dots (default TRUE). obsLines (bool) - TRUE individual observations displayed lines (default FALE). cens (bool) - TRUE censoring data displayed dots (default TRUE). obsUnused (bool) - TRUE (dots set TRUE),   individual observations used lambda z calculation displayed dots (default TRUE). obsUnusedColor - obsUnused TRUE, unused data can colored color used observation   (colored), unused data can colored grey (greyed)   (default greyed). lambda_z (bool) - TRUE individual fits displayed (default TRUE). dosingTimes (bool) - Add dosing times vertical lines (default FALSE). splitOccasions (bool) - TRUE occasions displayed separate plots (default TRUE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). xlog (bool) add (TRUE) / remove (FALSE) log scaling x axis (default FALSE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default TRUE). xlab (string) label x axis (default \"Time\"). ylab (string) label y axis (default \"Concentration\"). ncol (int) number columns facet = TRUE (default 4). xlim (c(double, double)) limits x axis. ylim (c(double, double)) limits y axis. fontsize (integer) Plot text font size. units (boolean) Set units axis labels (default TRUE). scales (string) scales fixed (\"fixed\"),   free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). preferences (optional) preferences plot display, run getPlotPreferences(\"plotNCAIndividualFits\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined","code":""},{"path":"/reference/plotNCAIndividualFits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Generate NCA individual fits (elimination) — plotNCAIndividualFits","text":"ggplot object","code":""},{"path":[]},{"path":"/reference/plotNCAIndividualFits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Generate NCA individual fits (elimination) — plotNCAIndividualFits","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)    runNCAEstimation()      plotNCAIndividualFits()     # display   plotNCAIndividualFits(stratify = list(ids = c(1, 2, 3)),                         settings = list(obsDots = T, lambda_z = T))   plotNCAIndividualFits(stratify = list(ids = c(1, 2, 3)),                         settings = list(obsDots = F, obsLines = T, lambda_z = T))      # stratification   plotNCAIndividualFits(stratify = list(ids = c(1, 2, 3, 4),                                         filter = list(name = \"Period\", cat = 1)))   plotNCAIndividualFits(stratify = list(ids = c(1, 2, 3, 4, 5),                                         colorGroup = list(name = \"SEQ\"),                                         colors = c(\"#5DC088\", \"#DBA92B\")))   plotNCAIndividualFits(stratify = list(colorGroup = list(list(name = \"AGE\", breaks = 25),                                                           list(name = \"Period\"))))   # update settings and preferences   plotNCAIndividualFits(stratify = list(ids = c(1, 4)),                         settings = list(ylog = TRUE, scales = \"fixed\"))   plotNCAIndividualFits(settings = list(ncol = 5))   plotNCAIndividualFits(settings = list(splitOccasions = FALSE, ncol = 5))   preferences <- list(lambda_z = list(color = \"pink\", lineWidth = 1))   plotNCAIndividualFits(stratify = list(ids = c(4, 5, 6)), preferences = preferences)      # pre compute dataset   data <- getChartsData(plot = \"plotNCAIndividualFits\", ids = c(1, 2))   plotNCAIndividualFits(data = data)"},{"path":"/reference/plotNCAParametersCorrelation.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Correlation between individual parameters — plotNCAParametersCorrelation","title":"[PKanalix] Correlation between individual parameters — plotNCAParametersCorrelation","text":"[PKanalix] Correlation individual parameters","code":""},{"path":"/reference/plotNCAParametersCorrelation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Correlation between individual parameters — plotNCAParametersCorrelation","text":"","code":"plotNCAParametersCorrelation(   parametersRows = NULL,   parametersColumns = NULL,   settings = list(),   preferences = NULL,   stratify = list(),   data = NULL )"},{"path":"/reference/plotNCAParametersCorrelation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Correlation between individual parameters — plotNCAParametersCorrelation","text":"parametersRows vector name NCA parameters display rows (default first 4 computed parameters displayed). parametersColumns vector name NCA parameters display columns (default parametersColumns = parametersRows). settings List following settings regressionLine (bool) TRUE, Add regression line scatterplots (default TRUE). spline (bool) TRUE, Add xpline scatterplots (default FALSE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. preferences (optional) preferences plot display, run getPlotPreferences(\"plotNCAParametersCorrelation\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List charts data dataframe - Output getChartsData (getChartsData(\"plotNCAParametersCorrelation\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotNCAParametersCorrelation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Correlation between individual parameters — plotNCAParametersCorrelation","text":"ggplot object one element parametersRows parametersColumns, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotNCAParametersCorrelation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Correlation between individual parameters — plotNCAParametersCorrelation","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)    runNCAEstimation()      plotNCAParametersCorrelation(settings = list(spline = TRUE))   plotNCAParametersCorrelation(parametersRows = c(\"AUCINF_obs\", \"Cl_F_obs\"))   plotNCAParametersCorrelation(parametersRows = c(\"AUCINF_obs\", \"Cl_F_obs\"),                                parametersColumns = c(\"AUCINF_obs\", \"Tmax\"))      plotNCAParametersCorrelation(parametersRows = \"AUCINF_obs\", parametersColumns = \"Cl_F_obs\",                                settings = list(spline = TRUE))   plotNCAParametersCorrelation(parametersRows = c(\"AUCINF_obs\", \"Tmax\"))      # stratification   plotNCAParametersCorrelation(parametersRows = \"AUCINF_obs\", parametersColumns = \"Cl_F_obs\",                                stratify = list(filter = list(name = \"AGE\", interval = c(25, 30))))   plotNCAParametersCorrelation(parametersRows = \"AUCINF_obs\", parametersColumns = \"Tmax\",                                stratify = list(splitGroup = list(name = \"AGE\", breaks = c(25))))   plotNCAParametersCorrelation(parametersRows = \"AUCINF_obs\", parametersColumns = \"Tmax\",                                stratify = list(colorGroup = list(name = \"HT\", breaks = 181)))   plotNCAParametersCorrelation(     parametersRows = \"AUCINF_obs\", parametersColumns = \"Tmax\", settings=list(legend=T),     stratify = list(splitGroup = list(list(name = \"AGE\", breaks = 25),                                       list(name = \"HT\", breaks = 180)))   )      # update preferences and settings   preferences <- list(obs = list(color = \"#51B613\"))   plotNCAParametersCorrelation(parametersRows = \"AUCINF_obs\", parametersColumns = \"Tmax\",                                preferences = preferences)      # pre compute dataset                      data <- getChartsData(plotName = \"plotNCAParametersCorrelation\")   plotNCAParametersCorrelation(data = data, settings = list(spline = TRUE))     parameters <- c(\"Lambda_z\", \"AUClast\", \"Clast\", \"Cmax\")   plotNCAParametersCorrelation(parametersRows = parameters)"},{"path":"/reference/plotNCAParametersDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Distribution of the individual parameters — plotNCAParametersDistribution","title":"[PKanalix] Distribution of the individual parameters — plotNCAParametersDistribution","text":"[PKanalix] Distribution individual parameters","code":""},{"path":"/reference/plotNCAParametersDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Distribution of the individual parameters — plotNCAParametersDistribution","text":"","code":"plotNCAParametersDistribution(   parameters = NULL,   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotNCAParametersDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Distribution of the individual parameters — plotNCAParametersDistribution","text":"parameters vector nca parameters display. (default first 4 computed nca parameters displayed). settings List following settings plot Type plot: probability density distribution (\"pdf\"), cumulative density distribution (\"cdf\") (default \"pdf\"). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. scales (string) scales fixed (\"fixed\"),   free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). preferences (optional) preferences plot display, run getPlotPreferences(\"plotNCAParametersDistribution\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List charts data dataframe - Output getChartsData (getChartsData(\"plotNCAParametersDistribution\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotNCAParametersDistribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Distribution of the individual parameters — plotNCAParametersDistribution","text":"ggplot object one parameter, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotNCAParametersDistribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Distribution of the individual parameters — plotNCAParametersDistribution","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)    runNCAEstimation()      plotNCAParametersDistribution(parameters = \"AUCINF_obs\", settings = list(plot = \"pdf\"))   plotNCAParametersDistribution(parameters = \"Lambda_z\", settings = list(plot = \"cdf\"))      # stratification   plotNCAParametersDistribution(parameters = \"AUClast\",                                 stratify = list(filter = list(name = \"AGE\", interval = c(25, 30))))   plotNCAParametersDistribution(parameters = \"Cmax\",                                 stratify = list(splitGroup = list(name = \"AGE\", breaks = c(25))))   plotNCAParametersDistribution(parameters = \"Tmax\", settings = list(plot = \"pdf\"),                                 stratify = list(colorGroup = list(name = \"HT\", breaks = 181)))   plotNCAParametersDistribution(parameters = \"AUCINF_obs\", settings = list(plot = \"cdf\"),                                 stratify = list(colorGroup = list(name = \"HT\", breaks = 181),                                 colors = c(\"#46B4AF\", \"#B4468A\")))   plotNCAParametersDistribution(     parameters = \"Tmax\", settings=list(legend=T),     stratify = list(splitGroup = list(list(name = \"AGE\", breaks = 25),                                       list(name = \"Period\")))   )    # pre compute dataset   data <- getChartsData(\"plotNCAParametersDistribution\")   plotNCAParametersDistribution(data = data, parameters = \"AUClast\")      # display multiple parameters   plotNCAParametersDistribution()   plotNCAParametersDistribution(settings = list(plot = \"cdf\"))   parameters <- c(\"Lambda_z\", \"AUClast\", \"Clast\", \"Cmax\")   plotNCAParametersDistribution(parameters = parameters)   plotNCAParametersDistribution(parameters = parameters, settings = list(plot = \"cdf\"))   plotNCAParametersDistribution(parameters = parameters, settings = list(plot = \"pdf\"))"},{"path":"/reference/plotNCAParametersVsCovariates.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Individual NCA parameter vs covariate plot — plotNCAParametersVsCovariates","title":"[PKanalix] Individual NCA parameter vs covariate plot — plotNCAParametersVsCovariates","text":"[PKanalix] Individual NCA parameter vs covariate plot","code":""},{"path":"/reference/plotNCAParametersVsCovariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Individual NCA parameter vs covariate plot — plotNCAParametersVsCovariates","text":"","code":"plotNCAParametersVsCovariates(   parameters = NULL,   covariates = NULL,   settings = list(),   preferences = NULL,   stratify = list(),   data = NULL )"},{"path":"/reference/plotNCAParametersVsCovariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Individual NCA parameter vs covariate plot — plotNCAParametersVsCovariates","text":"parameters vector nca parameters display. (default first 4 computed nca parameters displayed). covariates vector covariates display. (default first 4 covariates displayed). settings List following settings regressionLine (bool) TRUE, Add regression line scatterplots (default TRUE). spline (bool) TRUE, Add xpline scatterplots (default FALSE). boxplotData (string) categorical covariate, boxplotData NULL, data added dots boxplot. can either \"spread\" box \"aligned\" (default NULL) legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. preferences (optional) preferences plot display, run getPlotPreferences(\"plotNCAParametersVsCovariates\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data Charts data dataframe - Output getChartsData (getChartsData(\"plotNCAParametersVsCovariates\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotNCAParametersVsCovariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[PKanalix] Individual NCA parameter vs covariate plot — plotNCAParametersVsCovariates","text":"ggplot object one element covariatesRows covariatesColumns, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotNCAParametersVsCovariates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Individual NCA parameter vs covariate plot — plotNCAParametersVsCovariates","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)    runNCAEstimation()      plotNCAParametersVsCovariates(covariates=\"AGE\", parameters=\"AUClast\", settings=list(spline=T))   plotNCAParametersVsCovariates(covariates=\"FORM\", parameters=\"Cl_F_obs\")      # stratification   plotNCAParametersVsCovariates(     covariates=\"HT\", parameters=\"AUClast\",     stratify=list(filter=list(name=\"AGE\", interval=c(25, 30)))   )   plotNCAParametersVsCovariates(     covariates=\"WT\", parameters=\"AUClast\",     stratify=list(splitGroup=list(name=\"AGE\", breaks=c(25)))   )   plotNCAParametersVsCovariates(     covariates=\"AGE\", parameters=\"AUClast\",     stratify=list(colorGroup=list(name=\"HT\", breaks=181))   )   plotNCAParametersVsCovariates(     covariates=\"SEQ\", parameters=\"AUClast\",     stratify=list(colorGroup=list(name=\"HT\", breaks=181),                   colors=c(\"#175C8C\", \"#ABD3EF\"))   )   plotNCAParametersVsCovariates(     covariates=\"SEQ\", parameters=\"AUClast\", settings=list(legend=T),     stratify = list(colorGroup = list(list(name = \"AGE\", breaks = 25),                                       list(name = \"Period\")))   )   # update settings and preferences   plotNCAParametersVsCovariates(     covariates=\"SEQ\", parameters=\"Tmax\",     settings=list(legend=T)   )   preferences <- list(spline=list(lineType=\"dashed\"))   plotNCAParametersVsCovariates(covariates=\"AGE\", parameter=\"Tmax\",                                 settings=list(regressionLine=F, spline=T),                                 preferences=preferences)      # pre compute dataset   data <- getChartsData(plotName=\"plotNCAParametersVsCovariates\")   plotNCAParametersVsCovariates(data=data)      parameters <- c(\"Lambda_z\", \"AUClast\", \"Clast\", \"Cmax\")   covariates <- c(\"AGE\", \"WT\", \"FORM\")   plotNCAParametersVsCovariates()   plotNCAParametersVsCovariates(parameters=parameters, covariates=covariates)"},{"path":"/reference/plotNpc.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Plot Numerical predictive checks — plotNpc","title":"[Monolix] Plot Numerical predictive checks — plotNpc","text":"[Monolix] Plot Numerical predictive checks","code":""},{"path":"/reference/plotNpc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Plot Numerical predictive checks — plotNpc","text":"","code":"plotNpc(   obsName = NULL,   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotNpc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Plot Numerical predictive checks — plotNpc","text":"obsName (string) Name observation (dataset header). default first observation considered. settings list optional settings: level (int) level prediction intervals computation (default 90). nbPoints (int) Number points cdf grid computation (default 100). useCensored (bool) Choose use BLQ data (TRUE) ignore (FALSE) compute VPC (default TRUE). continuous data . censoring (string) BLQ data can simulated ('simulated'), can equal limit quantification ('loq') (default 'simulated'). continuous data . empirical (bool) - TRUE, Empirical data displayed (default TRUE):  empirical percentiles continuous data; empirical probability discrete data; empirical curve event data theoretical (bool) - TRUE, median displayed (default FALSE): median predicted percentiles predInterval (bool) - TRUE, Prediction interval displayed (default TRUE). outlierAreas (bool) -TRUE Add red areas indicating empirical percentiles outside prediction intervals (default TRUE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). xlog (bool) add (TRUE) / remove (FALSE) log scaling x axis (default FALSE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default FALSE). xlab (string) label x axis (default \"Time\"). ylab (string) label y axis (default obsName). ncol (int) number columns facet = TRUE (default 4). xlim (c(double, double)) limits x axis. ylim (c(double, double)) limits y axis. fontsize (integer) Plot text font size. scales (string) scales fixed (\"fixed\"), free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). preferences (optional) preferences plot display, run getPlotPreferences(\"plotNpc\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values. groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter. interval - case continuous covariate, list filtering intervals. data List charts data dataframe - Output getChartsData (getChartsData(\"plotNpc\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotNpc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Plot Numerical predictive checks — plotNpc","text":"ggplot2 object","code":""},{"path":[]},{"path":"/reference/plotNpc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Plot Numerical predictive checks — plotNpc","text":"","code":"initializeLixoftConnectors(software = \"monolix\")   # continuous data   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()      plotNpc(obsName = \"CONC\")"},{"path":"/reference/plotObservationsVsPredictions.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Plot Observation VS Prediction — plotObservationsVsPredictions","title":"[Monolix] Plot Observation VS Prediction — plotObservationsVsPredictions","text":"[Monolix] Plot Observation VS Prediction","code":""},{"path":"/reference/plotObservationsVsPredictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Plot Observation VS Prediction — plotObservationsVsPredictions","text":"","code":"plotObservationsVsPredictions(   obsName = NULL,   predictions = c(\"indiv\"),   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotObservationsVsPredictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Plot Observation VS Prediction — plotObservationsVsPredictions","text":"obsName (string) Name observation (dataset header). default first observation considered. predictions (string) LIst predictions display: population prediction (\"pop\"), individual prediction (\"indiv\") (default c(\"indiv\")). settings List following settings indivEstimate (string) Calculation individual estimates: conditional mean (\"mean\"), conditional mode EBE's (\"mode\"), conditional distribution (\"simulated\") (default \"mode\"). useCensored (bool) Choose use BLQ data (TRUE) ignore (FALSE) compute statistics (default TRUE). censoring (string) BLQ data can simulated ('simulated'), can equal limit quantification ('loq') (default 'simulated'). obs (bool) - TRUE observations displayed dots (default TRUE). cens (bool) - TRUE censoring data displayed red dots (default TRUE). spline (bool) - TRUE add spline (default FALSE). identityLine (bool) - TRUE add identity line (default TRUE). predInterval (bool) - TRUE add 90% prediction interval (default FALSE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). xlog (bool) add (TRUE) / remove (FALSE) log scaling x axis (default FALSE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default FALSE). ncol (int) number columns facet = TRUE (default 4). xlim (c(double, double)) limits x axis. ylim (c(double, double)) limits y axis. fontsize (integer) Plot text font size. scales (string) scales fixed (\"fixed\"), free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). ylab (string) label y axis (default \"Observations\"). preferences (optional) preferences plot display, run getPlotPreferences(\"plotObservationsVsPredictions\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List cahrts data dataframe - Output getChartsData (getChartsData(\"plotObservationsVsPredictions\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotObservationsVsPredictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Plot Observation VS Prediction — plotObservationsVsPredictions","text":"ggplot object one prediction type, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotObservationsVsPredictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Plot Observation VS Prediction — plotObservationsVsPredictions","text":"","code":"initializeLixoftConnectors(software = \"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()   runConditionalDistributionSampling()   runConditionalModeEstimation()      plotObservationsVsPredictions()   plotObservationsVsPredictions(predictions = \"pop\")   plotObservationsVsPredictions(prediction = \"indiv\", settings = list(indivEstimate = \"simulated\"))   plotObservationsVsPredictions(settings = list(indivEstimate = \"mean\", spline = TRUE))   plotObservationsVsPredictions(settings = list(indivEstimate = \"mode\", predInterval = TRUE))      # stratification   plotObservationsVsPredictions(stratify = list(filter = list(name = \"SEX\", cat = \"F\")))   plotObservationsVsPredictions(settings = list(ylog = TRUE, xlog = TRUE))   plotObservationsVsPredictions(stratify = list(splitGroup = list(name = \"WEIGHT\", breaks = c(75))))   plotObservationsVsPredictions(stratify = list(colorGroup = list(name = \"WEIGHT\", breaks = c(75))))   plotObservationsVsPredictions(     settings=list(legend=T),     stratify = list(colorGroup=list(list(name = \"SEX\"),                                     list(name = \"WEIGHT\", breaks = 70)))   )    data <- getChartsData(plotName = \"plotObservationsVsPredictions\",                         computeSettings = list(indivEstimate = \"simulated\"),                         colorGroup = list(name = \"WEIGHT\", breaks = c(75)))   plotObservationsVsPredictions(data = data)      # display multiple predictions   plotObservationsVsPredictions(predictions = c(\"pop\", \"indiv\"))"},{"path":"/reference/plotObservedData.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Generate Observation plots — plotObservedData","title":"[Monolix - PKanalix] Generate Observation plots — plotObservedData","text":"[Monolix - PKanalix] Generate Observation plots","code":""},{"path":"/reference/plotObservedData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Generate Observation plots — plotObservedData","text":"","code":"plotObservedData(   obsName = NULL,   data = NULL,   settings = list(),   stratify = list(),   preferences = list() )"},{"path":"/reference/plotObservedData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Generate Observation plots — plotObservedData","text":"obsName (string) Name observation (dataset header). default first observation considered. data List charts data dataframe - Output getChartsData (getChartsData(\"plotObservedData\", ...)) data specified, charts data computed inside function. settings List following settings [CONTINUOUS - DISCRETE] Settings specific continuous discrete data dots (bool) - TRUE individual observations displayed dots (default TRUE). lines (bool) - TRUE individual observations displayed lines (default TRUE). mean (bool) - TRUE mean observations displayed (default FALSE). error (bool) TRUE error bar displayed (default FALSE). meanMethod (string) - mean set TRUE, display arithmetic mean (\"arithmetic\")   geometric mean (\"geometric\"). Default value \"arithmetic\". errorMethod (string) - error set TRUE, display standard deviation (\"standardDeviation\")   standard error (\"standardError\"). Default value \"standardDeviation\". useCensored (bool) Choose use censored data compute mean error (TRUE)   ignore (FALSE) (default FALSE). binLimits (bool) - Add bins limits vertical lines (default FALSE). binsSettings list settings time axis binning observation statistics computation: criteria (string) - Bining criteria, one 'equalwidth', 'equalsize', 'leastsquare' methods.     (default leastsquare). .fixedNbBins (bool) - TRUE define fixed number bins, else define range automatic selection     (default FALSE). nbBins (int) - Define fixed number bins (default 10). binRange (vector(int, int)) - Define range number bins (default c(5, 100)). nbBinData (vector(int, int)) - Define range number data points per bin (default c(10, 200) Monolix c(3, 200) PKanalix). [DISCRETE] Settings specific discrete data plot (string) Type plot: \"continuous\" (default), \"stacked\" \"grouped\". histogramColors (vector<string>) List colors use histograms plots. [EVENT] Settings specific event data eventPlot - Display Survival function (\"survivalFunction\") mean number   events per subject (\"averageEventNumber\") (default \"survivalFunction\"). settings cens (boolean) - TRUE censored data displayed dots, addition survival function (default TRUE). dosingTimes (boolean) - Add dosing times vertical lines (default FALSE).   project dose information legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) - Add (TRUE) / remove (FALSE) plot grid (default TRUE). xlog (bool) - Add (TRUE) / remove (FALSE) log scaling x axis (default FALSE). ylog (bool) - Add (TRUE) / remove (FALSE) log scaling y axis (default FALSE). xlab (string) - Label x axis (default \"Time\"). ylab (string) - Label y axis (default obsName). ncol (int) - Number columns facet = TRUE (default 4). xlim (c(double, double)) - Limits x axis. ylim (c(double, double)) - Limits y axis. fontsize (integer) - Plot text font size. units (boolean) - Set units axis labels (available PKanalix). scales (string) scales fixed (\"fixed\"),   free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined preferences (optional) preferences plot display, run getPlotPreferences(\"plotObservedData\") check available displays.","code":""},{"path":"/reference/plotObservedData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix - PKanalix] Generate Observation plots — plotObservedData","text":"ggplot object","code":""},{"path":[]},{"path":"/reference/plotObservedData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Generate Observation plots — plotObservedData","text":"","code":"initializeLixoftConnectors(software = \"pkanalix\")   project <- file.path(getDemoPath(), \"2.case_studies/project_Theo_extravasc_SD.pkx\")   loadProject(project)      plotObservedData()   plotObservedData(settings = list(binLimits = TRUE))   plotObservedData(settings = list(dosingTimes = TRUE))   plotObservedData(settings = list(meanMethod = \"geometric\", mean = TRUE))   plotObservedData(settings = list(mean = TRUE, error = TRUE, dots = FALSE, lines = TRUE))      # stratification   plotObservedData(stratify = list(splitGroup = list(name = \"AGE\", breaks = 25),                                    filter = list(name = \"Period\", cat = 1)))   plotObservedData(stratify = list(colorGroup = list(name = \"HT\", breaks = 181)))   plotObservedData(stratify = list(splitGroup = list(list(name = \"AGE\", breaks = 25),                                                      list(name = \"Period\"))))   # update plot theme or preferences   plotObservedData(settings = list(xlab = \"Time\", ylab = \"Plasma Concentration\"))   plotObservedData(preferences = list(obs = list(color = \"#32CD32\"),                                       observationStatistics = list(lineType = \"dashed\")))"},{"path":"/reference/plotParametersDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Distribution of the individual parameters computed by Monolix — plotParametersDistribution","title":"[Monolix] Distribution of the individual parameters computed by Monolix — plotParametersDistribution","text":"[Monolix] Distribution individual parameters computed Monolix","code":""},{"path":"/reference/plotParametersDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Distribution of the individual parameters computed by Monolix — plotParametersDistribution","text":"","code":"plotParametersDistribution(   parameters = NULL,   plot = \"pdf\",   settings = list(),   preferences = NULL,   stratify = list(),   data = NULL )"},{"path":"/reference/plotParametersDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Distribution of the individual parameters computed by Monolix — plotParametersDistribution","text":"parameters vector parameters display. (default first 4 computed parameters displayed). plot (string) Type plot: probability density distribution (\"pdf\"), cumulative density distribution (\"cdf\") (default \"pdf) settings list optional plot settings: indivEstimate Calculation individual estimates: conditional mean (\"mean\"), conditional mode EBE's (\"mode\"), conditional distribution (\"simulated\") (default \"simulated\"). empirical (bool) TRUE, plot empirical density distribution (default TRUE). theoretical (bool) TRUE, plot theoretical density distribution (default TRUE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. preferences (optional) preferences plot display, run getPlotPreferences(\"plotParametersDistribution\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List charts data dataframe - Output getChartsData (getChartsData(\"plotParametersDistribution\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotParametersDistribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Distribution of the individual parameters computed by Monolix — plotParametersDistribution","text":"ggplot object one parameter, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotParametersDistribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Distribution of the individual parameters computed by Monolix — plotParametersDistribution","text":"","code":"initializeLixoftConnectors(software=\"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()   runConditionalDistributionSampling()      plotParametersDistribution(parameters=\"ka\")   plotParametersDistribution(parameters=\"Cl\", plot=\"pdf\")   plotParametersDistribution(parameters=\"ka\", plot=\"cdf\")   plotParametersDistribution(parameters=\"ka\", plot=\"cdf\",                              settings=list(indivEstimate=\"simulated\"))   plotParametersDistribution(parameters=\"Cl\", plot=\"pdf\",                              settings=list(theoretical=F))      # stratification   plotParametersDistribution(stratify=list(filter=list(name=\"WEIGHT\", interval=c(0, 75))))   plotParametersDistribution(parameters=\"Cl\", stratify=list(splitGroup=list(name=\"SEX\")))   colorGroup <- list(name=\"WEIGHT\", breaks=c(75))   plotParametersDistribution(parameters= \"Cl\", plot=\"pdf\",                              stratify=list(colorGroup=colorGroup, colors=c(\"#46B4AF\", \"#B4468A\")))   plotParametersDistribution(parameters=\"Cl\", plot=\"cdf\",                              stratify=list(colorGroup=colorGroup, colors=c(\"#46B4AF\", \"#B4468A\")))      # update preferences   preferences = list(theoretical=list(color=\"#B4468A\", lineType=\"solid\", lineWidth=0.8))   plotParametersDistribution(parameters=\"ka\", plot=\"cdf\", preferences=preferences)                               # pre compute dataset   data <- getChartsData(plotName=\"plotParametersDistribution\",                         computeSettings=list(indivEstimate=\"simulated\"))   plotParametersDistribution(data=data)      # multiple plots   plotParametersDistribution(parameters=c(\"ka\", \"Cl\"))   plotParametersDistribution(plot=\"pdf\")   plotParametersDistribution(plot=\"cdf\")   plotParametersDistribution(plot=\"cdf\", settings=list(indivEstimate=\"simulated\"))   plotParametersDistribution(plot = \"pdf\", settings=list(theoretical=F))"},{"path":"/reference/plotParametersVsCovariates.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Individual monolix parameter vs covariate plot — plotParametersVsCovariates","title":"[Monolix] Individual monolix parameter vs covariate plot — plotParametersVsCovariates","text":"[Monolix] Individual monolix parameter vs covariate plot","code":""},{"path":"/reference/plotParametersVsCovariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Individual monolix parameter vs covariate plot — plotParametersVsCovariates","text":"","code":"plotParametersVsCovariates(   parameters = NULL,   covariates = NULL,   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotParametersVsCovariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Individual monolix parameter vs covariate plot — plotParametersVsCovariates","text":"parameters vector parameters display. (default first 4 computed parameters displayed). covariates vector covariates display. (default first 4 computed covariates displayed). settings List following settings indivEstimate Calculation individual estimates: conditional mean (\"mean\"), conditional mode EBE's (\"mode\"), conditional distribution (\"simulated\") (default \"simulated\"). parameterType (string) display random effect vs covariates (\"randomEffect\"), transformed individual parameters vs covariates (\"indivParameter\")  (default \"indivParameter\"). boxplotData (string) categorical covariate, boxplotData NULL, data added dots boxplot. can either \"spread\" box \"aligned\" (default NULL) regressionLine (bool) TRUE, Add regression line scatterplots (default TRUE). spline (bool) TRUE, Add xpline scatterplots (default FALSE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. preferences (optional) preferences plot display, run getPlotPreferences(\"plotParametersVsCovariates\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List charts data dataframe - Output getChartsData (getChartsData(\"plotParametersVsCovariates\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotParametersVsCovariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Individual monolix parameter vs covariate plot — plotParametersVsCovariates","text":"ggplot object one covariate one parameter argument, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotParametersVsCovariates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Individual monolix parameter vs covariate plot — plotParametersVsCovariates","text":"","code":"initializeLixoftConnectors(software=\"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()   runConditionalDistributionSampling()      # Individual parameters   plotParametersVsCovariates(covariates=\"SEX\", parameters=\"Cl\")   plotParametersVsCovariates(covariates=\"WEIGHT\", parameters=\"V\", settings=list(spline=T))   plotParametersVsCovariates(covariates=\"WEIGHT\", parameters=\"V\",                              settings=list(indivEstimate=\"simulated\"))                      # Random effects   plotParametersVsCovariates(covariates=\"SEX\", parameters=\"V\",                              settings=list(parameterType=\"randomEffect\"))   plotParametersVsCovariates(covariates=\"WEIGHT\", parameters=\"V\",                              settings=list(indivEstimate=\"simulated\", parameterType=\"randomEffect\"))      # Stratification   plotParametersVsCovariates(covariates=\"SEX\", parameters=\"ka\",                              stratify=list(filter=list(name=\"WEIGHT\", interval=c(0, 75))))   plotParametersVsCovariates(covariates=\"WEIGHT\", parameters=\"ka\",                              stratify=list(splitGroup=list(name=\"SEX\")))   plotParametersVsCovariates(covariates=\"SEX\", parameters=\"Cl\",                              stratify=list(colorGroup=list(name=\"WEIGHT\", breaks=75)))   plotParametersVsCovariates(covariates=\"WEIGHT\", parameters=\"V\",                              stratify=list(colorGroup=list(name=\"SEX\")))   plotParametersVsCovariates(covariates=\"WEIGHT\", parameters=\"V\",                              stratify = list(colorGroup = list(list(name = \"SEX\"),                                                                list(name=\"WEIGHT\", breaks=70))))    # pre process dataset   data <- getChartsData(plotName=\"plotParametersVsCovariates\",                         computeSettings=list(indivEstimate=\"simulated\"))   plotParametersVsCovariates(data=data)      # multiple plots   plotParametersVsCovariates()   plotParametersVsCovariates(covariates=\"WEIGHT\")   plotParametersVsCovariates(settings=list(indivEstimate=\"simulated\"))   plotParametersVsCovariates(settings=list(parameterType=\"randomEffect\"))   plotParametersVsCovariates(settings=list(parameterType=\"randomEffect\", indivEstimate=\"simulated\"))   plotParametersVsCovariates(stratify=list(colorGroup=list(name=\"WEIGHT\", breaks=75)))   plotParametersVsCovariates(stratify=list(colorGroup=list(name=\"SEX\")))"},{"path":"/reference/plotPredictionDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Plot distribution of the predictions — plotPredictionDistribution","title":"[Monolix] Plot distribution of the predictions — plotPredictionDistribution","text":"Note computation settings available connector 2021 version:  Number bands set 9 Level set 90","code":""},{"path":"/reference/plotPredictionDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Plot distribution of the predictions — plotPredictionDistribution","text":"","code":"plotPredictionDistribution(   obsName = NULL,   settings = list(),   preferences = list(),   data = NULL )"},{"path":"/reference/plotPredictionDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Plot distribution of the predictions — plotPredictionDistribution","text":"obsName (string) Name observation (dataset header). default first observation considered. settings list optional settings perc (bool) - TRUE display 9 Bands percentile (default TRUE). median (bool) - TRUE display Median (default TRUE). obs (bool) - TRUE display observations dots (default FALSE). cens (bool) - TRUE display censored observations dots (default FALSE). binLimits (bool) TRUE display limits bins (default FALSE). discrete data . legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). xlog (bool) add (TRUE) / remove (FALSE) log scaling x axis (default FALSE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default FALSE). xlab (string) label x axis (default \"Time\"). ylab (string) label y axis (default obsName). ncol (int) number columns facet = TRUE (default 4). xlim (c(double, double)) limits x axis. ylim (c(double, double)) limits y axis. fontsize (integer) Plot text font size. scales (string) scales fixed (\"fixed\"), free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). preferences (optional) preferences plot display, run getPlotPreferences(\"plotPredictionDistribution\") check available displays. data List charts data dataframe - Output getChartsData (getChartsData(\"plotPredictionDistribution\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotPredictionDistribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Plot distribution of the predictions — plotPredictionDistribution","text":"ggplot2 object","code":""},{"path":"/reference/plotPredictionDistribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix] Plot distribution of the predictions — plotPredictionDistribution","text":"Note stratification options available connector 2021 version:","code":""},{"path":[]},{"path":"/reference/plotPredictionDistribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Plot distribution of the predictions — plotPredictionDistribution","text":"","code":"initializeLixoftConnectors(software = \"monolix\")      # continuous data   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()    plotPredictionDistribution()"},{"path":"/reference/plotRandomEffectsCorrelation.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Correlations between random effect — plotRandomEffectsCorrelation","title":"[Monolix] Correlations between random effect — plotRandomEffectsCorrelation","text":"[Monolix] Correlations random effect","code":""},{"path":"/reference/plotRandomEffectsCorrelation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Correlations between random effect — plotRandomEffectsCorrelation","text":"","code":"plotRandomEffectsCorrelation(   parametersRows = NULL,   parametersColumns = NULL,   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotRandomEffectsCorrelation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Correlations between random effect — plotRandomEffectsCorrelation","text":"parametersRows vector name parameters display rows (default first 4 computed parameters displayed). parametersColumns vector name parameters display columns (default parametersColumns = parametersRows). settings List following settings indivEstimate Calculation individual estimates: conditional mean (\"mean\"), conditional mode EBE's (\"mode\"), conditional distribution (\"simulated\") (default \"simulated\"). variabilityLevel (string) case IOV conditional distribution computed plot displayed one given level variability (default NULL) NULL, variability level ID + Occasions Run getVariabilityLevels() see available levels variability regressionLine (bool) TRUE, Add regression line scatterplots (default TRUE). spline (bool) TRUE, Add xpline scatterplots (default FALSE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. preferences (optional) preferences plot display, run getPlotPreferences(\"plotRandomEffectsCorrelation\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List charts data dataframe - Output getChartsData (getChartsData(\"plotRandomEffectsCorrelation\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotRandomEffectsCorrelation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Correlations between random effect — plotRandomEffectsCorrelation","text":"ggplot object one element parametersRows parametersColumns, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotRandomEffectsCorrelation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Correlations between random effect — plotRandomEffectsCorrelation","text":"","code":"initializeLixoftConnectors(software = \"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()   runConditionalDistributionSampling()      plotRandomEffectsCorrelation()      plotRandomEffectsCorrelation(parametersRows = \"ka\", parametersColumns = \"V\",                                settings = list(indivEstimate = \"simulated\"))   plotRandomEffectsCorrelation(parametersRows = \"ka\", parametersColumns = \"V\",                                settings = list(spline = TRUE))                                                                   plotRandomEffectsCorrelation(parametersRows = c(\"ka\", \"V\"))      # stratification   plotRandomEffectsCorrelation(parametersRows = \"ka\", parametersColumns = \"V\",                                stratify = list(filter = list(name = \"SEX\", cat = \"M\")))   plotRandomEffectsCorrelation(parametersRows = \"ka\", parametersColumns = \"V\",                                stratify = list(                                  colorGroup = list(name = \"WEIGHT\", breaks = 75),                                  colors = c(\"#46B4AF\", \"#B4468A\")))   plotRandomEffectsCorrelation(parametersRows = \"ka\", parametersColumns = \"V\",                                stratify = list(splitGroup = list(name = \"SEX\")))                                   plotRandomEffectsCorrelation(parametersRows = \"ka\", parametersColumns = \"V\",                                stratify = list(splitGroup = list(list(name = \"SEX\"),                                                                  list(name=\"WEIGHT\", breaks=70))))     # pre compute dataset   data <- getChartsData(plotName = \"plotRandomEffectsCorrelation\",                         computeSettings = list(indivEstimate = \"simulated\"))   plotRandomEffectsCorrelation(data = data)      plotRandomEffectsCorrelation(settings = list(indivEstimate = \"mean\"))"},{"path":"/reference/plotResidualsDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Generate Distribution of the residuals — plotResidualsDistribution","title":"[Monolix] Generate Distribution of the residuals — plotResidualsDistribution","text":"[Monolix] Generate Distribution residuals","code":""},{"path":"/reference/plotResidualsDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Generate Distribution of the residuals — plotResidualsDistribution","text":"","code":"plotResidualsDistribution(   obsName = NULL,   residuals = c(\"indiv\", \"npde\"),   plots = c(\"pdf\", \"cdf\"),   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotResidualsDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Generate Distribution of the residuals — plotResidualsDistribution","text":"obsName (string) Name observation (dataset header). default first observation considered. residuals (string) List residuals display: population residuals (\"pop\"), individual residuals (\"indiv\"), normalized prediction distribution error (\"npde\") (default c(\"indiv\", \"npde)). plots Type plots: probability density distribution (\"pdf\"), cumulative density distribution (\"cdf\") (default c(\"pdf\", \"cdf\")). settings List following settings indivEstimate (string) Calculation individual estimates: conditional mean (\"mean\"), conditional mode EBE's (\"mode\"), conditional distribution (\"simulated\") (default \"simulated\"). useCensored (bool) Choose use BLQ data (TRUE) ignore (FALSE) compute statistics (default TRUE). continuous data . censoring (string) BLQ data can simulated ('simulated'), can equal limit quantification ('loq') (default 'simulated'). continuous data . legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. preferences (optional) preferences plot display, run getPlotPreferences(\"plotResidualsDistribution\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List charts data dataframe - Output getChartsData (getChartsData(\"plotResidualsDistribution\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotResidualsDistribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Generate Distribution of the residuals — plotResidualsDistribution","text":"ggplot object one prediction type, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotResidualsDistribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Generate Distribution of the residuals — plotResidualsDistribution","text":"","code":"initializeLixoftConnectors(software=\"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()   runConditionalDistributionSampling()    plotResidualsDistribution()   plotResidualsDistribution(residuals=\"indiv\", settings=list(indivEstimate=\"simulated\"))   plotResidualsDistribution(residuals=\"indiv\", settings=list(indivEstimate=\"mode\"))   plotResidualsDistribution(residuals=\"pop\", plots=\"pdf\")   plotResidualsDistribution(residuals=\"npde\", plots=\"cdf\")   plotResidualsDistribution(stratify=list(filter=list(name=\"SEX\", cat=\"F\")))   plotResidualsDistribution(stratify=list(splitGroup=list(name=\"WEIGHT\", breaks=c(75))))   plotResidualsDistribution(     residuals=\"indiv\", settings=list(legend=T),     stratify = list(splitGroup=list(list(name = \"SEX\"),                                     list(name = \"WEIGHT\", breaks = 70)))   )    data <- getChartsData(plotName=\"plotResidualsDistribution\",                         computeSettings=list(indivEstimate=\"simulated\"))   plotResidualsDistribution(data=data)      plotResidualsDistribution()   plotResidualsDistribution(residuals=c(\"indiv\", \"npde\"), settings=list(indivEstimate=\"simulated\"))   plotResidualsDistribution(residuals=c(\"pop\", \"indiv\"), settings=list(indivEstimate=\"mode\"))   plotResidualsDistribution(plots=c(\"pdf\", \"cdf\"))   plotResidualsDistribution(plots=c(\"cdf\"))   plotResidualsDistribution(residuals=\"npde\")"},{"path":"/reference/plotResidualsScatterPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Generate Scatter plots of the residuals — plotResidualsScatterPlot","title":"[Monolix] Generate Scatter plots of the residuals — plotResidualsScatterPlot","text":"Note 'prediction interval' setting available 2021 version connector.","code":""},{"path":"/reference/plotResidualsScatterPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Generate Scatter plots of the residuals — plotResidualsScatterPlot","text":"","code":"plotResidualsScatterPlot(   obsName = NULL,   residuals = c(\"indiv\"),   xaxis = c(\"time\", \"prediction\"),   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotResidualsScatterPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Generate Scatter plots of the residuals — plotResidualsScatterPlot","text":"obsName (string) Name observation (dataset header). default first observation considered. residuals (string) List residuals display: population residuals (\"pop\"), individual residuals (\"indiv\"), normalized prediction distribution error (\"npde\") (default c(\"indiv\")). xaxis (string) List x-axis display: time (\"time\"), prediction (\"prediction\") (default c(\"time\", \"prediction\") continuous data, c(\"time\") discrete data). settings List following settings indivEstimate (string) Calculation individual estimates: conditional mean (\"mean\"), conditional mode EBE's (\"mode\"), conditional distribution (\"simulated\") (default \"mode\"). continuous data level (int) level prediction intervals computation (default 90). higherPercentile (int) Higher percentile empirical predicted percentiles computation (default 90). useCensored (bool) Choose use BLQ data (TRUE) ignore (FALSE) compute statistics (default TRUE). continuous data . censoring (string) BLQ data can simulated ('simulated'), can equal limit quantification ('loq') (default 'simulated'). continuous data . binsSettings list settings bins: criteria (string) Bining criteria, one 'equalwidth', 'equalsize', 'leastsquare' methods. (default leastsquare). .fixedNbBins (bool) TRUE define fixed number bins, else define range automatic selection (default TRUE). nbBins (int) Define fixed number bins (default 10). binRange (vector(int, int)) Define range number bins (default c(5, 100)). nbBinData (vector(int, int)) Define range number data points per bin (default c(10, 200)). residuals (bool) - TRUE display residuals (default TRUE). cens (bool) - TRUE display censored data (default TUE). empPercentiles (bool) - TRUE display empirical percentiles (default FALSE). predPercentiles (bool) - TRUE display predicted percentiles (default FALSE). spline (bool) - TRUE display spline (default FALSE). binLimits (bool) - TRUE Add bins limits vertical lines (default FALSE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). xlog (bool) add (TRUE) / remove (FALSE) log scaling x axis (default FALSE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default FALSE). ncol (int) number columns facet = TRUE (default 4). xlim (c(double, double)) limits x axis. ylim (c(double, double)) limits y axis. fontsize (integer) Plot text font size. scales (string) scales fixed (\"fixed\"), free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). preferences (optional) preferences plot display, run getPlotPreferences(\"plotResidualsScatterPlot\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List cahrts data dataframe - Output getChartsData (getChartsData(\"plotResidualsScatterPlot\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotResidualsScatterPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Generate Scatter plots of the residuals — plotResidualsScatterPlot","text":"ggplot object one prediction type, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotResidualsScatterPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Generate Scatter plots of the residuals — plotResidualsScatterPlot","text":"","code":"initializeLixoftConnectors(software=\"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()   runConditionalDistributionSampling()   runConditionalModeEstimation()      plotResidualsScatterPlot()   plotResidualsScatterPlot(residuals=\"indiv\", settings=list(indivEstimate=\"simulated\"))   plotResidualsScatterPlot(residuals=\"indiv\", settings=list(indivEstimate=\"mode\"))   plotResidualsScatterPlot(xaxis=\"prediction\", residuals=\"pop\")   plotResidualsScatterPlot(xaxis=\"time\", residuals=\"pop\")   plotResidualsScatterPlot(residuals=\"npde\")   plotResidualsScatterPlot(settings=list(spline=T))   plotResidualsScatterPlot(settings=list(empPercentiles=T, level=90,                                          binsSettings=list(is.fixedNbBins=T, nbBins=5),                                          binLimits=T))                              # Stratification   plotResidualsScatterPlot(stratify=list(filter=list(name=\"SEX\", cat=\"F\")))   plotResidualsScatterPlot(stratify=list(splitGroup=list(name=\"WEIGHT\", breaks=c(75))))   plotResidualsScatterPlot(stratify=list(colorGroup=list(name=\"WEIGHT\", breaks=c(75))))      data <- getChartsData(plotName=\"plotResidualsScatterPlot\",                         computeSettings=list(indivEstimate=\"simulated\"))   plotResidualsScatterPlot(data=data)      plotResidualsScatterPlot(residuals=c(\"indiv\", \"pop\"),                            settings=list(indivEstimate=\"simulated\"))   plotResidualsScatterPlot(residuals=\"indiv\", xaxis=c(\"prediction\"),                            settings=list(indivEstimate=\"mode\"))   plotResidualsScatterPlot(xaxis=c(\"prediction\"), residuals=c(\"indiv\", \"pop\"))   plotResidualsScatterPlot(residuals=\"npde\")"},{"path":"/reference/plotSaem.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Plot SAEM convergence — plotSaem","title":"[Monolix] Plot SAEM convergence — plotSaem","text":"[Monolix] Plot SAEM convergence","code":""},{"path":"/reference/plotSaem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Plot SAEM convergence — plotSaem","text":"","code":"plotSaem(settings = list(), data = NULL)"},{"path":"/reference/plotSaem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Plot SAEM convergence — plotSaem","text":"settings list optional settings: grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. data dataframe - Output getChartsData (getChartsData(\"plotSaem\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotSaem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Plot SAEM convergence — plotSaem","text":"TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotSaem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Plot SAEM convergence — plotSaem","text":"","code":"initializeLixoftConnectors(software = \"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()      plotSaem()"},{"path":"/reference/plotStandardizedRandomEffectsDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Distribution of the standardized random effects — plotStandardizedRandomEffectsDistribution","title":"[Monolix] Distribution of the standardized random effects — plotStandardizedRandomEffectsDistribution","text":"[Monolix] Distribution standardized random effects","code":""},{"path":"/reference/plotStandardizedRandomEffectsDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Distribution of the standardized random effects — plotStandardizedRandomEffectsDistribution","text":"","code":"plotStandardizedRandomEffectsDistribution(   parameters = NULL,   plot = \"boxplot\",   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotStandardizedRandomEffectsDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Distribution of the standardized random effects — plotStandardizedRandomEffectsDistribution","text":"parameters vector parameters display. (default first 4 computed parameters displayed). plot Type plot: probability density distribution (\"pdf\"), cumulative density distribution (\"cdf\"), boxplot (\"boxplot\") (default \"boxplot\"). settings list optional plot settings: indivEstimate Calculation individual estimates: conditional mean (\"mean\"), conditional mode EBE's (\"mode\"), conditional distribution (\"simulated\") (default \"mode\"). variabilityLevel (bool) case IOV conditional distribution computedplot displayed one given level variability (default NULL) NULL, variability level ID + Occasions Run getVariabilityLevels() see available levels variability empirical (bool) TRUE, plot empirical density distribution(default TRUE). define plot \"pdf\" \"cdf\" theoretical (bool) TRUE, plot theoretical density distribution(default TRUE). define plot \"pdf\" \"cdf\" median (bool) TRUE, add median line (default TRUE). define plot \"boxplot\" quartile (bool) TRUE, add quartile line (default TRUE). define plot \"boxplot\" legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). ncol (int) number columns facet = TRUE (default 4). fontsize (integer) Plot text font size. preferences (optional) preferences plot display, run getPlotPreferences(\"plotStandardizedRandomEffectsDistribution\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List charts data dataframe - Output getChartsData (getChartsData(\"plotStandardizedRandomEffectsDistribution\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotStandardizedRandomEffectsDistribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Distribution of the standardized random effects — plotStandardizedRandomEffectsDistribution","text":"ggplot object one parameter, TableGrob object multiple plots (output grid.arrange)","code":""},{"path":[]},{"path":"/reference/plotStandardizedRandomEffectsDistribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Distribution of the standardized random effects — plotStandardizedRandomEffectsDistribution","text":"","code":"initializeLixoftConnectors(software=\"monolix\")   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)    runPopulationParameterEstimation()   runConditionalDistributionSampling()   runConditionalModeEstimation()      # Random effect distribution as boxplot   plotStandardizedRandomEffectsDistribution(parameters=\"ka\", plot=\"boxplot\")   plotStandardizedRandomEffectsDistribution(parameters=\"ka\", plot=\"boxplot\",                                             settings=list(indivEstimate=\"mode\"))   plotStandardizedRandomEffectsDistribution(parameters=\"ka\", plot=\"boxplot\",                                             settings=list(quartile=F))      # Random effect distribution as pdf   plotStandardizedRandomEffectsDistribution(parameters=\"ka\", plot=\"pdf\")   plotStandardizedRandomEffectsDistribution(parameters=\"ka\", plot=\"pdf\",                                             settings=list(empirical=F))   plotStandardizedRandomEffectsDistribution(parameters=\"ka\", plot=\"pdf\",                                             settings=list(theoretical=F))      # Random effect distribution as cdf   plotStandardizedRandomEffectsDistribution(parameters=\"ka\", plot=\"cdf\")   plotStandardizedRandomEffectsDistribution(parameters=\"ka\", plot=\"cdf\",                                             settings=list(indivEstimate=\"simulated\"))   plotStandardizedRandomEffectsDistribution(parameters=\"ka\", plot=\"cdf\",                                             settings=list(theoretical=F))      # stratification   plotStandardizedRandomEffectsDistribution(     stratify=list(filter=list(name=\"WEIGHT\", interval=c(0, 75)))   )   plotStandardizedRandomEffectsDistribution(parameters=\"Cl\",                                             stratify=list(splitGroup=list(name=\"SEX\")))   colorGroup <- list(name=\"WEIGHT\", breaks=c(75))   plotStandardizedRandomEffectsDistribution(     parameters=\"Cl\", plot=\"pdf\",     stratify=list(colorGroup=colorGroup, colors=c(\"#46B4AF\", \"#B4468A\"))   )   plotStandardizedRandomEffectsDistribution(     parameters=\"Cl\", plot=\"cdf\",     stratify=list(colorGroup=colorGroup, colors=c(\"#46B4AF\", \"#B4468A\"))   )   plotStandardizedRandomEffectsDistribution(     parameters=\"Cl\", settings=list(plot=\"boxplot\"),     stratify=list(colorGroup=colorGroup, colors=c(\"#46B4AF\", \"#B4468A\"))   )      data <- getChartsData(plotName=\"plotStandardizedRandomEffectsDistribution\",                         computeSettings=list(indivEstimate=\"simulated\"))   plotStandardizedRandomEffectsDistribution(data=data)      plotStandardizedRandomEffectsDistribution(parameters=c(\"ka\", \"Cl\"))   plotStandardizedRandomEffectsDistribution(plot=\"boxplot\")   plotStandardizedRandomEffectsDistribution(plot=\"pdf\")   plotStandardizedRandomEffectsDistribution(plot=\"cdf\")   plotStandardizedRandomEffectsDistribution(plot=\"pdf\", settings=list(theoretical=F))"},{"path":"/reference/plotVpc.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Plot Visual predictive checks — plotVpc","title":"[Monolix] Plot Visual predictive checks — plotVpc","text":"[Monolix] Plot Visual predictive checks","code":""},{"path":"/reference/plotVpc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Plot Visual predictive checks — plotVpc","text":"","code":"plotVpc(   obsName = NULL,   eventPlot = \"survivalFunction\",   settings = list(),   preferences = list(),   stratify = list(),   data = NULL )"},{"path":"/reference/plotVpc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Plot Visual predictive checks — plotVpc","text":"obsName (string) Name observation (dataset header). default first observation considered. eventPlot (string) Display Survival function (\"survivalFunction\") average number event (\"averageEventNumber) (default \"survivalFunction\"). event data . settings list optional settings: level (int) level prediction intervals computation (default 90), higherPercentile (int) Higher percentile empirical predicted percentiles computation (default 90). continuous data . useCorrpred (bool) TRUE, pcVPC computed using Uppsala prediction correction (default FALSE). continuous data . useCensored (bool) Choose use BLQ data (TRUE) ignore (FALSE) (default TRUE). continuous data . censoring (string) BLQ data can simulated ('simulated'), can equal limit quantification ('loq') (default 'simulated'). continuous data . timeAfterLastDose (bool) display vpc last dose (default FALSE) data dose information . nbDataPoints (int) Number data point event time grid (default 100) event data . xBinsSettings list optional settings time axis binning continuous discrete data criteria (string) Bining criteria, one 'equalwidth', 'equalsize', 'leastsquare' methods. (default leastsquare). .fixedNbBins (bool) TRUE define fixed number bins, else define range automatic selection (default FALSE). nbBins (int) Define fixed number bins (default 10). binRange (vector(int, int)) Define range number bins (default c(5, 100)). nbBinData (vector(int, int)) Define range number data points per bin (default c(10, 200)). yBinsSettings list optional settings y axis binning. countable discrete data criteria (string) Bining criteria, one 'equalwidth', 'equalsize', 'leastsquare' methods. (default leastsquare). .fixedNbBins (bool) TRUE define fixed number bins, else define range automatic selection (default TRUE). nbBins (int) Define fixed number bins (default 10). binRange (vector(int, int)) Define range number bins (default c(5, 100)). nbBinData (vector(int, int)) Define range number data points per bin (default c(10, 200)). obs (bool) - TRUE, Observed data displayed dots (defaul FALSE). cens (bool) - TRUE, Censored data displayed dots (defaul FALSE). empirical (bool) - TRUE, Empirical data displayed (default TRUE):  empirical percentiles continuous data; empirical probability discrete data; empirical curve event data theoretical (bool) -  TRUE, median displayed (default FALSE): median predicted percentiles continuous data, median predicted probability discrete data, median KM curves event data predInterval (bool) - TRUE, Prediction interval displayed (default TRUE). linearInterpolation (bool) - TRUE set piece wise display prediction intervals, else show bins rectangular (default TRUE). outlierDots (bool) - TRUE, Add red dots indicating empirical percentiles outside prediction intervals (default TRUE). outlierAreas (bool) - TRUE Add red areas indicating empirical percentiles outside prediction intervals (default TRUE). binLimits (bool) - Add/remove vertical lines scatter plots indicate bins (default FALSE). legend (bool) add (TRUE) / remove (FALSE) plot legend (default FALSE). grid (bool) add (TRUE) / remove (FALSE) plot grid (default TRUE). xlog (bool) add (TRUE) / remove (FALSE) log scaling x axis (default FALSE). ylog (bool) add (TRUE) / remove (FALSE) log scaling y axis (default FALSE). xlab (string) label x axis (default \"Time\"). ylab (string) label y axis (default obsName). ncol (int) number columns facet = TRUE (default 4). xlim (c(double, double)) limits x axis. ylim (c(double, double)) limits y axis. fontsize (integer) Plot text font size. scales (string) scales fixed (\"fixed\"), free (\"free\", default), free one dimension (\"free_x\", \"free_y\") (default \"free\"). preferences (optional) preferences plot display, run getPlotPreferences(\"plotVpc\") check available displays. stratify List stratification arguments ids - List ids display (default ids displayed). splitGroup - Split plots groups covariates (default split applied).   list, list list fields: name : name covariate use grouping, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. colorGroup - Color plots groups covariates (default color applied).   list, list list fields: name : name covariate use grouping, name column id, breaks : case continuous covariate, list break values, groups : [optional] case categorical covariate, define groups modalities. filter - Filter data (default filtering applied).   list, list list fields: name - name covariate filter, cat - case categorical covariate, name category filter, interval - case continuous covariate, list filtering intervals. colors - List colors use colorGroup argument defined data List charts data dataframe - Output getChartsData (getChartsData(\"plotVpc\", ...)) data specified, charts data computed inside function.","code":""},{"path":"/reference/plotVpc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[Monolix] Plot Visual predictive checks — plotVpc","text":"ggplot2 object","code":""},{"path":[]},{"path":"/reference/plotVpc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Plot Visual predictive checks — plotVpc","text":"","code":"initializeLixoftConnectors(software = \"monolix\")   # continuous data   project <- file.path(getDemoPath(), \"1.creating_and_using_models\",                        \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   loadProject(project)   runPopulationParameterEstimation()      data <- getChartsData(\"plotVpc\")   p <- plotVpc(data = data, obsName = \"CONC\",                settings = list(outlierDots = FALSE, grid = FALSE,                                ylab = \"Concentration\", xlab = \"time (in hour)\"))                             # categorical data   project <- file.path(getDemoPath(), \"3.models_for_noncontinuous_outcomes\",                        \"3.1.categorical_data_model\", \"categorical1_project.mlxtran\")   loadProject(project)   runPopulationParameterEstimation()   data <- getChartsData(plotName = \"plotVpc\")   p <- plotVpc(data = data, obsName = \"level\",                settings = list(theoretical = TRUE, outlierDots = FALSE))                             # countable data   project <- file.path(getDemoPath(), \"3.models_for_noncontinuous_outcomes\",                        \"3.2.count_data_model\", \"count1a_project.mlxtran\")   loadProject(project)   runPopulationParameterEstimation()   data <- getChartsData(plotName = \"plotVpc\")   p <- plotVpc(data = data, obsName = \"Y\")                   # time to event data   project <- file.path(getDemoPath(), \"3.models_for_noncontinuous_outcomes\",                        \"3.3.time_to_event_data_model\", \"tte1_project.mlxtran\")   loadProject(project)   runPopulationParameterEstimation()   data <- getChartsData(plotName = \"plotVpc\")   plotVpc(data = data, obsName = \"Event\", eventPlot = \"survivalFunction\")"},{"path":"/reference/removeCovariate.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Remove covariate — removeCovariate","title":"[Monolix] Remove covariate — removeCovariate","text":"Remove transformed covariates (discrete continuous) /latent covariates. Call getCovariateInformation know covariates can removed.","code":""},{"path":"/reference/removeCovariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Remove covariate — removeCovariate","text":"","code":"removeCovariate(...)"},{"path":"/reference/removeCovariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Remove covariate — removeCovariate","text":"... list covariate names.","code":""},{"path":[]},{"path":"/reference/removeCovariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Remove covariate — removeCovariate","text":"","code":"if (FALSE) { removeCovariate(\"tWt\",\"lcat1\") }"},{"path":"/reference/removeFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Remove filter — removeFilter","title":"[Monolix - PKanalix] Remove filter — removeFilter","text":"Remove last filter applied current data set.","code":""},{"path":"/reference/removeFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Remove filter — removeFilter","text":"","code":"removeFilter()"},{"path":[]},{"path":"/reference/removeFilter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Remove filter — removeFilter","text":"","code":"if (FALSE) { removeFilter() }"},{"path":"/reference/removeGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Remove simulation group — removeGroup","title":"[Simulx] Remove simulation group — removeGroup","text":"Remove simulation group.","code":""},{"path":"/reference/removeGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Remove simulation group — removeGroup","text":"","code":"removeGroup(group)"},{"path":"/reference/removeGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Remove simulation group — removeGroup","text":"group (string) Name group remove.","code":""},{"path":"/reference/removeGroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Remove simulation group — removeGroup","text":"Simulation groups used simulation Simulx GUI.  creation Simulx project, first group created default name \"simulationGroup1\".  Use getGroups check groups already defined, elements set group.  add simulation group, use addGroup.  remove simulation group, use removeGroup. add change group element, use setGroupElement.  define new elements, use one define...Element functions.","code":""},{"path":[]},{"path":"/reference/removeGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Remove simulation group — removeGroup","text":"","code":"initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"5.simulation\", \"simulationGroups_treatment.smlx\")   loadProject(project_name)   removeGroup(\"medium_dose\")"},{"path":"/reference/removeGroupElement.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Remove element from simulation group — removeGroupElement","title":"[Simulx] Remove element from simulation group — removeGroupElement","text":"Remove element simulation group.","code":""},{"path":"/reference/removeGroupElement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Remove element from simulation group — removeGroupElement","text":"","code":"removeGroupElement(group, element)"},{"path":"/reference/removeGroupElement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Remove element from simulation group — removeGroupElement","text":"group (character) Group name element (character) Element remove","code":""},{"path":"/reference/removeGroupElement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Remove element from simulation group — removeGroupElement","text":"Simulation groups used simulation Simulx GUI.  creation Simulx project, first group created default name \"simulationGroup1\".  Use getGroups check groups already defined, elements set group.  add simulation group, use addGroup.  remove simulation group, use removeGroup. add change group element, use setGroupElement.  define new elements, use one define...Element functions. Note: Removing output element used outcome delete corresponding outcome remove outcome endpoints using .","code":""},{"path":[]},{"path":"/reference/removeGroupElement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Remove element from simulation group — removeGroupElement","text":"","code":"# Remove an output element from all groups   initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"5.simulation\", \"simulationGroups_treatment.smlx\")   loadProject(project_name)   removeGroupElement(group = \"low_dose\", element = \"regularY1\")    removeGroupElement(group = \"medium_dose\", element = \"regularY1\")    removeGroupElement(group = \"high_dose\", element = \"regularY1\")"},{"path":"/reference/renameAdditionalCovariate.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Rename additional covariate — renameAdditionalCovariate","title":"[Monolix - PKanalix] Rename additional covariate — renameAdditionalCovariate","text":"Rename existing additional covariate.","code":""},{"path":"/reference/renameAdditionalCovariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Rename additional covariate — renameAdditionalCovariate","text":"","code":"renameAdditionalCovariate(oldName, newName)"},{"path":"/reference/renameAdditionalCovariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Rename additional covariate — renameAdditionalCovariate","text":"oldName (string) current name covariate rename newName (string) new name.","code":""},{"path":[]},{"path":"/reference/renameAdditionalCovariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Rename additional covariate — renameAdditionalCovariate","text":"","code":"if (FALSE) { renameAdditionalCovariate(oldName = \"observationNumberPerIndividual_y1\", newName = \"nbObsForY1\") }"},{"path":"/reference/renameFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Rename filter — renameFilter","title":"[Monolix - PKanalix] Rename filter — renameFilter","text":"Rename existing filtered data set.","code":""},{"path":"/reference/renameFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Rename filter — renameFilter","text":"","code":"renameFilter(newName, oldName = \"\")"},{"path":"/reference/renameFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Rename filter — renameFilter","text":"newName (string) new name. oldName (string) [optional] current name filtered data set rename (current one default)","code":""},{"path":[]},{"path":[]},{"path":"/reference/renameGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Rename simulation group — renameGroup","title":"[Simulx] Rename simulation group — renameGroup","text":"Rename simulation group.","code":""},{"path":"/reference/renameGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Rename simulation group — renameGroup","text":"","code":"renameGroup(currentGroupName, newGroupName)"},{"path":"/reference/renameGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Rename simulation group — renameGroup","text":"currentGroupName (string) Name current group name. newGroupName (string) Name new group name.","code":""},{"path":"/reference/renameGroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Rename simulation group — renameGroup","text":"Note: creation Simulx project, first group created default name \"simulationGroup1\". possible rename group.","code":""},{"path":[]},{"path":"/reference/renameGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Rename simulation group — renameGroup","text":"","code":"initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"3.definition\", \"3.1.treatments\", \"treatment_manual.smlx\")   loadProject(project_name)   renameGroup(\"simulationGroup1\", \"two_doses\")"},{"path":"/reference/resetPlotPreferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset plot preferences to go back to default preferences — resetPlotPreferences","title":"Reset plot preferences to go back to default preferences — resetPlotPreferences","text":"Reset plot preferences go back default preferences","code":""},{"path":"/reference/resetPlotPreferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset plot preferences to go back to default preferences — resetPlotPreferences","text":"","code":"resetPlotPreferences()"},{"path":[]},{"path":"/reference/resetPlotPreferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset plot preferences to go back to default preferences — resetPlotPreferences","text":"","code":"if (FALSE) {   getPlotPreferences()$obs[c(\"color\", \"legend\")]   update = list(obs = list(color = \"green\", legend = \"Observation\"))   setPlotPreferences(update = update)   getPlotPreferences()$obs[c(\"color\", \"legend\")]   resetPlotPreferences()   getPlotPreferences()$obs[c(\"color\", \"legend\")] }"},{"path":"/reference/runAssessment.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Run assessment — runAssessment","title":"[Monolix] Run assessment — runAssessment","text":"Run assessment.  change initialization run, use getAssessmentSettings receive settings. See example.","code":""},{"path":"/reference/runAssessment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Run assessment — runAssessment","text":"","code":"runAssessment(settings = NULL)"},{"path":"/reference/runAssessment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Run assessment — runAssessment","text":"settings (list<settings>) [optional] Settings initialize assessment algorithm. provided, current settings used. See getAssessmentSettings.","code":""},{"path":[]},{"path":"/reference/runAssessment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Run assessment — runAssessment","text":"","code":"if (FALSE) { runAssessment() set = getAssessmentSettings() runAssessment(set) }"},{"path":"/reference/runBioequivalenceEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Estimate the bioequivalence. — runBioequivalenceEstimation","title":"[PKanalix] Estimate the bioequivalence. — runBioequivalenceEstimation","text":"Estimate bioequivalence selected parameters.","code":""},{"path":"/reference/runBioequivalenceEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Estimate the bioequivalence. — runBioequivalenceEstimation","text":"","code":"runBioequivalenceEstimation()"},{"path":"/reference/runBioequivalenceEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Estimate the bioequivalence. — runBioequivalenceEstimation","text":"","code":"if (FALSE) { runNCAEstimation() }"},{"path":"/reference/runCAEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Estimate the individual parameters using compartmental analysis. — runCAEstimation","title":"[PKanalix] Estimate the individual parameters using compartmental analysis. — runCAEstimation","text":"Estimate CA parameters individual project.","code":""},{"path":"/reference/runCAEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Estimate the individual parameters using compartmental analysis. — runCAEstimation","text":"","code":"runCAEstimation()"},{"path":"/reference/runCAEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Estimate the individual parameters using compartmental analysis. — runCAEstimation","text":"","code":"if (FALSE) { runCAEstimation() }"},{"path":"/reference/runConditionalDistributionSampling.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Sampling from the conditional distribution — runConditionalDistributionSampling","title":"[Monolix] Sampling from the conditional distribution — runConditionalDistributionSampling","text":"Estimate individual parameters using conditional distribution sampling algorithm. associated method keyword \"conditionalMean\".","code":""},{"path":"/reference/runConditionalDistributionSampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Sampling from the conditional distribution — runConditionalDistributionSampling","text":"","code":"runConditionalDistributionSampling()"},{"path":"/reference/runConditionalDistributionSampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Sampling from the conditional distribution — runConditionalDistributionSampling","text":"","code":"if (FALSE) { runConditionalDistributionSampling() }"},{"path":"/reference/runConditionalModeEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Estimation of the conditional modes (EBEs) — runConditionalModeEstimation","title":"[Monolix] Estimation of the conditional modes (EBEs) — runConditionalModeEstimation","text":"Estimate individual parameters using conditional mode estimation algorithm (EBEs). associated method keyword \"conditionalMode\".","code":""},{"path":"/reference/runConditionalModeEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Estimation of the conditional modes (EBEs) — runConditionalModeEstimation","text":"","code":"runConditionalModeEstimation()"},{"path":"/reference/runConditionalModeEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Estimation of the conditional modes (EBEs) — runConditionalModeEstimation","text":"","code":"if (FALSE) { runConditionalModeEstimation() }"},{"path":"/reference/runEndpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Run endpoints task — runEndpoints","title":"[Simulx] Run endpoints task — runEndpoints","text":"Run endpoints task.","code":""},{"path":"/reference/runEndpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Run endpoints task — runEndpoints","text":"","code":"runEndpoints()"},{"path":[]},{"path":"/reference/runEndpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Run endpoints task — runEndpoints","text":"","code":"if (FALSE) {   runEndpoints() }"},{"path":"/reference/runEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Run both non compartmental and compartmental analysis. — runEstimation","title":"[PKanalix] Run both non compartmental and compartmental analysis. — runEstimation","text":"Run NCA analysis CA analysis structural model CA calculation defined.","code":""},{"path":"/reference/runEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Run both non compartmental and compartmental analysis. — runEstimation","text":"","code":"runEstimation()"},{"path":"/reference/runEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Run both non compartmental and compartmental analysis. — runEstimation","text":"","code":"if (FALSE) { runEstimation() }"},{"path":"/reference/runLogLikelihoodEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Log-Likelihood estimation — runLogLikelihoodEstimation","title":"[Monolix] Log-Likelihood estimation — runLogLikelihoodEstimation","text":"Run log-Likelihood estimation algorithm. default, task processed background R session.  Existing methods: Log-likelihood outputs(-2LL, AIC, BIC) available using getEstimatedLogLikelihood function","code":""},{"path":"/reference/runLogLikelihoodEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Log-Likelihood estimation — runLogLikelihoodEstimation","text":"","code":"runLogLikelihoodEstimation(linearization = FALSE)"},{"path":"/reference/runLogLikelihoodEstimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Log-Likelihood estimation — runLogLikelihoodEstimation","text":"linearization option (boolean)[optional] method used. method given, importance sampling used default.","code":""},{"path":"/reference/runLogLikelihoodEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Log-Likelihood estimation — runLogLikelihoodEstimation","text":"","code":"if (FALSE) { runLogLikelihoodEstimation(linearization = T) }"},{"path":"/reference/runModelBuilding.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Run model building — runModelBuilding","title":"[Monolix] Run model building — runModelBuilding","text":"Run model building.  change initialization run, use getModelBuildingSettings receive settings. See example.","code":""},{"path":"/reference/runModelBuilding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Run model building — runModelBuilding","text":"","code":"runModelBuilding(...)"},{"path":"/reference/runModelBuilding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Run model building — runModelBuilding","text":"... (list<settings>) Settings initialize model buildign algorithm. See getModelBuildingSettings.","code":""},{"path":[]},{"path":"/reference/runModelBuilding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Run model building — runModelBuilding","text":"","code":"if (FALSE) { runModelBuilding() set = getModelBuildingSettings() runModelBuilding(settings = set) }"},{"path":"/reference/runNCAEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Estimate the individual parameters using non compartmental analysis. — runNCAEstimation","title":"[PKanalix] Estimate the individual parameters using non compartmental analysis. — runNCAEstimation","text":"Estimate NCA parameters individual project.","code":""},{"path":"/reference/runNCAEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Estimate the individual parameters using non compartmental analysis. — runNCAEstimation","text":"","code":"runNCAEstimation()"},{"path":"/reference/runNCAEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Estimate the individual parameters using non compartmental analysis. — runNCAEstimation","text":"","code":"if (FALSE) { runNCAEstimation() }"},{"path":"/reference/runPopulationParameterEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Population parameter estimation — runPopulationParameterEstimation","title":"[Monolix] Population parameter estimation — runPopulationParameterEstimation","text":"Estimate population parameters SAEM method. associated method keyword \"saem\". initial values population parameters can accessed calling getPopulationParameterInformation customized setPopulationParameterInformation. estimated population parameters available using getEstimatedPopulationParameters function.","code":""},{"path":"/reference/runPopulationParameterEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Population parameter estimation — runPopulationParameterEstimation","text":"","code":"runPopulationParameterEstimation()"},{"path":"/reference/runPopulationParameterEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Population parameter estimation — runPopulationParameterEstimation","text":"","code":"if (FALSE) { runPopulationParameterEstimation() }"},{"path":"/reference/runScenario.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Run scenario — runScenario","title":"[Monolix - PKanalix - Simulx] Run scenario — runScenario","text":"Run scenario set setScenario.","code":""},{"path":"/reference/runScenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Run scenario — runScenario","text":"","code":"runScenario()"},{"path":"/reference/runScenario.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix - Simulx] Run scenario — runScenario","text":"scenario list tasks run. Setting scenario equivalent selecting tasks Monolix, PKanalix Simulx GUI performed clicking RUN. Note: every task can also run separately specific function, runSimulation Simulx, runEstimation Monolix. CA task PKanalix part scenario, must run runCAEstimation.","code":""},{"path":[]},{"path":"/reference/runScenario.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix - Simulx] Run scenario — runScenario","text":"","code":"if (FALSE) { runScenario() }"},{"path":"/reference/runSimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Run simulation — runSimulation","title":"[Simulx] Run simulation — runSimulation","text":"Run simulation task.","code":""},{"path":"/reference/runSimulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Run simulation — runSimulation","text":"","code":"runSimulation()"},{"path":"/reference/runSimulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Run simulation — runSimulation","text":"clicking SIMULATION Simulx GUI, simulated values saved text files result folder located next project file calling saveProject. get sampled parameters simulated outputs data frames, use getSimulationResults. post-process results computing outcomes endpoints, use runEndpoints. run simulation endpoint tasks, use setScenario runScenario. get output console showing status simulation, use setConsoleMode.","code":""},{"path":[]},{"path":"/reference/runSimulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Run simulation — runSimulation","text":"","code":"initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"1.overview\", \"importFromMonolix_clinicalTrial.smlx\")   loadProject(project_name)   setConsoleMode(\"basic\")   runSimulation()"},{"path":"/reference/runStandardErrorEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Standard error estimation — runStandardErrorEstimation","title":"[Monolix] Standard error estimation — runStandardErrorEstimation","text":"Estimate Fisher Information Matrix standard errors population parameters. default, task processed background R session.  Existing methods: Fisher Information Matrix available using getCorrelationOfEstimates function, standard errors avalaible using getEstimatedStandardErrors function.","code":""},{"path":"/reference/runStandardErrorEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Standard error estimation — runStandardErrorEstimation","text":"","code":"runStandardErrorEstimation(linearization = FALSE)"},{"path":"/reference/runStandardErrorEstimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Standard error estimation — runStandardErrorEstimation","text":"linearization option (boolean)[optional] method used. method given, stochastic approximation used default.","code":""},{"path":"/reference/runStandardErrorEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Standard error estimation — runStandardErrorEstimation","text":"","code":"if (FALSE) { runStandardErrorEstimation(linearization = T) }"},{"path":"/reference/saveProject.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Save current project — saveProject","title":"[Monolix - PKanalix - Simulx] Save current project — saveProject","text":"Save current project file can reloaded connectors GUI.","code":""},{"path":"/reference/saveProject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Save current project — saveProject","text":"","code":"saveProject(projectFile = \"\")"},{"path":"/reference/saveProject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Save current project — saveProject","text":"projectFile [optional](character) Path save copy current mlxtran model. Can absolute relative current working directory. path given, file used build current configuration updated.","code":""},{"path":"/reference/saveProject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix - Simulx] Save current project — saveProject","text":"extensions .mlxtran Monolix, .pkx PKanalix, .smlx Simulx. WARNING: R sensitive '\\' '/', '/' can used. project setting \"userfilesnexttoproject\" set TRUE setProjectSettings, file dependencies model, data external files saved next project Monolix PKanalix, result folder Simulx.","code":""},{"path":[]},{"path":[]},{"path":"/reference/selectData.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Select data set — selectData","title":"[Monolix - PKanalix] Select data set — selectData","text":"Select new current data set within previously defined ones (original filters).","code":""},{"path":"/reference/selectData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Select data set — selectData","text":"","code":"selectData(name)"},{"path":"/reference/selectData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Select data set — selectData","text":"name (string) data set name.","code":""},{"path":[]},{"path":"/reference/selectData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Select data set — selectData","text":"","code":"if (FALSE) { selectData(name = \"filter1\") }"},{"path":"/reference/setAddLines.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Add lines to the model — setAddLines","title":"[Simulx] Add lines to the model — setAddLines","text":"Additional equations can added model file Simulx GUI.  useful case import Monolix PKanalix, order add equations model, eg compute additional variable, without modifying model file used estimation.","code":""},{"path":"/reference/setAddLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Add lines to the model — setAddLines","text":"","code":"setAddLines(lines)"},{"path":"/reference/setAddLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Add lines to the model — setAddLines","text":"lines (string) Additional lines define.","code":""},{"path":"/reference/setAddLines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Add lines to the model — setAddLines","text":"variables defined add lines available output.","code":""},{"path":[]},{"path":"/reference/setAddLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Add lines to the model — setAddLines","text":"","code":"# Calculate AUC   initializeLixoftConnectors(\"monolix\")   monolix_project <- file.path(getDemoPath(), \"1.creating_and_using_models\", \"1.1.libraries_of_models\", \"theophylline_project.mlxtran\")   initializeLixoftConnectors(\"simulx\")   importProject(monolix_project)   setAddLines(\"ddt_AUC = Cc\")    # Calculate partial AUC   initializeLixoftConnectors(\"monolix\")   monolix_project <- file.path(getDemoPath(), \"1.creating_and_using_models\", \"1.1.libraries_of_models\", \"warfarinPK_project.mlxtran\")   initializeLixoftConnectors(\"simulx\")   importProject(monolix_project)   setAddLines(c(\"if t<24\", \"deriv = Cc\", \"else\", \"deriv = 0\", \"end\", \"ddt_AUC = deriv\"))"},{"path":"/reference/setAutocorrelation.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set auto-correlation — setAutocorrelation","title":"[Monolix] Set auto-correlation — setAutocorrelation","text":"Add remove auto-correlation error model used observation models.  Call getObservationInformation get list observation models present current project.","code":""},{"path":"/reference/setAutocorrelation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set auto-correlation — setAutocorrelation","text":"","code":"setAutocorrelation(...)"},{"path":"/reference/setAutocorrelation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set auto-correlation — setAutocorrelation","text":"... Sequence comma-separated pairs {(string)\"observationModel\",(boolean)hasAutoCorrelation}.","code":""},{"path":[]},{"path":"/reference/setAutocorrelation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set auto-correlation — setAutocorrelation","text":"","code":"if (FALSE) { setAutocorrelation(Conc = TRUE) setAutocorrelation(Conc = TRUE, Effect = FALSE) }"},{"path":"/reference/setBioequivalenceSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Set the value of one or several of the settings associated to the bioequivalence estimation — setBioequivalenceSettings","title":"[PKanalix] Set the value of one or several of the settings associated to the bioequivalence estimation — setBioequivalenceSettings","text":"Set value one several settings associated bioequivalence estimation. Associated settings :","code":""},{"path":"/reference/setBioequivalenceSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Set the value of one or several of the settings associated to the bioequivalence estimation — setBioequivalenceSettings","text":"","code":"setBioequivalenceSettings(...)"},{"path":"/reference/setBioequivalenceSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Set the value of one or several of the settings associated to the bioequivalence estimation — setBioequivalenceSettings","text":"... collection comma-separated pairs {settingName = settingValue}.","code":""},{"path":[]},{"path":"/reference/setBioequivalenceSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Set the value of one or several of the settings associated to the bioequivalence estimation — setBioequivalenceSettings","text":"","code":"if (FALSE) { setBioequivalenceSettings(level = 90, bioequivalencelimits = c(85, 115)) # set the settings whose name has been passed in argument setBioequivalenceSettings(computedbioequivalenceparameters = data.frame(parameters = c(\"Cmax\", \"Tmax\"), logtransform = c(TRUE, FALSE))) setBioequivalenceSettings(linearmodelfactors = list(id=\"SUBJ\", period=\"OCC\", formulation=\"FORM\", reference=\"ref\", sequence=\"SEQ\", additional=c(\"Group\",\"Phase\"))) }"},{"path":"/reference/setCAInitialValues.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Set the initial values of individual parameters for the compartmental analysis — setCAInitialValues","title":"[PKanalix] Set the initial values of individual parameters for the compartmental analysis — setCAInitialValues","text":"[PKanalix] Set initial values individual parameters compartmental analysis","code":""},{"path":"/reference/setCAInitialValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Set the initial values of individual parameters for the compartmental analysis — setCAInitialValues","text":"","code":"setCAInitialValues(initialValues)"},{"path":"/reference/setCAInitialValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Set the initial values of individual parameters for the compartmental analysis — setCAInitialValues","text":"initialValues list lists. parameter, list specifies:","code":""},{"path":[]},{"path":"/reference/setCAInitialValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Set the initial values of individual parameters for the compartmental analysis — setCAInitialValues","text":"","code":"if (FALSE) {   setCAInitialValues(list(Cl=list(value=0.4, constraint = \"none\"), V=list(value=0.5, constraint=\"positive\"), ka=list(value=0.04, constraint=\"bounded\", limits=c(0, 1)))) }"},{"path":"/reference/setCAResultsStratification.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Set CA results stratification — setCAResultsStratification","title":"[PKanalix] Set CA results stratification — setCAResultsStratification","text":"Set stratification used compute NCA parameters stratistics table. Stratification defined : stratification covariate groups shared NCA CA results stratification state specific task results","code":""},{"path":"/reference/setCAResultsStratification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Set CA results stratification — setCAResultsStratification","text":"","code":"setCAResultsStratification(   split = NULL,   filter = NULL,   groups = NULL,   state = NULL )"},{"path":"/reference/setCAResultsStratification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Set CA results stratification — setCAResultsStratification","text":"split (vector<string>) Ordered list splitted covariates filter (list< pair<string, vector<int>> >) List paired containing covariate name indexes associated kept groups groups Stratification groups list state Stratification state","code":""},{"path":"/reference/setCAResultsStratification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[PKanalix] Set CA results stratification — setCAResultsStratification","text":"covariate, stratification groups can defined list : stratification state represented list :","code":""},{"path":[]},{"path":"/reference/setCAResultsStratification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Set CA results stratification — setCAResultsStratification","text":"","code":"if (FALSE) { setCAResultsStratification(split = \"SEX\") setCAResultsStratification(split = c(\"SEX\", \"WEIGHT\"))  setCAResultsStratification(filter = list(\"SEX\", 1)) setCAResultsStratification(filter = list(list(\"SEX\", 1), list(\"WEIGHT\", c(1,3))))  setCAResultsStratification(split = \"WEIGHT\", filter = list(list(\"TRT\", c(1,2))), groups = list(list(name = \"WEIGHT\", definition = c(65,5, 72)), list(name = \"TRT\", definition = list(c(\"a\",\"b\"), \"c\", c(\"d\",\"e\")))))  s = getCAResultsStratification() setCAResultsStratification(state = s$state, groups = s$groups) }"},{"path":"/reference/setCASettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Set the settings associated to the compartmental analysis — setCASettings","title":"[PKanalix] Set the settings associated to the compartmental analysis — setCASettings","text":"Set settings associated compartmental analysis. Associated settings names :","code":""},{"path":"/reference/setCASettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Set the settings associated to the compartmental analysis — setCASettings","text":"","code":"setCASettings(...)"},{"path":"/reference/setCASettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Set the settings associated to the compartmental analysis — setCASettings","text":"... collection comma-separated pairs {settingName = settingValue}.","code":""},{"path":[]},{"path":"/reference/setCASettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Set the settings associated to the compartmental analysis — setCASettings","text":"","code":"if (FALSE) { setCASettings(weightingCA = \"uniform\", blqMethod = \"zero\") # set the settings whose name has been passed in argument }"},{"path":"/reference/setConditionalDistributionSamplingSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set conditional distribution sampling settings — setConditionalDistributionSamplingSettings","title":"[Monolix] Set conditional distribution sampling settings — setConditionalDistributionSamplingSettings","text":"Set value one several conditional distribution sampling settings. Associated settings :","code":""},{"path":"/reference/setConditionalDistributionSamplingSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set conditional distribution sampling settings — setConditionalDistributionSamplingSettings","text":"","code":"setConditionalDistributionSamplingSettings(...)"},{"path":"/reference/setConditionalDistributionSamplingSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set conditional distribution sampling settings — setConditionalDistributionSamplingSettings","text":"... collection comma-separated pairs {settingName = settingValue}.","code":""},{"path":[]},{"path":"/reference/setConditionalDistributionSamplingSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set conditional distribution sampling settings — setConditionalDistributionSamplingSettings","text":"","code":"if (FALSE) { setConditionalDistributionSamplingSettings(ratio = 0.05, nbMinIterations = 50) }"},{"path":"/reference/setConditionalModeEstimationSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set conditional mode estimation settings — setConditionalModeEstimationSettings","title":"[Monolix] Set conditional mode estimation settings — setConditionalModeEstimationSettings","text":"Set value one several conditional mode estimation settings. Associated settings :","code":""},{"path":"/reference/setConditionalModeEstimationSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set conditional mode estimation settings — setConditionalModeEstimationSettings","text":"","code":"setConditionalModeEstimationSettings(...)"},{"path":"/reference/setConditionalModeEstimationSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set conditional mode estimation settings — setConditionalModeEstimationSettings","text":"... collection comma-separated pairs {settingName = settingValue}.","code":""},{"path":[]},{"path":"/reference/setConditionalModeEstimationSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set conditional mode estimation settings — setConditionalModeEstimationSettings","text":"","code":"if (FALSE) { setConditionalModeEstimationSettings(nbOptimizationIterationsMode = 20,                                       optimizationToleranceMode = 0.1) }"},{"path":"/reference/setConsoleMode.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - Pkanalix - Simulx] Set console mode — setConsoleMode","title":"[Monolix - Pkanalix - Simulx] Set console mode — setConsoleMode","text":"Set console mode choose volume output console running estimation tasks (verbosity level):","code":""},{"path":"/reference/setConsoleMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - Pkanalix - Simulx] Set console mode — setConsoleMode","text":"","code":"setConsoleMode(mode)"},{"path":"/reference/setConsoleMode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - Pkanalix - Simulx] Set console mode — setConsoleMode","text":"mode (string) Accepted values : \"none\" [default], \"basic\", \"complete\"","code":""},{"path":[]},{"path":"/reference/setCorrelationBlocks.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set correlation block structure — setCorrelationBlocks","title":"[Monolix] Set correlation block structure — setCorrelationBlocks","text":"Define correlation block structure associated variability levels current project. Call getVariabilityLevels get list variability levels getIndividualParameterModel get list available individual parameters within current project.","code":""},{"path":"/reference/setCorrelationBlocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set correlation block structure — setCorrelationBlocks","text":"","code":"setCorrelationBlocks(...)"},{"path":"/reference/setCorrelationBlocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set correlation block structure — setCorrelationBlocks","text":"... list comma-separated pairs {variabilityLevel = vector< (array<string>)parameterNames} > }.","code":""},{"path":[]},{"path":"/reference/setCorrelationBlocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set correlation block structure — setCorrelationBlocks","text":"","code":"if (FALSE) { setCorrelationBlocks(id = list( c(\"ka\",\"V\",\"Tlag\") ), iov1 = list( c(\"ka\",\"Cl\"), c(\"Tlag\",\"V\") ) ) }"},{"path":"/reference/setCovariateModel.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set covariate model — setCovariateModel","title":"[Monolix] Set covariate model — setCovariateModel","text":"Set covariates influencing individual parameters present project. Call getIndividualParameterModel get list individual parameters present within current project.  getCovariateInformation know available covariates given level variability given individual parameter.","code":""},{"path":"/reference/setCovariateModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set covariate model — setCovariateModel","text":"","code":"setCovariateModel(...)"},{"path":"/reference/setCovariateModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set covariate model — setCovariateModel","text":"... list comma-separated pairs {parameterName = { covariateName = (bool)isInfluent, ...} }","code":""},{"path":[]},{"path":"/reference/setCovariateModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set covariate model — setCovariateModel","text":"","code":"if (FALSE) { setCovariateModel( ka = c( Wt = FALSE, tWt = TRUE, lcat2 = TRUE),                    Cl = c( SEX = TRUE )                    ) }"},{"path":"/reference/setData.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Set project data — setData","title":"[Monolix - PKanalix] Set project data — setData","text":"Set project data giving data file specifying headers observations types.","code":""},{"path":"/reference/setData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Set project data — setData","text":"","code":"setData(dataFile, headerTypes, observationTypes, nbSSDoses = NULL)"},{"path":"/reference/setData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Set project data — setData","text":"dataFile (character): Path data file. Can absolute relative current working directory. headerTypes (array<character>): collection header types.  possible header types : \"ignore\", \"id\", \"time\", \"observation\", \"amount\", \"contcov\", \"catcov\", \"occ\", \"evid\", \"mdv\", \"obsid\", \"cens\", \"limit\", \"regressor\",\"admid\", \"rate\", \"tinf\", \"ss\", \"ii\", \"addl\", \"date\". Notice types displayed interface, one shortcuts. observationTypes [optional] (list): list giving type observation present data file. one y-type, corresponding observation name can omitted. possible observation types \"continuous\", \"discrete\", \"event\". nbSSDoses [optional](int): Number doses (SS column).","code":""},{"path":[]},{"path":"/reference/setData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Set project data — setData","text":"","code":"if (FALSE) { setData(dataFile = \"/path/to/data/file.txt\",          headerTypes = c(\"IGNORE\", \"OBSERVATION\"), observationTypes = \"continuous\") setData(dataFile = \"/path/to/data/file.txt\",          headerTypes = c(\"IGNORE\", \"OBSERVATION\", \"YTYPE\"),         observationTypes = list(Concentration = \"continuous\", Level = \"discrete\")) }"},{"path":"/reference/setDataSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Set the value of one or several of the data settings associated to the non compartmental analysis — setDataSettings","title":"[PKanalix] Set the value of one or several of the data settings associated to the non compartmental analysis — setDataSettings","text":"Set value one several data settings associated non compartmental analysis. Associated settings names :","code":""},{"path":"/reference/setDataSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Set the value of one or several of the data settings associated to the non compartmental analysis — setDataSettings","text":"","code":"setDataSettings(...)"},{"path":"/reference/setDataSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Set the value of one or several of the data settings associated to the non compartmental analysis — setDataSettings","text":"... collection comma-separated pairs {settingName = settingValue}.","code":""},{"path":[]},{"path":"/reference/setDataSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Set the value of one or several of the data settings associated to the non compartmental analysis — setDataSettings","text":"","code":"if (FALSE) { setDataSettings(\"datatype\" = list(\"Y\" =\"plasma\")) # set the settings whose name has been passed in argument setDataSettings(\"units\"=list(dose=\"ng\",time=\"h\",volume=\"mL\", grading=\"\")) setDataSettings(\"scalings\"=list(dose=0.001, time=24)) }"},{"path":"/reference/setErrorModel.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set error model — setErrorModel","title":"[Monolix] Set error model — setErrorModel","text":"Set error model type used observation models.  Call getObservationInformation get list observation models present current project.","code":""},{"path":"/reference/setErrorModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set error model — setErrorModel","text":"","code":"setErrorModel(...)"},{"path":"/reference/setErrorModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set error model — setErrorModel","text":"... list comma-separated pairs {observationModel = (string)errorModelType}.","code":""},{"path":"/reference/setErrorModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix] Set error model — setErrorModel","text":"Available error model types : Error model parameters initialized 1 default. Call setPopulationParameterInformation modify initial value. value exponent parameter fixed default using \"combined1\" \"combined2\" models.  Use setPopulationParameterInformation enable estimation.","code":""},{"path":[]},{"path":"/reference/setErrorModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set error model — setErrorModel","text":"","code":"if (FALSE) { setErrorModel(Conc = \"constant\", Effect = \"combined1\") }"},{"path":"/reference/setGeneralSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set common settings for algorithms — setGeneralSettings","title":"[Monolix] Set common settings for algorithms — setGeneralSettings","text":"Set value one several common settings Monolix algorithms. Associated settings :","code":""},{"path":"/reference/setGeneralSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set common settings for algorithms — setGeneralSettings","text":"","code":"setGeneralSettings(...)"},{"path":"/reference/setGeneralSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set common settings for algorithms — setGeneralSettings","text":"... collection comma-separated pairs {settingName = settingValue}.","code":""},{"path":[]},{"path":"/reference/setGeneralSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set common settings for algorithms — setGeneralSettings","text":"","code":"if (FALSE) { setGeneralSettings(autoChains = FALSE, nbchains = 10) }"},{"path":"/reference/setGroupComparisonSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Set group comparison settings — setGroupComparisonSettings","title":"[Simulx] Set group comparison settings — setGroupComparisonSettings","text":"Set settings related comparison endpoints across groups.","code":""},{"path":"/reference/setGroupComparisonSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Set group comparison settings — setGroupComparisonSettings","text":"","code":"setGroupComparisonSettings(referenceGroup = NULL, enable = TRUE)"},{"path":"/reference/setGroupComparisonSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Set group comparison settings — setGroupComparisonSettings","text":"referenceGroup (string) (optional) Group use reference. enable (bool) (optional) Enable group comparison, TRUE default.","code":""},{"path":"/reference/setGroupComparisonSettings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Set group comparison settings — setGroupComparisonSettings","text":"Endpoints summarize outcome values individuals, simulation group replicate. Endpoints defined defineEndpoint can compared across groups Simulx GUI. setGroupComparisonSettings enables specify endpoints compared across simulation groups group use reference. Group comparison performed Endpoints task.","code":""},{"path":[]},{"path":"/reference/setGroupComparisonSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Set group comparison settings — setGroupComparisonSettings","text":"","code":"initializeLixoftConnectors(\"simulx\") project_name <- file.path(getDemoPath(), \"6.outcome_endpoints\", \"6.2.group_comparison\", \"groupComp_PKPD_medianInhibition_percentEfficacy.smlx\") loadProject(project_name) # Change the reference group setGroupComparisonSettings(referenceGroup = \"OD_300mgPerDay_\", enable = TRUE) # Turn off group comparison setGroupComparisonSettings(enable = FALSE)"},{"path":"/reference/setGroupElement.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Set elements to a simulation group — setGroupElement","title":"[Simulx] Set elements to a simulation group — setGroupElement","text":"Set new element specific group. element type already set, setGroupElement replace .  treatments outputs, possible set several elements time using vector.","code":""},{"path":"/reference/setGroupElement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Set elements to a simulation group — setGroupElement","text":"","code":"setGroupElement(group, elements)"},{"path":"/reference/setGroupElement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Set elements to a simulation group — setGroupElement","text":"group (character) Group name (creating new Simulx project, default group name \"simulationGroup1\"). elements (character) Vector elements already defined","code":""},{"path":"/reference/setGroupElement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Set elements to a simulation group — setGroupElement","text":"Simulation groups used simulation Simulx GUI.  rules apply GUI set group elements. example, covariate element can set parameter element population parameter. creation Simulx project, first group created default name \"simulationGroup1\".  Use getGroups check groups already defined, elements set group.  add simulation group, use addGroup.  remove simulation group, use removeGroup. add change group element, use setGroupElement.  remove element group, use removeGroupElement. define new elements, use one define...Element functions.","code":""},{"path":[]},{"path":"/reference/setGroupElement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Set elements to a simulation group — setGroupElement","text":"","code":"initializeLixoftConnectors(\"monolix\")   monolix_project <- file.path(getDemoPath(), \"1.creating_and_using_models\", \"1.1.libraries_of_models\", \"warfarinPK_project.mlxtran\")   initializeLixoftConnectors(\"simulx\")   importProject(monolix_project)   setGroupElement(group = \"simulationGroup1\", elements = c(\"mlx_EBEs\", \"mlx_Cc\"))"},{"path":"/reference/setGroupRemaining.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Set remaining parameters for a simulation group — setGroupRemaining","title":"[Simulx] Set remaining parameters for a simulation group — setGroupRemaining","text":"Set values remaining parameters (typically error model parameters) group.","code":""},{"path":"/reference/setGroupRemaining.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Set remaining parameters for a simulation group — setGroupRemaining","text":"","code":"setGroupRemaining(group, remaining)"},{"path":"/reference/setGroupRemaining.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Set remaining parameters for a simulation group — setGroupRemaining","text":"group (character) Group name remaining (vector) list remaining variables","code":""},{"path":"/reference/setGroupRemaining.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Set remaining parameters for a simulation group — setGroupRemaining","text":"Remaining parameters parameters appear structural model (input line [LONGITUDINAL]) neither individual parameters regressors. typically error model parameters. individual parameters element selected simulation, model includes remaining parameters, possible set values setGroupRemaining. typically enables make simulation measurement noise, individual element.  error model parameters impact simulation noisy observation (DEFINITION section [LONGITUDINAL] block) set output element (instead smooth prediction OUTPUT variable EQUATION). population parameters element selected, possible set remaining parameters parameters already part population element.","code":""},{"path":[]},{"path":"/reference/setGroupRemaining.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Set remaining parameters for a simulation group — setGroupRemaining","text":"","code":"initializeLixoftConnectors(\"monolix\")   monolix_project <- file.path(getDemoPath(), \"1.creating_and_using_models\", \"1.1.libraries_of_models\", \"warfarinPK_project.mlxtran\")   initializeLixoftConnectors(\"simulx\")   importProject(monolix_project)   setGroupElement(group = \"simulationGroup1\", elements = \"mlx_EBEs\")   setGroupRemaining(group = \"simulationGroup1\", remaining = list(a = 0.2, b = 0.05))"},{"path":"/reference/setGroupSize.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Set simulation group size — setGroupSize","title":"[Simulx] Set simulation group size — setGroupSize","text":"Define size simulation group.","code":""},{"path":"/reference/setGroupSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Set simulation group size — setGroupSize","text":"","code":"setGroupSize(group, size)"},{"path":"/reference/setGroupSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Set simulation group size — setGroupSize","text":"group (string) Name group size changed. size (int) Size new group.","code":""},{"path":"/reference/setGroupSize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Set simulation group size — setGroupSize","text":"Group size number individuals (ie sets individual parameters covariate values) sampled Simulx given group.  mixed number replicates can set setNbReplicates. get size group, please use getGroups. options Simulx scenario Simulx GUI. Check online doc Simulx get guidance use .","code":""},{"path":[]},{"path":"/reference/setGroupSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Set simulation group size — setGroupSize","text":"","code":"initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"1.overview\", \"importFromMonolix_clinicalTrial.smlx\")   loadProject(project_name)   setGroupSize(\"gr_BID_N30\", 40)   setGroupSize(\"gr_OD_N30\", 40)"},{"path":"/reference/setIndividualLogitLimits.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set individual parameter distribution limits — setIndividualLogitLimits","title":"[Monolix] Set individual parameter distribution limits — setIndividualLogitLimits","text":"Set minimum maximum values individual parameter can used. Used distribution parameter \"logitNormal\", else wise taken account","code":""},{"path":"/reference/setIndividualLogitLimits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set individual parameter distribution limits — setIndividualLogitLimits","text":"","code":"setIndividualLogitLimits(...)"},{"path":"/reference/setIndividualLogitLimits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set individual parameter distribution limits — setIndividualLogitLimits","text":"... list comma-separated pairs {individualParameter = [(double)min,(double)max] }","code":""},{"path":[]},{"path":"/reference/setIndividualLogitLimits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set individual parameter distribution limits — setIndividualLogitLimits","text":"","code":"if (FALSE) { setIndividualLogitLimits( V = c(0, 1), ka = c(-1, 2) ) }"},{"path":"/reference/setIndividualParameterDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set individual parameter distribution — setIndividualParameterDistribution","title":"[Monolix] Set individual parameter distribution — setIndividualParameterDistribution","text":"Set distribution estimated parameters. Available distributions \"normal\", \"logNormal\" \"logitNormal\". Call getIndividualParameterModel get list available individual parameters within current project.","code":""},{"path":"/reference/setIndividualParameterDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set individual parameter distribution — setIndividualParameterDistribution","text":"","code":"setIndividualParameterDistribution(...)"},{"path":"/reference/setIndividualParameterDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set individual parameter distribution — setIndividualParameterDistribution","text":"... list comma-separated pairs {parameterName = (string)\"distribution\"}.","code":""},{"path":[]},{"path":"/reference/setIndividualParameterDistribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set individual parameter distribution — setIndividualParameterDistribution","text":"","code":"if (FALSE) { setIndividualParameterDistribution(V = \"logNormal\") setIndividualParameterDistribution(Cl = \"normal\", V = \"logNormal\") }"},{"path":"/reference/setIndividualParameterModel.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set individual parameter model — setIndividualParameterModel","title":"[Monolix] Set individual parameter model — setIndividualParameterModel","text":"Set information concerning individual parameter model. editable informations : distribution: (string) distribution parameter values. distribution type can \"normal\", \"logNormal\", \"logitNormal\". limits: list giving distribution limits parameter following \"logitNormal\" distribution variability: list giving, variability level, individual parameters variability covariateModel: list giving, individual parameter, related covariates used . correlationBlocks : list giving, variability level, blocks correlation matrix random effects.  block represented vector individual parameter names.","code":""},{"path":"/reference/setIndividualParameterModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set individual parameter model — setIndividualParameterModel","text":"","code":"setIndividualParameterModel(...)"},{"path":"/reference/setIndividualParameterModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set individual parameter model — setIndividualParameterModel","text":"... list comma-separated pairs {[info] = [value]}.","code":""},{"path":"/reference/setIndividualParameterVariability.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Individual variability management — setIndividualParameterVariability","title":"[Monolix] Individual variability management — setIndividualParameterVariability","text":"Add remove inter-individual /intra-individual variability individual parameters present project. Call getIndividualParameterModel get list available parameters within current project.","code":""},{"path":"/reference/setIndividualParameterVariability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Individual variability management — setIndividualParameterVariability","text":"","code":"setIndividualParameterVariability(...)"},{"path":"/reference/setIndividualParameterVariability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Individual variability management — setIndividualParameterVariability","text":"... list comma-separated pairs {variabilityLevel = {individualParameterName = (bool)hasVariability} }.","code":""},{"path":[]},{"path":"/reference/setIndividualParameterVariability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Individual variability management — setIndividualParameterVariability","text":"","code":"if (FALSE) { setIndividualParameterVariability(ka = TRUE, V = FALSE) setIndividualParameterVariability(id = list(ka = TRUE), iov1 = list(ka = FALSE)) }"},{"path":"/reference/setInitialEstimatesToLastEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Initialize population parameters with the last estimated ones — setInitialEstimatesToLastEstimates","title":"[Monolix] Initialize population parameters with the last estimated ones — setInitialEstimatesToLastEstimates","text":"Set initial value population parameters present within current project ones previously estimated. values used population parameter estimation algorithm next scenario run. WARNING: set run, possible set initial values structure project changed since last results.","code":""},{"path":"/reference/setInitialEstimatesToLastEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Initialize population parameters with the last estimated ones — setInitialEstimatesToLastEstimates","text":"","code":"setInitialEstimatesToLastEstimates(fixedEffectsOnly = FALSE)"},{"path":"/reference/setInitialEstimatesToLastEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Initialize population parameters with the last estimated ones — setInitialEstimatesToLastEstimates","text":"fixedEffectsOnly (bool) boolean set TRUE, fixed effects initialized last estimated values. Otherwise, individual variances error model parameters re-initialized . Equals FALSE default.","code":""},{"path":[]},{"path":"/reference/setInitialEstimatesToLastEstimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Initialize population parameters with the last estimated ones — setInitialEstimatesToLastEstimates","text":"","code":"if (FALSE) { setInitialEstimatesToLastEstimates() # fixedEffectsOnly = FALSE by default setInitialEstimatesToLastEstimates(TRUE) }"},{"path":"/reference/setLogLikelihoodEstimationSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set loglikelihood estimation settings — setLogLikelihoodEstimationSettings","title":"[Monolix] Set loglikelihood estimation settings — setLogLikelihoodEstimationSettings","text":"Set value loglikelihood estimation settings. Associated settings :","code":""},{"path":"/reference/setLogLikelihoodEstimationSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set loglikelihood estimation settings — setLogLikelihoodEstimationSettings","text":"","code":"setLogLikelihoodEstimationSettings(...)"},{"path":"/reference/setLogLikelihoodEstimationSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set loglikelihood estimation settings — setLogLikelihoodEstimationSettings","text":"... collection comma-separated pairs {settingName = settingValue}.","code":""},{"path":[]},{"path":"/reference/setLogLikelihoodEstimationSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set loglikelihood estimation settings — setLogLikelihoodEstimationSettings","text":"","code":"if (FALSE) { setLogLikelihoodEstimationSettings(nbFixedIterations = 20000) }"},{"path":"/reference/setMapping.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Set mapping — setMapping","title":"[Monolix - PKanalix] Set mapping — setMapping","text":"Set mapping data model.","code":""},{"path":"/reference/setMapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Set mapping — setMapping","text":"","code":"setMapping(mapping)"},{"path":"/reference/setMapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Set mapping — setMapping","text":"mapping (list<list>) list lists representing link data model. list contains: data (string) Data name prediction (string) Prediction name model [Monolix] (string) Model observation name (continuous observations )","code":""},{"path":[]},{"path":[]},{"path":"/reference/setMCMCSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set settings associated to the MCMC algorithm — setMCMCSettings","title":"[Monolix] Set settings associated to the MCMC algorithm — setMCMCSettings","text":"Set value one several MCMC algorithm specific settings current project. Associated settings :","code":""},{"path":"/reference/setMCMCSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set settings associated to the MCMC algorithm — setMCMCSettings","text":"","code":"setMCMCSettings(...)"},{"path":"/reference/setMCMCSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set settings associated to the MCMC algorithm — setMCMCSettings","text":"... collection comma-separated pairs {settingName = settingValue}.","code":""},{"path":[]},{"path":"/reference/setMCMCSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set settings associated to the MCMC algorithm — setMCMCSettings","text":"","code":"if (FALSE) { setMCMCSettings(strategy = c(2,1,2)) }"},{"path":"/reference/setNbReplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Set number of replicates — setNbReplicates","title":"[Simulx] Set number of replicates — setNbReplicates","text":"Define number replicates simulation.","code":""},{"path":"/reference/setNbReplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Set number of replicates — setNbReplicates","text":"","code":"setNbReplicates(nb)"},{"path":"/reference/setNbReplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Set number of replicates — setNbReplicates","text":"nb (int) Number replicates.","code":""},{"path":"/reference/setNbReplicates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Set number of replicates — setNbReplicates","text":"number replicates number times Simulx simulate given study.  mixed group size defined setGroupSize. simulate one study, Simulx samples number individuals group, defined setGroupSize (say NidsPerGroup). simulate replicate studies, sample replicate NidsPerGroup individuals group (like changing seed). parameter element individual element population parameter defined vector, replicates always sample individuals using population parameters. case, useful check effect changing seed, get example uncertainty endpoint due limited sampling. parameter element population element defined table containing several lines, imported element mlx_PopUncertainSA mlx_TypicalUncertainSA, replicate use different population parameter simulate study. case, possible see effect changing population parameters prediction (addition uncertainty due limited sampling). options Simulx scenario Simulx GUI. Check online doc Simulx get guidance use .","code":""},{"path":[]},{"path":"/reference/setNbReplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Set number of replicates — setNbReplicates","text":"","code":"initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"5.simulation\", \"replicates.smlx\")   loadProject(project_name)   setNbReplicates(nb = 20)"},{"path":"/reference/setNCAResultsStratification.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Set NCA results stratification — setNCAResultsStratification","title":"[PKanalix] Set NCA results stratification — setNCAResultsStratification","text":"Set stratification used compute NCA parameters stratistics table. Stratification defined : stratification covariate groups shared NCA CA results stratification state specific task results","code":""},{"path":"/reference/setNCAResultsStratification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Set NCA results stratification — setNCAResultsStratification","text":"","code":"setNCAResultsStratification(   split = NULL,   filter = NULL,   groups = NULL,   state = NULL )"},{"path":"/reference/setNCAResultsStratification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Set NCA results stratification — setNCAResultsStratification","text":"split (vector<string>) Ordered list splitted covariates filter (list< pair<string, vector<int>> >) List paired containing covariate name indexes associated kept groups groups Stratification groups list state Stratification state","code":""},{"path":"/reference/setNCAResultsStratification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[PKanalix] Set NCA results stratification — setNCAResultsStratification","text":"covariate, stratification groups can defined list : stratification state represented list : Note: acceptance criteria filtering, possible give criterion name instead pair.","code":""},{"path":[]},{"path":"/reference/setNCAResultsStratification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Set NCA results stratification — setNCAResultsStratification","text":"","code":"if (FALSE) { setNCAResultsStratification(split = \"SEX\") setNCAResultsStratification(split = c(\"SEX\", \"WEIGHT\"))  setNCAResultsStratification(filter = \"Span\") setNCAResultsStratification(filter = list(\"Span\", list(\"SEX\", 1)))  setNCAResultsStratification(split = \"WEIGHT\", filter = list(list(\"TRT\", c(1,2))), groups = list(list(name = \"WEIGHT\", definition = c(65,5, 72)), list(name = \"TRT\", definition = list(c(\"a\",\"b\"), \"c\", c(\"d\",\"e\")))))  s = getNCAResultsStratification() setNCAResultsStratification(state = s$state, groups = s$groups) }"},{"path":"/reference/setNCASettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[PKanalix] Set the value of one or several of the settings associated to the non compartmental analysis — setNCASettings","title":"[PKanalix] Set the value of one or several of the settings associated to the non compartmental analysis — setNCASettings","text":"Set value one several settings associated non compartmental analysis. Associated settings :","code":""},{"path":"/reference/setNCASettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[PKanalix] Set the value of one or several of the settings associated to the non compartmental analysis — setNCASettings","text":"","code":"setNCASettings(...)"},{"path":"/reference/setNCASettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[PKanalix] Set the value of one or several of the settings associated to the non compartmental analysis — setNCASettings","text":"... collection comma-separated pairs {settingName = settingValue}.","code":""},{"path":[]},{"path":"/reference/setNCASettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[PKanalix] Set the value of one or several of the settings associated to the non compartmental analysis — setNCASettings","text":"","code":"if (FALSE) { setNCASettings(integralMethod = \"LinLogTrapLinLogInterp\", weightingnca = \"uniform\") # set the settings whose name has been passed in argument setNCASettings(administrationType = list(\"1\"=\"extravascular\")) # set the administration id \"1\" to extravascular setNCASettings(startTimeNotBefore = list(TRUE, 15)) # set the estimation of the lambda_z with points with time over 15 setNCASettings(timeValuesPerId = list('1'=c(4, 6, 8, 30), '4'=c(8, 12, 18, 24, 30))) # set the points to use for the lambda_z to time={4, 6, 8, 30} for id '1' and ime={8, 12, 18, 24, 30} for id '4'  setNCASettings(timeValuesPerId = NULL) # set the points to use for the lambda_z to the default rule }"},{"path":"/reference/setObservationDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set observation model distribution — setObservationDistribution","title":"[Monolix] Set observation model distribution — setObservationDistribution","text":"Set distribution Gaussian space observation models. Available distribution types \"normal\", \"logNormal\", \"logitNormal\". Call getObservationInformation get list available observation models within current project.","code":""},{"path":"/reference/setObservationDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set observation model distribution — setObservationDistribution","text":"","code":"setObservationDistribution(...)"},{"path":"/reference/setObservationDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set observation model distribution — setObservationDistribution","text":"... list comma-separated pairs {observationModel = (string)\"distribution\"}.","code":""},{"path":[]},{"path":"/reference/setObservationDistribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set observation model distribution — setObservationDistribution","text":"","code":"if (FALSE) { setObservationDistribution(Conc = \"normal\") setObservationDistribution(Conc = \"normal\", Effect = \"logNormal\") }"},{"path":"/reference/setObservationLimits.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set observation model distribution limits — setObservationLimits","title":"[Monolix] Set observation model distribution limits — setObservationLimits","text":"Set minimum maximum values observations can found. Used distribution error model \"logitNormal\", else wise taken account","code":""},{"path":"/reference/setObservationLimits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set observation model distribution limits — setObservationLimits","text":"","code":"setObservationLimits(...)"},{"path":"/reference/setObservationLimits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set observation model distribution limits — setObservationLimits","text":"... list comma-separated pairs {observationModel = [(double)min,(double)max] }","code":""},{"path":[]},{"path":"/reference/setObservationLimits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set observation model distribution limits — setObservationLimits","text":"","code":"if (FALSE) { setObservationLimits( Conc = c(-Inf,Inf), Effect = c(0,Inf) ) }"},{"path":"/reference/setPlotPreferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Set preferences to customize plots When preferences are Set, the updated preferences will used in all the plots — setPlotPreferences","title":"Set preferences to customize plots When preferences are Set, the updated preferences will used in all the plots — setPlotPreferences","text":"Set preferences customize plots preferences Set, updated preferences used plots","code":""},{"path":"/reference/setPlotPreferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set preferences to customize plots When preferences are Set, the updated preferences will used in all the plots — setPlotPreferences","text":"","code":"setPlotPreferences(update = NULL)"},{"path":"/reference/setPlotPreferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set preferences to customize plots When preferences are Set, the updated preferences will used in all the plots — setPlotPreferences","text":"update list containing plot elements updated.","code":""},{"path":"/reference/setPlotPreferences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set preferences to customize plots When preferences are Set, the updated preferences will used in all the plots — setPlotPreferences","text":"function creates theme customizes plot looks, .e. legend, colors fills, transparencies, linetypes sizes, etc. curve, list available customizations: color: color (lines points) fill: color (surfaces) opacity: color transparency radius: size points shape: shape points lineType: linetype lineWidth: line size legend: name legend (NULL, legend displayed element)","code":""},{"path":[]},{"path":"/reference/setPlotPreferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set preferences to customize plots When preferences are Set, the updated preferences will used in all the plots — setPlotPreferences","text":"","code":"if (FALSE) {   getPlotPreferences()$obs[c(\"color\", \"legend\")]   update = list(obs = list(color = \"green\", legend = \"Observation\"))   setPlotPreferences(update = update)   getPlotPreferences()$obs[c(\"color\", \"legend\")] }"},{"path":"/reference/setPopulationParameterEstimationSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set population parameter estimation settings — setPopulationParameterEstimationSettings","title":"[Monolix] Set population parameter estimation settings — setPopulationParameterEstimationSettings","text":"Set value one several population parameter estimation settings. Associated settings :","code":""},{"path":"/reference/setPopulationParameterEstimationSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set population parameter estimation settings — setPopulationParameterEstimationSettings","text":"","code":"setPopulationParameterEstimationSettings(...)"},{"path":"/reference/setPopulationParameterEstimationSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set population parameter estimation settings — setPopulationParameterEstimationSettings","text":"... collection comma-separated pairs {settingName = SettingValue}.","code":""},{"path":[]},{"path":"/reference/setPopulationParameterEstimationSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set population parameter estimation settings — setPopulationParameterEstimationSettings","text":"","code":"if (FALSE) { setPopulationParameterEstimationSettings(exploratoryAutoStop = TRUE, tauOmega = 0.95) }"},{"path":"/reference/setPopulationParameterInformation.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Population parameters initialization and estimation method — setPopulationParameterInformation","title":"[Monolix] Population parameters initialization and estimation method — setPopulationParameterInformation","text":"Set initial value, estimation method , relevant, MAP parameters one several population parameters present within current project (fixed effects + individual variances + error model parameters). Available methods : \"FIXED\": Fixed \"MLE\": Maximum Likelihood Estimation \"MAP\": Maximum Posteriori Call getPopulationParameterInformation get list initializable population parameters present within current project.","code":""},{"path":"/reference/setPopulationParameterInformation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Population parameters initialization and estimation method — setPopulationParameterInformation","text":"","code":"setPopulationParameterInformation(...)"},{"path":"/reference/setPopulationParameterInformation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Population parameters initialization and estimation method — setPopulationParameterInformation","text":"... list comma-separated pairs {paramName = list( initialValue = (double), method = (string)\"method\"}. case \"MAP\" method, user can specify associated typical value standard deviation values using additional list elements {paramName = list( priorValue = (double)1, priorSD = (double)2 )}. default, prior value corresponds population parameter prior standard deviation set 1.","code":""},{"path":[]},{"path":"/reference/setPopulationParameterInformation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Population parameters initialization and estimation method — setPopulationParameterInformation","text":"","code":"if (FALSE) { setPopulationParameterInformation(Cl_pop = list(initialValue = 0.5, method = \"FIXED\"),                                    V_pop  = list(initialValue = 1),                                   ka_pop = list(method = \"MAP\", priorValue = 1, priorSD = 0.1)) }"},{"path":"/reference/setPreferences.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Set preferences — setPreferences","title":"[Monolix - PKanalix - Simulx] Set preferences — setPreferences","text":"Set value one several project preferences. Prefenreces :","code":""},{"path":"/reference/setPreferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Set preferences — setPreferences","text":"","code":"setPreferences(...)"},{"path":"/reference/setPreferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Set preferences — setPreferences","text":"... collection comma-separated pairs {preferenceName = settingValue}.","code":""},{"path":[]},{"path":"/reference/setPreferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix - Simulx] Set preferences — setPreferences","text":"","code":"if (FALSE) { setPreferences(exportCharts = FALSE, delimiter = \",\") }"},{"path":"/reference/setProjectSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Set project settings — setProjectSettings","title":"[Monolix - PKanalix - Simulx] Set project settings — setProjectSettings","text":"Set value one several settings project.  Associated settings Monolix projects : Associated settings PKanalix projects : Associated settings Simulx projects :","code":""},{"path":"/reference/setProjectSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Set project settings — setProjectSettings","text":"","code":"setProjectSettings(...)"},{"path":"/reference/setProjectSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Set project settings — setProjectSettings","text":"... collection comma-separated pairs {settingName = settingValue}.","code":""},{"path":[]},{"path":"/reference/setProjectSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix - Simulx] Set project settings — setProjectSettings","text":"","code":"if (FALSE) { setProjectSettings(directory = \"/path/to/export/directory\", seed = 12345) }"},{"path":"/reference/setResultsStratificationGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Set results stratification groups — setResultsStratificationGroups","title":"[Monolix - PKanalix - Simulx] Set results stratification groups — setResultsStratificationGroups","text":"Set stratification covariate groups used compute statistics individual parameters. groups shared task results.","code":""},{"path":"/reference/setResultsStratificationGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Set results stratification groups — setResultsStratificationGroups","text":"","code":"setResultsStratificationGroups(groups)"},{"path":"/reference/setResultsStratificationGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Set results stratification groups — setResultsStratificationGroups","text":"groups Stratification groups list","code":""},{"path":"/reference/setResultsStratificationGroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix - Simulx] Set results stratification groups — setResultsStratificationGroups","text":"covariate, stratification groups can defined list :","code":""},{"path":[]},{"path":"/reference/setResultsStratificationGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix - Simulx] Set results stratification groups — setResultsStratificationGroups","text":"","code":"if (FALSE) { setResultsStratificationGroups(list(list(name = \"WEIGHT\", definition = c(65,5, 72)), list(name = \"TRT\", definition = list(c(\"a\",\"b\"), \"c\", c(\"d\",\"e\"))))) }"},{"path":"/reference/setSameIndividualsAmongGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Set same individuals among groups — setSameIndividualsAmongGroups","title":"[Simulx] Set same individuals among groups — setSameIndividualsAmongGroups","text":"Define individuals simulated among groups.","code":""},{"path":"/reference/setSameIndividualsAmongGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Set same individuals among groups — setSameIndividualsAmongGroups","text":"","code":"setSameIndividualsAmongGroups(value)"},{"path":"/reference/setSameIndividualsAmongGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Set same individuals among groups — setSameIndividualsAmongGroups","text":"value (boolean) Boolean define individuals groups.","code":""},{"path":"/reference/setSameIndividualsAmongGroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Set same individuals among groups — setSameIndividualsAmongGroups","text":"setSameIndividualsAmongGroups(value = TRUE) allows individual parameters groups. available following elements (required sampling) groups: size groups, parameters (population individual) covariates. main goal make comparison groups easier.  particular, used compare different treatments individuals - subjects individual parameters. Selecting individuals among groups ensures differences groups due treatment .  obtain conclusion without option enabled, simulation performed large number individuals averaged individual differences. options Simulx scenario Simulx GUI. Check online doc Simulx get guidance use .","code":""},{"path":[]},{"path":"/reference/setSameIndividualsAmongGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Set same individuals among groups — setSameIndividualsAmongGroups","text":"","code":"# create two groups with different treatments and same individuals   initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"4.exploration\", \"PKPD_exploration.smlx\")   loadProject(project_name)   addGroup(\"simulationGroup2\")   setGroupElement(\"simulationGroup2\", elements = \"Dose_4000\")   setSameIndividualsAmongGroups(value = TRUE)"},{"path":"/reference/setSamplingMethod.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Set sampling method — setSamplingMethod","title":"[Simulx] Set sampling method — setSamplingMethod","text":"Define sampling method used simulation. possibilities : keepOrder (default): individual values taken order appear table. withReplacement: individual values sampled table replacement. withoutReplacement:  individual values sampled table without replacement. option available tables contain least number individual values group size. sampling methods general apply tables simulation scenario.","code":""},{"path":"/reference/setSamplingMethod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Set sampling method — setSamplingMethod","text":"","code":"setSamplingMethod(method)"},{"path":"/reference/setSamplingMethod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Set sampling method — setSamplingMethod","text":"method (character) keepOrder, withReplacement, withoutReplacement","code":""},{"path":"/reference/setSamplingMethod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Set sampling method — setSamplingMethod","text":"options Simulx scenario Simulx GUI. Check online doc Simulx get guidance use .","code":""},{"path":[]},{"path":"/reference/setSamplingMethod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Set sampling method — setSamplingMethod","text":"","code":"initializeLixoftConnectors(\"simulx\")   project_name <- file.path(getDemoPath(), \"5.simulation\", \"samplingOptions.smlx\")   loadProject(project_name)   setSamplingMethod(method = \"withReplacement\")"},{"path":"/reference/setScenario.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix - Simulx] Set scenario — setScenario","title":"[Monolix - PKanalix - Simulx] Set scenario — setScenario","text":"Clear current scenario build new one given list tasks.","code":""},{"path":"/reference/setScenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix - Simulx] Set scenario — setScenario","text":"","code":"setScenario(...)"},{"path":"/reference/setScenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix - Simulx] Set scenario — setScenario","text":"... list tasks previously defined","code":""},{"path":"/reference/setScenario.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix - Simulx] Set scenario — setScenario","text":"scenario list tasks run runScenario. Setting scenario equivalent selecting tasks Monolix, PKanalix Simulx GUI performed clicking RUN. Monolix, setScenario requires given list tasks, linearization option list plots. Every task list associated boolean. NOTE: default boolean false, thus, user can state run scenario. NOTE: Within MONOLIX scenario, order according different algorithms run fixed: PKanalix, setScenario requires given list tasks. Every task list associated boolean. NOTE: default boolean false, thus, user can state run scenario. NOTE: Within PKanalix scenario, order according different algorithms run fixed: Simulx, setScenario requires given list tasks. Every task list associated boolean. NOTE: default boolean false, thus, user can state run scenario. NOTE: Within Simulx scenario, order according different algorithms run fixed: Note: every task can also run separately specific function, runSimulation Simulx, runEstimation Monolix. CA task PKanalix part scenario, must run runCAEstimation.","code":""},{"path":[]},{"path":[]},{"path":"/reference/setSharedIds.html","id":null,"dir":"Reference","previous_headings":"","what":"[Simulx] Set element types sharing individuals — setSharedIds","title":"[Simulx] Set element types sharing individuals — setSharedIds","text":"Select element types share individuals simulation.","code":""},{"path":"/reference/setSharedIds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Simulx] Set element types sharing individuals — setSharedIds","text":"","code":"setSharedIds(sharedIds)"},{"path":"/reference/setSharedIds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Simulx] Set element types sharing individuals — setSharedIds","text":"sharedIds (vector<string>) List element types. available types : covariate, output, treatment, regressor, population, individual","code":""},{"path":"/reference/setSharedIds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Simulx] Set element types sharing individuals — setSharedIds","text":"several elements defined tables individual values set simulation groups, option \"shared ids\" allows create intersection ids present tables. , ids intersection sampled create data simulation. options Simulx scenario Simulx GUI. Check online doc Simulx get guidance use .","code":""},{"path":[]},{"path":"/reference/setSharedIds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Simulx] Set element types sharing individuals — setSharedIds","text":"","code":"initializeLixoftConnectors(\"monolix\")   monolix_project <- file.path(getDemoPath(), \"1.creating_and_using_models\", \"1.1.libraries_of_models\", \"warfarinPK_project.mlxtran\")   loadProject(monolix_project)   runScenario()   initializeLixoftConnectors(\"simulx\")   importProject(monolix_project)   setGroupElement(group = \"simulationGroup1\", elements = c(\"mlx_EBEs\", \"mlx_Cc\"))   setSharedIds(sharedIds = c(\"individual\", \"treatment\"))    # to remove shared IDs   setSharedIds(sharedIds = c())"},{"path":"/reference/setStandardErrorEstimationSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix] Set standard error estimation settings — setStandardErrorEstimationSettings","title":"[Monolix] Set standard error estimation settings — setStandardErrorEstimationSettings","text":"Set value one several standard error estimation settings. Associated settings :","code":""},{"path":"/reference/setStandardErrorEstimationSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix] Set standard error estimation settings — setStandardErrorEstimationSettings","text":"","code":"setStandardErrorEstimationSettings(...)"},{"path":"/reference/setStandardErrorEstimationSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix] Set standard error estimation settings — setStandardErrorEstimationSettings","text":"... collection comma-separated pairs {settingName = settingValue}.","code":""},{"path":[]},{"path":"/reference/setStandardErrorEstimationSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix] Set standard error estimation settings — setStandardErrorEstimationSettings","text":"","code":"if (FALSE) { setStandardErrorEstimationSettings(minIterations = 20, maxIterations = 250) }"},{"path":"/reference/setStructuralModel.html","id":null,"dir":"Reference","previous_headings":"","what":"[Monolix - PKanalix] Set structural model file — setStructuralModel","title":"[Monolix - PKanalix] Set structural model file — setStructuralModel","text":"Set structural model.","code":""},{"path":"/reference/setStructuralModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[Monolix - PKanalix] Set structural model file — setStructuralModel","text":"","code":"setStructuralModel(modelFile)"},{"path":"/reference/setStructuralModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[Monolix - PKanalix] Set structural model file — setStructuralModel","text":"modelFile (character) Path model file. Can absolute relative  current working directory.","code":""},{"path":"/reference/setStructuralModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[Monolix - PKanalix] Set structural model file — setStructuralModel","text":"use model libraries, can find model name getLibraryModelName  set modelFile = \"lib:modelName.txt\" name obtained.","code":""},{"path":[]},{"path":"/reference/setStructuralModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[Monolix - PKanalix] Set structural model file — setStructuralModel","text":"","code":"if (FALSE) { setStructuralModel(\"/path/to/model/file.txt\") setStructuralModel(\"'lib:oral1_2cpt_kaClV1QV2.txt'\")  # working example to set a model from the library:  initializeLixoftConnectors(\"monolix\",force = TRUE) loadProject(file.path(getDemoPath(),\"1.creating_and_using_models\",\"1.1.libraries_of_models\",\"warfarinPK_project.mlxtran\")) #check model currently loaded: getStructuralModel() #get the name for a model from the library with 2 compartments: LibModel2cpt = getLibraryModelName(library = \"pk\", filters = list(administration = \"oral\", delay = \"lagTime\", absorption = \"firstOrder\", distribution = \"2compartments\", elimination = \"linear\", parametrization = \"clearance\")) #check model content: getLibraryModelContent(LibModel2cpt) #set this new model in the project: setStructuralModel(LibModel2cpt) # check that the project has now the new model instead of the previous one: getStructuralModel() }"}]
